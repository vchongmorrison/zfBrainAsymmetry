---
title: "The parapineal 'cell type' - Part 2"
---

## Identification of epiphysis cells

### **Premise**

In the previous [section](Aim1_part1.qmd), two putative epiphysis cell clusters were identified in a \~30-32 hpf scRNA-seq dataset. Can this result be replicated in the embryo? In other words, how likely are the inferred clusters to be from the epiphysis?

### Experimental design

MERFISH (**M**ultiplexed **E**rror-**R**obust **F**luorescence **i**n **s**itu **H**ybridisation) is an imaging-based approach capable of measuring RNA transcripts at single cell resolution. Unlike the destructive nature of scRNA-seq, *in vivo* spatial information (where each measured transcript is located in the sample) is preserved. [Vizgen MERSCOPE](https://vizgen.com/technology/) offers a commercial platform to perform MERFISH and was employed for this study.

![Schematic of experiment design. A detailed sample preparation protocol can be found on <https://vchongmorrison.github.io/protocols/>](./figures/merscope-experiment.png){fig-align="center"}

As illustrated above, only x2 10 micron tissue sections were collected for MERFISH. This was restricted by the maximum imaging area on the MERSCOPE slide. Therefore up to 5 embryos were simultaneously mounted in a tissue block, with the caveat that there will be unavoidable inter-embryo variation of the resulting tissue slices. Depending on how the embryo was mounted, the first (and second) section could be from the parapineal/pineal region (*sox1a* / *bsx* ++), or 1 or 2 planes later towards the pineal region only (*bsx* +).

The final dataset consists of x2 sections each of x2 biological replicates/embryos (wild type, \~32-36 hpf). For sake of brevity, each section is named 'anterior' or 'posterior' depending on their relative location within the embryo they originated from.

### Initialise R environment

[Session](session.qmd)

```{r include=FALSE}
##### Set libPaths and memory/parallel cores usage #####
.libPaths(c("/home/chongmorrison/R/x86_64-pc-linux-gnu-library/4.3",
            "/home/chongmorrison/R/4.4.1-Bioc3.19"))
.libPaths() # check .libPaths

options(Ncpus = 12) # adjust no. of cores for base R
getOption("Ncpus", 1L)

library(future)
options(future.globals.maxSize = 2000 * 1024^2) # adjust limit of allowable object size = 2G
# *could* enable parallelisation i.e. workers > 1, for Seurat etc. but breaks Python processes currently...
future::plan("multisession", workers = 1) # or use "sequential" mode
future::plan()

library(BiocParallel) # for parallelising Bioconductor packages

##### Import analysis packages #####
# Potential bug: Python environment needs to be activated before loading Seurat
library(reticulate)
conda_list() # check available conda environments
use_condaenv("singlecell-scHPF", required=TRUE) # has leidenalg etc. installed
# R packages
library(Seurat)
library(tidyverse)
library(dittoSeq)
library(SingleCellExperiment)
library(grateful)

# set seed for reproducibility of random sampling
set.seed(584)
```

## MERSCOPE panel design

Vizgen offers the option to build custom gene panels of up to 140, 300, 500 or 1000 genes at increasingly extortionate prices. Since the aim of the MERFISH experiment was to query the two putative scRNA-seq epiphysis clusters `2` and `19` from the previously analysed `ss_e107` `SeuratObject`, a 140 gene panel was designed based on this result.

```{r}
load("../foxd3flh-5k_ss-e107.RData")
```

```{r}
# Genes that are well known to be expressed in the epiphysis
markers <- c("bsx", "noto", "otx5")
dittoPlotVarsAcrossGroups(ss_e107, markers, group.by = "SCT_snn_res.1",
                          vlnplot.lineweight = 0.2, jitter.size = 0.3,
                          main = "ss_e107 (mean of bsx + noto + otx5)")
```

### Call markers

There is an overwhelming number of methods in the scientific literature for scRNA-seq marker identification. Depending on your goal(s) for performing marker identification, some approaches might be better suited than others.

In this case, the main goal is to shortlist genes that could be MERFISH-measured in the embryo, including (hopefully) the epiphysis region. As a first pass, we run `FindMarkers` (implemented in `Seurat`) on clusters `2` and `19`.

```{r}
cl2.de.markers <- FindMarkers(ss_e107, ident.1 = "2", ident.2 = NULL, only.pos = TRUE, assay = "RNA")
nrow(cl2.de.markers)
# Add new column of gene IDs called 'markers'
cl2.de.markers$markers <- rownames(cl2.de.markers)
head(cl2.de.markers, 10)
```

```{r}
cl19.de.markers <- FindMarkers(ss_e107, ident.1 = "19", ident.2 = NULL, only.pos = TRUE, assay = "RNA")
nrow(cl19.de.markers)
# Add new column of gene IDs called 'markers'
cl19.de.markers$markers <- rownames(cl19.de.markers)
head(cl19.de.markers, 10)
```

**Using the default cut-offs resulted in \~7 and 11k of markers.** Clearly these need to be significantly narrowed down to build a 140 gene panel.

### Cross-reference with ZFIN

This was achieved by mining [ZFIN gene expression data](session.qmd#Zebrafish%20Information%20Network%20(ZFIN)) for called markers whose expression were detected in the `epiphysis`. Of course, this is not fool-proof and heavily depends on the accuracy and completion of ZFIN's annotation. There may be many genes whose expression in the epiphysis were not annotated as such and therefore will be missed (more likely), and *vice versa* (exception rather than rule).

Follow the link above for the code to pull ZFIN data-of-interest into a dataframe `gex_ISH` used below :

```{r}
gex <- read.delim(url("https://zfin.org/downloads/wildtype-expression_fish.txt"), header = FALSE, sep ="\t")
head(gex, 5)

# Add column IDs (based on Column Headers in the Downloads page above)
colnames(gex) <- c("GeneID", "GeneSymbol","FishName","SuperStructureID","SuperStructureName",
                   "SubStructureID","SubStructureName","StartStage","EndStage","Assay",
                   "AssayMMOID","PublicationID","ProbeID","AntibodyID","FishID")
gex_ISH <- gex[which(gex$FishName=='WT' | gex$FishName=='AB/TU'), ]
gex_ISH <- gex_ISH[which(gex_ISH$Assay=='mRNA in situ hybridization'), ]
gex_ISH <- data.frame(gex_ISH$GeneSymbol, gex_ISH$SuperStructureName)
colnames(gex_ISH) <- c("GeneSymbol","Structure")
head(gex_ISH, 10)
```

```{r}
# Match every marker with every known WISH-detected Structure
cl2.de.markers.epiphysis <- left_join(cl2.de.markers, gex_ISH, by = c("markers" = "GeneSymbol"))
head(cl2.de.markers.epiphysis, 5)
# Filter for "epiphysis" only
cl2.de.markers.epiphysis <- distinct(filter(cl2.de.markers.epiphysis, Structure=="epiphysis"))
head(cl2.de.markers.epiphysis, 5)
nrow(cl2.de.markers.epiphysis)
```

```{r}
# Match every marker with every known WISH-detected Structure
cl19.de.markers.epiphysis <- left_join(cl19.de.markers, gex_ISH, by = c("markers" = "GeneSymbol"))
head(cl19.de.markers.epiphysis, 5)
# Filter for "epiphysis" only
cl19.de.markers.epiphysis <- distinct(filter(cl19.de.markers.epiphysis, Structure=="epiphysis"))
head(cl19.de.markers.epiphysis, 5)
nrow(cl19.de.markers.epiphysis)
```

This step identifies a significantly more manageable \~100 and 300 candidate genes per cluster for a MERFISH experiment.

-   [Link](https://github.com/vchongmorrison/zfBrainAsymmetry/blob/master/annotations/cl2_de_markers_epiphysis.txt) to Cluster `2` candidate gene list

-   [Link](https://github.com/vchongmorrison/zfBrainAsymmetry/blob/master/annotations/cl19_de_markers_epiphysis.txt) to Cluster `19` candidate gene list

At this point, the gene lists were manually shortlisted for inclusion into the final MERSCOPE 140 Gene Panel, with decreasing priority below.

1.  Genes from the literature/previous work

    -   Clanton *et al*. 2013

    -   Khuansuwan *et al*. 2016

    -   Schredelseker & Driever, 2018

2.  Genes related to GABA synthesis and signalling

    -   (one-liner explanation from S Wilson? TBC)

3.  Selected from Cluster `2` and `19` candidate gene lists, that generally have some previous links to neurogenesis

```{r}
# Save gene lists to file
write.table(data.frame(cl2.de.markers.epiphysis$markers), file="./annotations/cl2_de_markers_epiphysis.txt", row.names=FALSE, quote=FALSE)
write.table(data.frame(cl19.de.markers.epiphysis$markers), file="./annotations/cl19_de_markers_epiphysis.txt", row.names=FALSE, quote=FALSE)
```

### 140 Gene Panel for MERSCOPE - final

-   [Link](https://github.com/vchongmorrison/zfBrainAsymmetry/blob/master/annotations/codebook_0_AM0765_zebrafishChongMorrisonAsymmetry.csv) to panel codebook

```{r}
merscope <- read.csv('./annotations/codebook_0_AM0765_zebrafishChongMorrisonAsymmetry.csv', header=TRUE, row.names=1)
head(merscope, 10) # print first 10 rows only
```

#### **Composition of the final panel**

[UpSet](https://github.com/hms-dbmi/UpSetR) plots are an excellent alternative to Venn diagrams for visualising intersection between the three gene lists above.

```{r}
##### Explore intersection of markers between clusters #####
library(UpSetR)

cl2 <- read.table("./annotations/cl2_de_markers_epiphysis.txt", header=TRUE)
cl2$cluster <- "Cluster2"
colnames(cl2) <- c("markers","cluster")

cl19 <- read.table("./annotations/cl19_de_markers_epiphysis.txt", header=TRUE)
cl19$cluster <- "Cluster19"
colnames(cl19) <- c("markers","cluster")

merscope <- merscope[1:140,] # 140 gene targets, remove 40 Blanks
merscope$markers <- rownames(merscope)
merscope$cluster <- "merscope"
merscope <- data.frame(merscope$markers, merscope$cluster)
colnames(merscope) <- c("markers","cluster")

all.markers <- rbind(cl2, cl19, merscope)

# Format data to serve as input for UpSetR.
input <- all.markers %>% mutate(truval=TRUE) %>% spread(cluster, truval, fill=FALSE)
input <- input %>%
  mutate(across(2:4, ~ as.integer(as.character(factor(., levels = c("TRUE", "FALSE"), labels = c(1, 0))))))

# UpSetR plot - Conway et al. 2017
upset(input, empty.intersections = "on", order.by = "freq", mainbar.y.label = "Epiphysis marker intersections", sets.x.label = "Epiphysis markers per set")
```

Of the 140 genes in the MERSCOPE panel;

-   The large majority, 103, are specific to Cluster `19` candidate genes

-   9 are shared between Cluster `2` and `19`

-   4 are specific to Cluster `2` candidate genes

-   24 are from neither i.e. from the literature and GABA genes

#### **Expression pattern in `ss_e107`**

To explore the expression of these genes in the `ss_e107` scRNA-seq dataset, let's first check that all the panel genes are present in the `SeuratObject`. Otherwise, plotting will throw errors.

```{r}
# MERSCOPE panel genes
merscope <- read.csv("./annotations/codebook_0_AM0765_zebrafishChongMorrisonAsymmetry.csv", header=TRUE)
merscope <- merscope[1:140,]
# 3 genes filtered out in ss_e107 dataset, remove these otherwise plotting ss_e107 will throw error
genes <- data.frame(rownames(ss_e107))
colnames(genes) <- "gene"
merscope_check <- dplyr::left_join(genes, merscope, by = c("gene" = "name")) %>% filter(barcodeType=="merfish") # 137 genes
anti_join(merscope, merscope_check, by=join_by(name == gene)) # to get names of these genes (gfi1ab, opn1sw1, rho)
```

Plot a heatmap of the 140 (137) panel genes.

```{r}
dittoHeatmap(ss_e107, merscope_check$gene,
             annot.by = "SCT_snn_res.1",
             scaled.to.max = TRUE,
             show_colnames = FALSE,
             show_rownames = TRUE, complex=TRUE, fontsize_row = 3)
```

This heatmap illustrates the on-going challenge - that the epiphysis shares many of its expressed genes with other neuronal and/or cranial cell types. Despite 'marker identification' followed by filtering for those with pre-validated *in vivo* expression in the epiphysis, these genes as a whole ***do not specifically*** mark out the (putative) epiphysis clusters `2` and `19`. Therefore, from a bioinformatics perspective, using a ***combination of genes*** is vital to 'extract' these cells - as demonstrated in [Aim 1 Part 1: Identify epiphysis clusters](Aim1_part1.qmd#Identify%20epiphysis%20clusters).

### Additional insights

However, in the painstaking iterative process of going through the gene lists above and cross-checking with ZFIN, two groups of genes were noted to display specific expression in the epiphysis and retina. The ones highlighted in **bold** were called in Clusters `2` and `19` candidate gene lists.

-   Recoverins - `rcvrna`, `rcvrnb`, **`rcvrn2`**, `rcvrn3`

-   Phosphodiesterases - **`pde6gb`**,**`pde6c`**,**`pde6d`** ... (too many to list).

The [recoverins](https://zfin.org/ZDB-IMAGE-151008-27#image) and [*pde6gb*](https://zfin.org/ZDB-FIG-050630-4919#summary) in particular had striking epiphysis- plus/minus retina-specific expression patterns in the embryo. They reflect the photoreceptive characteristics of these organs. Let's look at these genes together with the three markers previously used to identify epiphysis clusters - *bsx*, *noto*, *otx5*. *Sox1a* is included as the parapineal marker.

```{r}
epiphysis_genes <- c("bsx", "noto", "otx5", "sox1a",
                     "rcvrna", "rcvrnb", "rcvrn2", "rcvrn3",
                     "pde6gb")

dittoDotPlot(ss_e107, epiphysis_genes, group.by="SCT_snn_res.1")
```

Cluster `19` demonstrated robust expression of several of these 'ZFIN-validated' genes. Remarkably, the remaining clusters, including Cluster `2`, showed co-expression of these genes as well to a certain extent...are these 'contaminating' retinal photoreceptor precursors? However, the parapineal marker *sox1a* is still only detected in Clusters `2` and `19`.

With these lessons in mind, we proceed with the MERSCOPE experiment to gather additional evidence and wrap-up Aim 1.

## Pre-processing of MERSCOPE data

[MERSCOPE Vizualizer](https://vizgen.com/vizualizer-software/) is a free software provided by Vizgen as an out-of-box solution to explore results from MERSCOPE runs. The following images are exported using the following settings: `Transcripts Z-plane = All`; `Z-plane = 2` ; `Images = DAPI` channel only. The MERFISH signal coverage clearly encompasses the epiphysis region, which is promising. However, these images also have the `cell` setting ON...and it is clear that the default cell segmentation algorithm in the run is incompatible with the samples.

::: {#fig-e1 layout-ncol="2"}
![Embryo 1 - anterior slice](./figures/embryo1_ant_all-genes_DAPI.png)

![Embryo 1 - posterior slice](./figures/embryo1_pos_all-genes_DAPI.png)

Embryo 1 with all detected transcripts and failed cell segmentation
:::

::: {#fig-e2 layout-ncol="2"}
![Embryo 2 - anterior slice](./figures/embryo2_ant_all-genes_DAPI.png)

![Embryo 2 - posterior slice](./figures/embryo2_pos_all-genes_DAPI.png)

Embryo 2 with all detected transcripts and failed cell segmentation
:::

### Cell segmentation

Through a lot of trial and error, I worked out that [Cellpose](https://github.com/MouseLand/cellpose)'s `cyto3` model released with v3 (Feb 2024) had the best performance in segmenting these images. In addition, Vizgen's [VPT](https://vizgen.com/vpt/) tool with the [Cellpose2 plugin](https://github.com/Vizgen/vpt-plugin-cellpose2) enables performing custom 2-task segmentation runs, where the results of two (up to six) segmentation settings can be harmonised for a consensus-like result (and perhaps improve sensitivity). The final pipeline is implemented as an `apptainer` container that runs VPT-Cellpose2 to perform 2-task segmentation using the `cyto3` model.

``` bash
# apptainer.def file
```

::: {#fig-reseg layout-ncol="2"}
![Embryo 1 - posterior slice](./figures/embryo1_pos_all-genes_DAPI_reseg.png)

![Embryo 2 - posterior slice](./figures/embryo2_pos_all-genes_DAPI_reseg.png)

Embryo 1 and 2 with all detected transcripts and successful re-segmentation
:::

## Clustering of MERSCOPE data

in progress

------------------------------------------------------------------------

## Summary notes for Aim 1 - Part 2

1.  in progress

2.  in progress

------------------------------------------------------------------------

## References

### Packages

```{r}
pkgs <- cite_packages(output = "table", out.dir = ".")
knitr::kable(pkgs)
```

### Previous work

-   I. Lekk, V. Duboc, A. Faro, S. Nicolaou, P. Blader and S.W. Wilson. *Sox1a mediates the ability of the parapineal to impart habenular left-right asymmetry*. eLife (2019), e47376, 8, <https://doi.org/10.7554/eLife.47376>
-   S. Khuansuwan, J. A. Clanton, B. J. Dean, J. G. Patton, J. T. Gamse; A transcription factor network controls cell migration and fate decisions in the developing zebrafish pineal complex. *Development* 15 July 2016; 143 (14): 2641--2650, <https://doi.org/10.1242/dev.131680>
-   J. A. Clanton, K. D. Hope, J. T. Gamse; Fgf signaling governs cell fate in the zebrafish pineal complex. *Development* 15 January 2013; 140 (2): 323--332, <https://doi.org/10.1242/dev.083709>
-   Theresa Schredelseker, Wolfgang Driever; Bsx controls pineal complex development. *Development* 1 July 2018; 145 (13): dev163477, <https://doi.org/10.1242/dev.163477>

## Session Info

```{r}
sessionInfo()
```
