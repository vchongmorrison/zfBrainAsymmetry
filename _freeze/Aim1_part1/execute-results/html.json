{
  "hash": "d71c7b5b8b2053e8541f304421c61976",
  "result": {
    "markdown": "---\ntitle: \"The parapineal 'cell type' - Part 1\"\n---\n\n\n## Identification of epiphysis cells\n\n### **Premise**\n\nUsing single cell RNA-seq (scRNA-seq), can pineal and parapineal cells be identified from a mixed population regardless of *sox1a* genotype?\n\n### Experimental design\n\nApproximately 230 heads from \\~30-32 hpf larvae were collected. Larvae were of mixed *sox1a* genotype (hets, homs and wild types) obtained by incrossing *sox1a* hets.\n\nHeads were dissociated into single cell suspension for FACS-based enrichment of GFP++/mCherry- cells. GFP labels the epiphysis and other 'contaminant' cell types, while mCherry labels 'contaminant' cell types only. The mCherry transgene was pre-determined in prior imaging experiments to not label the parapineal organ.\n\nApproximately 10k sorted events were recorded and collected for scRNA-seq using 10X Genomics 3' v3.1 GEX chemistry. The library was sequenced to at least 500 million reads, thus yielding a depth of \\~100k reads per cell.\n\n![Schematic of experiment design.](./figures/foxd3flh-facs.png){fig-align=\"center\"}\n\n### Initialise R environment\n\n[Session](session.qmd)\n\n\n\n\n\n### Pre-processing of reads\n\nTo empirically determine the robustness of called clusters downstream, reads were pre-processed using two different mapper/gene annotation combinations:\n\n-   10X Genomics CellRanger v7.1.0 + Lawson Lab annotation (Lawson *et al*., 2020)\n\n    -   This pipeline maps unique reads only:\n\n        ``` bash\n        # Preprocessing - Cell Ranger 7.1.0 (unique reads only)\n        cellranger count --id=foxd3flhGFP \\\n        --transcriptome=/home/ucbtvmr/Scratch/cellranger/mkref/GRCz11_lawson/GRCz11_v4.3.2_GFP_mCherry \\\n        --fastqs=/home/ucbtvmr/Scratch/4_scRNAseq/fastq \\\n        --sample=VCM2-AK30645-AK6234 \\\n        --no-bam\n        ```\n\n-   STARsolo v2.7.10b + Ensembl release 107 annotation\n\n    -   This pipeline includes multi-mapping reads assigned using EM algorithm:\n\n        ``` bash\n        # Preprocessing - STARsolo v2.7.10b (with EM multi-mapped reads)\n        STAR --genomeDir /home/ucbtvmr/ensembl_releases/ensembl107/Danio_rerio.genome.GFP.mCherry/star_2.7.9a \\\n        --readFilesIn /home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234*in progress**_S1_L002_R2_001.fastq.gz \\\n        /home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234_S1_L002_R1_001.fastq.gz \\\n        --readFilesCommand zcat \\\n        --soloFeatures GeneFull \\\n        --soloMultiMappers EM \\\n        --clipAdapterType CellRanger4 --outFilterScoreMin 30 \\\n        --soloCBwhitelist 3M-february-2018.txt \\\n        --soloType CB_UMI_Simple \\\n        --soloCBlen 16 \\\n        --soloUMIstart 17 \\\n        --soloUMIlen 12 \\\n        --soloBarcodeReadLength 0 \\\n        --soloCellFilter EmptyDrops_CR \\\n        --limitOutSJcollapsed 5000000 \\\n        --runThreadN 8\n\n        cd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107/Solo.out/GeneFull\n        mkdir raw_EM\n        cd raw_EM\n        # move multimapped-containing matrix to /raw_EM\n        mv ../raw/UniqueAndMult-EM.mtx .\n        cp ../raw/features.tsv .\n        cp ../raw/barcodes.tsv .\n        # rename multimapped-containing matrix to 'matrix.mtx' for --soloCellFiltering\n        mv UniqueAndMult-EM.mtx matrix.mtx\n\n        # Change working directory to the one containing Aligned.out.sam\n        cd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107\n        # Call cells\n        STAR --runMode soloCellFiltering ./Solo.out/GeneFull/raw_EM ./Solo.out/GeneFull/filtered_EM/filtered_EM --soloCellFilter EmptyDrops_CR\n        ```\n\n## scRNA-seq analysis in `Seurat`\n\n### Load cell x gene matrices\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath1 <- \"/home/chongmorrison/Dropbox/VCM-StarBook/ResearchProjects/parapineal/preprocessing/foxd3flhGFP/cellranger7.1.0_Lawson/filtered_feature_bc_matrix\"\npath2 <- \"/home/chongmorrison/Dropbox/VCM-StarBook/ResearchProjects/parapineal/preprocessing/foxd3flhGFP/starsolo2.7.10b_ens107/filtered_EM\"\n```\n:::\n\n\n**Create `Seurat` objects and check number of cells and genes :**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncr_law <- CreateSeuratObject(Read10X(path1), project=\"CellRanger-Lawson\")\nss_e107 <- CreateSeuratObject(ReadSTARsolo(path2), project=\"STARsolo-ens107\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 4770 cells x 36353 genes\nncol(cr_law)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4770\n```\n:::\n\n```{.r .cell-code}\nnrow(cr_law)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 36353\n```\n:::\n\n```{.r .cell-code}\n# 4536 cells x 32522 genes\nncol(ss_e107)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4536\n```\n:::\n\n```{.r .cell-code}\nnrow(ss_e107)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32522\n```\n:::\n:::\n\n\n### Filter genes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract counts\ncounts <- LayerData(cr_law, layer = \"counts\")\n# Output a logical matrix specifying for each gene on whether or not there are more than zero counts per cell\nnonzero <- counts > 0\n# Sums all TRUE values and returns TRUE if more than 5 TRUE values per gene\nkeep_genes <- Matrix::rowSums(nonzero) >= 5\n# Only keeping those genes expressed in more than 5 cells\nfiltered_counts <- counts[keep_genes, ]\n# Assign to Seurat object (make new SeuratObject)\ncr_law <- CreateSeuratObject(filtered_counts, meta.data = cr_law@meta.data)\n# 4770 cells x 24969 genes\nncol(cr_law)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4770\n```\n:::\n\n```{.r .cell-code}\nnrow(cr_law)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24969\n```\n:::\n\n```{.r .cell-code}\ncounts <- LayerData(ss_e107, layer = \"counts\")\nnonzero <- counts > 0\nkeep_genes <- Matrix::rowSums(nonzero) >= 5\nfiltered_counts <- counts[keep_genes, ]\nss_e107 <- CreateSeuratObject(filtered_counts, meta.data = ss_e107@meta.data)\n# 4536 cells x 23946 genes\nncol(ss_e107) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4536\n```\n:::\n\n```{.r .cell-code}\nnrow(ss_e107)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23946\n```\n:::\n:::\n\n\n### Compute additional metrics - percent.mito, ribo, complexity\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncr_law$percent.mt <- PercentageFeatureSet(cr_law, pattern = \"^mt-\")\ncr_law$log10GenesPerUMI <- log10(cr_law$nFeature_RNA) / log10(cr_law$nCount_RNA)\ncr_law$percent.ribo <- PercentageFeatureSet(cr_law, pattern =\"^rps\") + \n  PercentageFeatureSet(cr_law, pattern =\"^rpl\")\n\nss_e107$percent.mt <- PercentageFeatureSet(ss_e107, pattern = \"^mt-\")\nss_e107$log10GenesPerUMI <- log10(ss_e107$nFeature_RNA) / log10(ss_e107$nCount_RNA)\nss_e107$percent.ribo <- PercentageFeatureSet(ss_e107, pattern =\"^rps\") + \n  PercentageFeatureSet(ss_e107, pattern =\"^rpl\")\n```\n:::\n\n\n### Compute cell cycle scores\n\n#### Obtain cell cycle genes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncell_cycle_genes <- read.csv(text = RCurl::getURL(\"https://raw.githubusercontent.com/hbc/tinyatlas/master/cell_cycle/Danio_rerio.csv\"))\n# call in Ensembl annotations\nannotations <- read.csv('./annotations/ensembl_annotations.csv', header=TRUE, row.names=1)\n# make a dataframe of cell cycle markers\ncell_cycle_markers <- dplyr::left_join(cell_cycle_genes, annotations, by = c(\"geneID\" = \"gene_id\"))\n\ns_genes <- cell_cycle_markers %>%\n  dplyr::filter(phase == \"S\") %>%\n  pull(\"gene_name\")\n\ng2m_genes <- cell_cycle_markers %>%\n  dplyr::filter(phase == \"G2/M\") %>%\n  pull(\"gene_name\")\n\n# Remove non-zebrafish \"CENPF\" and \"CKS2\" from g2m_genes\ng2m_genes <- g2m_genes[!g2m_genes == c(\"CENPF\",\"CKS2\")]\n```\n:::\n\n\n#### Cell cycle scoring\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Normalise counts for cell cycle scoring\ncr_law <- NormalizeData(cr_law)\nss_e107 <- NormalizeData(ss_e107)\n\n# Cell cycle scoring\ncr_law <- CellCycleScoring(cr_law, g2m.features = g2m_genes, s.features = s_genes)\nss_e107 <- CellCycleScoring(ss_e107, g2m.features = g2m_genes, s.features = s_genes)\n\n# Add difference between G2M and S phase scores\ncr_law$CC.Difference <- cr_law$S.Score - cr_law$G2M.Score\nss_e107$CC.Difference <- ss_e107$S.Score - ss_e107$G2M.Score\n```\n:::\n\n\n### Cell filtering?\n\nIn a lot of cases, studies, example workflows etc. 'poor' quality cells are filtered out based on arbitrary metrics e.g. number of transcripts/genes suggestive of multiplets, high percentage mitochondrial transcripts suggestive of dying cells.\n\nI judge these to be sound reasoning points...if you truly know the cellular composition of the dataset. Unlike gene-level filtering where you only make an *a priori* definition of an 'expressed' gene i.e. in at least X number of cells, cell filtering based on biological conditions dictated by the metrics mentioned above is more nuanced and (I believe) could introduce unnecessary bias and/or risk losing 'good' cells.\n\nTherefore, for this novel dataset, I take a quasi-unbiased approach :\n\n-   Check that \\*most\\* cells are largely healthy i.e. percent.mt \\< 5\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    dittoPlot(cr_law, \"percent.mt\", group.by = \"Phase\",\n              vlnplot.lineweight = 0.2, jitter.size = 0.3,\n              main = \"PercentageFeatureSet(^mt-), cr_law\")\n    ```\n    \n    ::: {.cell-output-display}\n    ![](Aim1_part1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n    :::\n    :::\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    dittoPlot(ss_e107, \"percent.mt\", group.by = \"Phase\",\n              vlnplot.lineweight = 0.2, jitter.size = 0.3,\n              main = \"PercentageFeatureSet(^mt-), ss_e107\")\n    ```\n    \n    ::: {.cell-output-display}\n    ![](Aim1_part1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n    :::\n    :::\n\n\n-   Perform dimensional reduction i.e. clustering on all cells, then\n\n    -   Check that potential multiplets are not forming spurious clusters, and are distributed across all called clusters\n\n    -   Also check that other 'uninteresting' metrics are not forming spurious clusters\n\n## Dimensional reduction/clustering\n\n### SCTransform ('normalise, find variable genes, regress unwanted variation')\n\nI previously explored the data to check if there was significant variation between the cell types driven by ribosomal/mitochondrial content. **Supplementary Section 1 (in progress).**\n\nThere was clear variation being driven by cell cycle phase. This was expected given a neuronal-enriched population at this developmental stage.\n\nAltogether these inform the `SCTransform` parameters, where `CC.Difference` is used instead of `Phase` to maintain the separation between progenitors and non-cycling cells :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDefaultAssay(cr_law) <- \"RNA\"\ncr_law <- SCTransform(cr_law,\n                     vars.to.regress = c(\"percent.ribo\", \"percent.mt\", \"CC.Difference\"),\n                     vst.flavor=\"v2\")\n\nDefaultAssay(ss_e107) <- \"RNA\"\nss_e107 <- SCTransform(ss_e107,\n                       vars.to.regress = c(\"percent.ribo\", \"percent.mt\", \"CC.Difference\"),\n                       vst.flavor=\"v2\")\n```\n:::\n\n\n### 'Unsupervised' Clustering\n\nAs clustering is more an art than exact science, I empirically determined the main parameters - `algorithm`, `npcs`, `k.param`, and `resolution` - and compared the result between the two pre-processing workflows/`Seurat` objects.\n\n\n**'Picking' the number of Principal Component dimensions `npcs` :**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDefaultAssay(cr_law) <- \"SCT\"\ncr_law <- RunPCA(cr_law, npcs = 60)\nElbowPlot(cr_law, ndims=60, reduction=\"pca\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nDefaultAssay(ss_e107) <- \"SCT\"\nss_e107 <- RunPCA(ss_e107, npcs = 60)\nElbowPlot(ss_e107, ndims=60, reduction=\"pca\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n\nBased on the elbow plots above I went with `npcs = 40`. `k.param` is kept at the default `20`, and the Leiden `algorithm = 4` is selected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncr_law <- RunPCA(cr_law, npcs = 40) %>%\n  FindNeighbors(dims = 1:40) %>%\n  FindClusters(algorithm = 4, resolution = c(1.0), method=\"igraph\") %>%\n  RunUMAP(dims = 1:40, n.neighbors = 20) # to match default k.param=20\n\nss_e107 <- RunPCA(ss_e107, npcs = 40) %>%\n  FindNeighbors(dims = 1:40) %>%\n  FindClusters(algorithm = 4, resolution = c(1.0), method=\"igraph\") %>%\n  RunUMAP(dims = 1:40, n.neighbors = 20) # to match default k.param=20\n```\n:::\n\n\n\n**Save `Seurat` objects to load later without re-running all the above :**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set DefaultAssay and save objects for visualisation\nDefaultAssay(cr_law) <- \"RNA\"\ncr_law <- NormalizeData(cr_law)\nDefaultAssay(ss_e107) <- \"RNA\"\nss_e107 <- NormalizeData(ss_e107)\n\nsave(cr_law, file=\"../foxd3flh-5k_cr-law.RData\")\nsave(ss_e107, file=\"../foxd3flh-5k_ss-e107.RData\")\n```\n:::\n\n\n## Visualise and explore clustering results with `dittoSeq`\n\n### UMAP reduction\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reset DefaultAssay and Normalise counts for visualisation\nDefaultAssay(cr_law) <- \"RNA\"\ncr_law <- NormalizeData(cr_law)\nDefaultAssay(ss_e107) <- \"RNA\"\nss_e107 <- NormalizeData(ss_e107)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoDimPlot(cr_law, \"SCT_snn_res.1\", reduction.use=\"umap\",\n             main=\"CellRanger7.1.0\",\n             sub=\"Lawson2020\",\n             legend.title=\"clusters\",\n             do.label=TRUE)\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoDimPlot(ss_e107, \"SCT_snn_res.1\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b\",\n             sub=\"ensembl107\",\n             legend.title=\"clusters\",\n             do.label=TRUE)\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Identify epiphysis clusters\n\nThe epiphysis shares several of its known i.e. well-characterised markers with other neuronal/cranial cell types. For example, *bsx* is also expressed in the hypothalamus, *noto* is also expressed in the telencephalon, *otx5* is also expressed in the retina. Inferring the epiphysis clusters from any of these genes alone is futile:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Genes that are well known to be expressed in the epiphysis\nmarkers <- c(\"bsx\", \"noto\", \"otx5\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoPlotVarsAcrossGroups(cr_law, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"cr_law (bsx/noto/otx5)\", summary.fxn = max, adjustment = NULL)\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoPlotVarsAcrossGroups(ss_e107, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"ss_e107 (bsx/noto/otx5)\", summary.fxn = max, adjustment = NULL)\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nI reasoned that, by using instead the **mean** expression values of these three genes combined, one could eliminate clusters that are least likely to be epiphysis cells.\n\nFor example, an epiphysis cell is likely to co-express bsx (1) + noto (1) + otx5 (1) = 3. Mean expression value = 3 / 3 = 1.\n\nOn the other hand, a retina cell would not express bsx ( \\< 1) + noto (\\< 1), but express + otx5 (1) = \\< 3. Mean expression value = \\<3 / 3 = \\< 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoPlotVarsAcrossGroups(cr_law, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"cr_law (mean of bsx + noto + otx5)\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoPlotVarsAcrossGroups(ss_e107, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"ss_e107 (mean of bsx + noto + otx5)\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n**This worked quite well, and one can appreciate two clusters-of-interest likely to be epiphysis cells.** Furthermore, this observation is robust and reproducible from cell x gene matrices generated using the two dissimilar pre-processing pipelines.\n\n-   `cr_law` clusters-of-interest = 2 and 18\n\n-   `ss_e107` clusters-of-interest = 2 and 19\n\nLet's now look at `sox1a` that is expressed in the parapineal as it emerges from the anterior pineal region (Lekk *et al*. 2019). The following plots show that `sox1a` expression can be detected in the clusters-of-interest.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmulti_dittoDimPlot(cr_law, c(markers,\"sox1a\"), order=\"increasing\", reduction.use=\"umap\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmulti_dittoDimPlot(ss_e107, c(markers,\"sox1a\"), order=\"increasing\", reduction.use=\"umap\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nAs both matrices consistently produced similar results so far, I am proceeding further with `ss_e107` only.\n\nHow many cells (roughly) are present in the clusters-of-interest? \\~250 cells in total.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoBarPlot(ss_e107, \"SCT_snn_res.1\", group.by = \"SCT_snn_res.1\",\n             scale = \"count\",\n             cells.use = meta(\"SCT_snn_res.1\", ss_e107) == c(\"2\", \"19\"),\n             main=\"No. of cells\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## Sanity checks on clustering\n\nRemember that I did not perform [Cell filtering?] To evaluate if the clustering afterwards was largely driven by 'true' biological heterogeneity, in a qualitative sense:\n\n### Check distribution of multiplets\n\nI run `scDblFinder` to identify multiplets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce <- SingleCellExperiment(\n  assays = list(counts = as.matrix(LayerData(ss_e107, assay = \"RNA\", layer=\"counts\"))))\n\nlibrary(scDblFinder)\nsce <- scDblFinder(sce, clusters=c(Idents(ss_e107)),\n                   BPPARAM=MulticoreParam(2, RNGseed=1234))\n\ntable(sce$scDblFinder.class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nsinglet doublet \n   4167     369 \n```\n:::\n:::\n\n\nNow port the results back to the original `ss_e107` object for visualisation. Called doublets are distributed randomly across entire dataset, which is ideal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nss_e107$scDblFinder.class <- sce$scDblFinder.class\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoDimPlot(ss_e107, \"scDblFinder.class\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"class\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n### What about other metrics?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoDimPlot(ss_e107, \"nCount_RNA\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"nUMI\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoDimPlot(ss_e107, \"nFeature_RNA\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"nGenes\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoDimPlot(ss_e107, \"percent.ribo\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"% ribosomal transcripts\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoDimPlot(ss_e107, \"percent.mt\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"% mitochondrial transcripts\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoDimPlot(ss_e107, \"Phase\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"cell cycle\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part1_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nThe plots above suggests that the clusters-of-interest 2 and 19 vary from each other by cell cycle phase, and perhaps by subtle differences in the other metrics. This is something to bear in mind when interpreting results based on this clustering.\n\n------------------------------------------------------------------------\n\n## Summary notes for Aim 1 - Part 1\n\n1.  Putative epiphysis cell clusters can be identified by scRNA-seq regardless of *sox1a* genotype.\n\n2.  *Sox1a*-positive putative parapineal cells can be detected within these clusters.\n\n3.  Next step: *In vivo* validation of these putative clusters using imaging-based spatial transcriptomics (Vizgen MERSCOPE)\n\n------------------------------------------------------------------------\n\n## References\n\n### Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npkgs <- cite_packages(output = \"table\", out.dir = \".\")\nknitr::kable(pkgs)\n```\n\n::: {.cell-output-display}\n|Package              |Version   |Citation     |\n|:--------------------|:---------|:------------|\n|base                 |4.4.2     |@base        |\n|BiocParallel         |1.38.0    |@BiocPar.... |\n|dittoSeq             |1.16.0    |@dittoSeq    |\n|future               |1.34.0    |@RJ-2021-048 |\n|knitr                |1.49      |@knitr20.... |\n|Matrix               |1.7.0     |@Matrix      |\n|RCurl                |1.98.1.16 |@RCurl       |\n|reticulate           |1.40.0    |@reticulate  |\n|rmarkdown            |2.29      |@rmarkdo.... |\n|scDblFinder          |1.18.0    |@scDblFinder |\n|Seurat               |5.1.0     |@Seurat2.... |\n|SingleCellExperiment |1.26.0    |@SingleC.... |\n|tidyverse            |2.0.0     |@tidyverse   |\n|UpSetR               |1.4.0     |@UpSetR      |\n:::\n:::\n\n\n### Previous work\n\n-   Mary Piper, Meeta Mistry, Jihe Liu, William Gammerdinger, & Radhika Khetani. (2022, January 6). hbctraining/scRNA-seq_online: scRNA-seq Lessons from HCBC (first release). Zenodo. <https://doi.org/10.5281/zenodo.5826256>.\n-   I. Lekk, V. Duboc, A. Faro, S. Nicolaou, P. Blader and S.W. Wilson. *Sox1a mediates the ability of the parapineal to impart habenular left-right asymmetry*. eLife (2019), e47376, 8, <https://doi.org/10.7554/eLife.47376>\n-   [Lawson Lab zebrafish transcriptome annotation](https://www.umassmed.edu/lawson-lab/reagents/zebrafish-transcriptome/)\n\n## Session Info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.2 (2024-10-31)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] scDblFinder_1.18.0          grateful_0.2.10            \n [3] SingleCellExperiment_1.26.0 SummarizedExperiment_1.34.0\n [5] Biobase_2.64.0              GenomicRanges_1.56.2       \n [7] GenomeInfoDb_1.40.1         IRanges_2.38.1             \n [9] S4Vectors_0.42.1            BiocGenerics_0.50.0        \n[11] MatrixGenerics_1.16.0       matrixStats_1.4.1          \n[13] dittoSeq_1.16.0             lubridate_1.9.3            \n[15] forcats_1.0.0               stringr_1.5.1              \n[17] dplyr_1.1.4                 purrr_1.0.2                \n[19] readr_2.1.5                 tidyr_1.3.1                \n[21] tibble_3.2.1                ggplot2_3.5.1              \n[23] tidyverse_2.0.0             Seurat_5.1.0               \n[25] SeuratObject_5.0.2          sp_2.1-4                   \n[27] reticulate_1.40.0           BiocParallel_1.38.0        \n[29] future_1.34.0              \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22          splines_4.4.2            \n  [3] later_1.3.2               BiocIO_1.14.0            \n  [5] bitops_1.0-9              polyclip_1.10-7          \n  [7] XML_3.99-0.17             fastDummies_1.7.4        \n  [9] lifecycle_1.0.4           edgeR_4.2.2              \n [11] globals_0.16.3            lattice_0.22-6           \n [13] MASS_7.3-61               magrittr_2.0.3           \n [15] limma_3.60.6              plotly_4.10.4            \n [17] rmarkdown_2.29            yaml_2.3.10              \n [19] metapod_1.12.0            httpuv_1.6.15            \n [21] glmGamPoi_1.16.0          sctransform_0.4.1        \n [23] spam_2.11-0               spatstat.sparse_3.1-0    \n [25] cowplot_1.1.3             pbapply_1.7-2            \n [27] RColorBrewer_1.1-3        abind_1.4-8              \n [29] zlibbioc_1.50.0           Rtsne_0.17               \n [31] RCurl_1.98-1.16           rappdirs_0.3.3           \n [33] GenomeInfoDbData_1.2.12   ggrepel_0.9.6            \n [35] irlba_2.3.5.1             listenv_0.9.1            \n [37] spatstat.utils_3.1-1      pheatmap_1.0.12          \n [39] goftest_1.2-3             RSpectra_0.16-2          \n [41] dqrng_0.4.1               spatstat.random_3.3-2    \n [43] fitdistrplus_1.2-1        parallelly_1.39.0        \n [45] DelayedMatrixStats_1.26.0 leiden_0.4.3.1           \n [47] codetools_0.2-20          DelayedArray_0.30.1      \n [49] scuttle_1.14.0            tidyselect_1.2.1         \n [51] UCSC.utils_1.0.0          farver_2.1.2             \n [53] viridis_0.6.5             ScaledMatrix_1.12.0      \n [55] spatstat.explore_3.3-3    GenomicAlignments_1.40.0 \n [57] jsonlite_1.8.9            BiocNeighbors_1.22.0     \n [59] progressr_0.15.0          scater_1.32.1            \n [61] ggridges_0.5.6            survival_3.7-0           \n [63] tools_4.4.2               ica_1.0-3                \n [65] Rcpp_1.0.13-1             glue_1.8.0               \n [67] gridExtra_2.3             SparseArray_1.4.8        \n [69] xfun_0.49                 withr_3.0.2              \n [71] fastmap_1.2.0             bluster_1.14.0           \n [73] fansi_1.0.6               rsvd_1.0.5               \n [75] digest_0.6.37             timechange_0.3.0         \n [77] R6_2.5.1                  mime_0.12                \n [79] colorspace_2.1-1          scattermore_1.2          \n [81] tensor_1.5                spatstat.data_3.1-2      \n [83] utf8_1.2.4                generics_0.1.3           \n [85] renv_1.0.11               data.table_1.16.2        \n [87] rtracklayer_1.64.0        httr_1.4.7               \n [89] htmlwidgets_1.6.4         S4Arrays_1.4.1           \n [91] uwot_0.2.2                pkgconfig_2.0.3          \n [93] gtable_0.3.6              lmtest_0.9-40            \n [95] XVector_0.44.0            htmltools_0.5.8.1        \n [97] dotCall64_1.2             scales_1.3.0             \n [99] png_0.1-8                 spatstat.univar_3.1-1    \n[101] scran_1.32.0              knitr_1.49               \n[103] rstudioapi_0.17.1         rjson_0.2.23             \n[105] tzdb_0.4.0                reshape2_1.4.4           \n[107] curl_6.0.1                nlme_3.1-165             \n[109] zoo_1.8-12                KernSmooth_2.23-24       \n[111] vipor_0.4.7               parallel_4.4.2           \n[113] miniUI_0.1.1.1            restfulr_0.0.15          \n[115] pillar_1.9.0              grid_4.4.2               \n[117] vctrs_0.6.5               RANN_2.6.2               \n[119] promises_1.3.0            BiocSingular_1.20.0      \n[121] beachmat_2.20.0           xtable_1.8-4             \n[123] cluster_2.1.6             beeswarm_0.4.0           \n[125] evaluate_1.0.1            locfit_1.5-9.10          \n[127] Rsamtools_2.20.0          cli_3.6.3                \n[129] compiler_4.4.2            rlang_1.1.4              \n[131] crayon_1.5.3              future.apply_1.11.3      \n[133] labeling_0.4.3            ggbeeswarm_0.7.2         \n[135] plyr_1.8.9                stringi_1.8.4            \n[137] viridisLite_0.4.2         deldir_2.0-4             \n[139] Biostrings_2.72.1         munsell_0.5.1            \n[141] lazyeval_0.2.2            spatstat.geom_3.3-3      \n[143] Matrix_1.7-0              RcppHNSW_0.6.0           \n[145] hms_1.1.3                 patchwork_1.3.0          \n[147] sparseMatrixStats_1.16.0  statmod_1.5.0            \n[149] shiny_1.9.1               ROCR_1.0-11              \n[151] igraph_2.1.1              xgboost_1.7.8.1          \n```\n:::\n:::\n",
    "supporting": [
      "Aim1_part1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}