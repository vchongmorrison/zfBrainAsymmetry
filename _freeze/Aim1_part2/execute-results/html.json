{
  "hash": "a9b4e0094bac62e855dafb2c69bc86a7",
  "result": {
    "markdown": "---\ntitle: \"The parapineal 'cell type' - Part 2\"\n---\n\n\n## Identification of epiphysis cells\n\n### **Premise**\n\nIn the previous [section](Aim1_part1.qmd), two putative epiphysis cell clusters were identified in a \\~30-32 hpf scRNA-seq dataset. Can this result be replicated in the embryo? In other words, how likely are the inferred clusters to be from the epiphysis?\n\n### Experimental design\n\nMERFISH (**M**ultiplexed **E**rror-**R**obust **F**luorescence **i**n **s**itu **H**ybridisation) is an imaging-based approach capable of measuring RNA transcripts at single cell resolution. Unlike the destructive nature of scRNA-seq, *in vivo* spatial information (where each measured transcript is located in the sample) is preserved. [Vizgen MERSCOPE](https://vizgen.com/technology/) offers a commercial platform to perform MERFISH and was employed for this study.\n\n![Schematic of experiment design. A detailed sample preparation protocol can be found on <https://vchongmorrison.github.io/protocols/>](./figures/merscope-experiment.png){fig-align=\"center\"}\n\nAs illustrated above, only x2 10 micron tissue sections were collected for MERFISH. This was restricted by the maximum imaging area on the MERSCOPE slide. Therefore \\>1 embryos were simultaneously mounted in a tissue block, with the caveat that there will be unavoidable inter-embryo variation of the resulting tissue slices. Depending on how the embryo was mounted, the first (and second) section could be from the parapineal/pineal region (*sox1a* / *bsx* ++), or 1 or 2 planes later towards the pineal region only (*bsx* +).\n\nThe final dataset consists of x2 sections each of x2 biological replicates/embryos (wild type). For sake of brevity, each section is hereafter named 'anterior' or 'posterior' depending on their relative location within the embryo they originated from.\n\n### Initialise R environment\n\n[Session](session.qmd)\n\n\n\n\n\n## MERSCOPE panel design\n\nVizgen offers the option to build custom gene panels of up to 140, 300, 500 or 1000 genes at increasingly extortionate prices. Since the aim of the MERFISH experiment was to query the two putative scRNA-seq epiphysis clusters `2` and `19` from the previously analysed `ss_e107` `SeuratObject`, a 140 gene panel was designed based on this result.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"../foxd3flh-5k_ss-e107.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Genes that are well known to be expressed in the epiphysis\nmarkers <- c(\"bsx\", \"noto\", \"otx5\")\ndittoPlotVarsAcrossGroups(ss_e107, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"ss_e107 (mean of bsx + noto + otx5)\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n### Call markers\n\nThere is an overwhelming number of methods in the scientific literature for scRNA-seq marker identification. Depending on your goal(s) for performing marker identification, some approaches might be better suited than others.\n\nIn this case, the main goal is to shortlist genes that could be MERFISH-measured in the embryo, including (hopefully) the epiphysis region. As a first pass, we run `FindMarkers` (implemented in `Seurat`) on clusters 2 and 19.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncl2.de.markers <- FindMarkers(ss_e107, ident.1 = \"2\", ident.2 = NULL, only.pos = TRUE, assay = \"RNA\")\nnrow(cl2.de.markers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6936\n```\n:::\n\n```{.r .cell-code}\n# Add new column of gene IDs called 'markers'\ncl2.de.markers$markers <- rownames(cl2.de.markers)\nhead(cl2.de.markers, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 p_val avg_log2FC pct.1 pct.2 p_val_adj          markers\notx1                 0   2.755492 0.938 0.100         0             otx1\notx2b                0   3.250256 0.810 0.044         0            otx2b\nbarhl2               0   3.424283 0.812 0.074         0           barhl2\nsi:ch211-69b22.5     0   2.500534 0.808 0.070         0 si:ch211-69b22.5\notx2a                0   2.263520 0.821 0.097         0            otx2a\nwnt4                 0   2.333122 0.783 0.076         0             wnt4\nfabp11a              0   4.230501 0.968 0.270         0          fabp11a\nzic4                 0   2.272131 0.778 0.096         0             zic4\nsall3b               0   2.044002 0.670 0.055         0           sall3b\ntpbga                0   3.059875 0.655 0.045         0            tpbga\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncl19.de.markers <- FindMarkers(ss_e107, ident.1 = \"19\", ident.2 = NULL, only.pos = TRUE, assay = \"RNA\")\nnrow(cl19.de.markers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11487\n```\n:::\n\n```{.r .cell-code}\n# Add new column of gene IDs called 'markers'\ncl19.de.markers$markers <- rownames(cl19.de.markers)\nhead(cl19.de.markers, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                          p_val avg_log2FC pct.1 pct.2     p_val_adj\nbsx                0.000000e+00   5.801700 0.910 0.030  0.000000e+00\nisl1               0.000000e+00   5.476998 0.888 0.031  0.000000e+00\nsix3a              0.000000e+00   6.449455 0.708 0.014  0.000000e+00\nlayna              0.000000e+00   6.930195 0.663 0.011  0.000000e+00\nsi:ch211-67e16.11  0.000000e+00   5.451577 0.663 0.014  0.000000e+00\nzgc:165481        8.312723e-294   6.072816 0.629 0.013 1.990565e-289\nLHX3              2.098162e-279   8.568871 0.326 0.001 5.024258e-275\nbtbd3b            6.471199e-274   4.982485 0.573 0.011 1.549593e-269\nnxph1             3.397695e-248   6.210768 0.742 0.027 8.136121e-244\nskor1b            1.170595e-245   6.371964 0.618 0.017 2.803108e-241\n                            markers\nbsx                             bsx\nisl1                           isl1\nsix3a                         six3a\nlayna                         layna\nsi:ch211-67e16.11 si:ch211-67e16.11\nzgc:165481               zgc:165481\nLHX3                           LHX3\nbtbd3b                       btbd3b\nnxph1                         nxph1\nskor1b                       skor1b\n```\n:::\n:::\n\n\n**Using the default cut-offs resulted in \\~7 and 11k of markers.** Clearly these need to be significantly narrowed down to build a 140 gene panel.\n\n### Cross-reference with ZFIN\n\nThis was achieved by mining [ZFIN gene expression data](session.qmd#Zebrafish%20Information%20Network%20(ZFIN)) for called markers whose expression were detected in the `epiphysis`. Of course, this is not fool-proof and heavily depends on the accuracy and completion of ZFIN's annotation. There may be many genes whose expression in the epiphysis were not annotated as such and therefore will be missed (more likely), and *vice versa* (exception rather than rule).\n\nFollow the link above for the code to pull ZFIN data-of-interest into a dataframe `gex_ISH` used below :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Match every marker with every known WISH-detected Structure\ncl2.de.markers.epiphysis <- left_join(cl2.de.markers, gex_ISH, by = c(\"markers\" = \"GeneSymbol\"))\nhead(cl2.de.markers.epiphysis, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  p_val avg_log2FC pct.1 pct.2 p_val_adj markers                   Structure\n1     0   2.755492 0.938   0.1         0    otx1  alar plate midbrain region\n2     0   2.755492 0.938   0.1         0    otx1    anterior axial hypoblast\n3     0   2.755492 0.938   0.1         0    otx1                        axis\n4     0   2.755492 0.938   0.1         0    otx1 basal plate midbrain region\n5     0   2.755492 0.938   0.1         0    otx1                diencephalon\n```\n:::\n\n```{.r .cell-code}\n# Filter for \"epiphysis\" only\ncl2.de.markers.epiphysis <- distinct(filter(cl2.de.markers.epiphysis, Structure==\"epiphysis\"))\nhead(cl2.de.markers.epiphysis, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          p_val avg_log2FC pct.1 pct.2     p_val_adj markers Structure\n1  0.000000e+00   2.755492 0.938 0.100  0.000000e+00    otx1 epiphysis\n2  0.000000e+00   3.250256 0.810 0.044  0.000000e+00   otx2b epiphysis\n3  0.000000e+00   2.263520 0.821 0.097  0.000000e+00   otx2a epiphysis\n4  0.000000e+00   2.333122 0.783 0.076  0.000000e+00    wnt4 epiphysis\n5 4.197046e-284   2.721522 0.959 0.210 1.005025e-279  cldn5a epiphysis\n```\n:::\n\n```{.r .cell-code}\nnrow(cl2.de.markers.epiphysis)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 135\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Match every marker with every known WISH-detected Structure\ncl19.de.markers.epiphysis <- left_join(cl19.de.markers, gex_ISH, by = c(\"markers\" = \"GeneSymbol\"))\nhead(cl19.de.markers.epiphysis, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  p_val avg_log2FC pct.1 pct.2 p_val_adj markers         Structure\n1     0     5.8017  0.91  0.03         0     bsx             brain\n2     0     5.8017  0.91  0.03         0     bsx             brain\n3     0     5.8017  0.91  0.03         0     bsx             brain\n4     0     5.8017  0.91  0.03         0     bsx caudal tuberculum\n5     0     5.8017  0.91  0.03         0     bsx caudal tuberculum\n```\n:::\n\n```{.r .cell-code}\n# Filter for \"epiphysis\" only\ncl19.de.markers.epiphysis <- distinct(filter(cl19.de.markers.epiphysis, Structure==\"epiphysis\"))\nhead(cl19.de.markers.epiphysis, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          p_val avg_log2FC pct.1 pct.2     p_val_adj markers Structure\n1  0.000000e+00   5.801700 0.910 0.030  0.000000e+00     bsx epiphysis\n2 3.397695e-248   6.210768 0.742 0.027 8.136121e-244   nxph1 epiphysis\n3 2.688572e-217   6.833524 0.337 0.003 6.438054e-213  rcvrn2 epiphysis\n4 9.997499e-179   3.981461 0.865 0.062 2.394001e-174  esrrga epiphysis\n5 4.366307e-176   5.705932 0.404 0.007 1.045556e-171  sall3a epiphysis\n```\n:::\n\n```{.r .cell-code}\nnrow(cl19.de.markers.epiphysis)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 302\n```\n:::\n:::\n\n\nThis step identifies a significantly more manageable \\~100 and 300 candidate genes per cluster for a MERFISH experiment.\n\n-   [Link](https://github.com/vchongmorrison/zfBrainAsymmetry/blob/master/annotations/cl2_de_markers_epiphysis.txt) to Cluster 2 candidate genes\n\n-   [Link](https://github.com/vchongmorrison/zfBrainAsymmetry/blob/master/annotations/cl19_de_markers_epiphysis.txt) to Cluster 19 candidate genes\n\nAt this point the gene lists were manually shortlisted for inclusion into the final MERSCOPE 140 Gene Panel.\n\n-   Known genes in literature/previous work\n\n-   GABA\n\n-   'Novel' pickings from cluster 2 and 19 gene lists\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save gene lists to file\nwrite.table(data.frame(cl2.de.markers.epiphysis$markers), file=\"./annotations/cl2_de_markers_epiphysis.txt\", row.names=FALSE, quote=FALSE)\nwrite.table(data.frame(cl19.de.markers.epiphysis$markers), file=\"./annotations/cl19_de_markers_epiphysis.txt\", row.names=FALSE, quote=FALSE)\n```\n:::\n\n\n### 140 Gene Panel for MERSCOPE (final)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerscope <- read.csv('./annotations/codebook_0_AM0765_zebrafishChongMorrisonAsymmetry.csv', header=TRUE, row.names=1)\nhead(merscope, 10) # print first 10 rows only\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        id barcodeType V0001T8B1 V0002T8B1 V0003T8B1 V0004T8B1\naanat2  ENSDART00000018205     merfish         0         0         1         0\nalcama  ENSDART00000129400     merfish         0         0         0         0\naldocb  ENSDART00000026766     merfish         0         1         0         1\narr3a   ENSDART00000078996     merfish         0         0         0         1\narr3b   ENSDART00000158077     merfish         0         0         0         0\nascl1a  ENSDART00000056005     merfish         0         0         0         0\nasip2b  ENSDART00000185699     merfish         0         0         0         0\natp1a3a ENSDART00000104950     merfish         0         0         0         1\natp1b1b ENSDART00000139387     merfish         0         0         0         0\natp1b2a ENSDART00000160044     merfish         0         1         0         0\n        V0005T8B1 V0006T8B1 V0007T8B1 V0008T8B1 V0009T8B1 V0010T8B1 V0011T8B1\naanat2          0         0         0         0         0         0         1\nalcama          0         0         0         0         0         0         0\naldocb          0         0         0         0         1         0         0\narr3a           0         0         0         1         0         0         0\narr3b           1         1         1         0         1         0         0\nascl1a          0         0         1         0         1         0         0\nasip2b          1         0         1         0         0         0         0\natp1a3a         0         0         0         0         0         1         1\natp1b1b         0         0         0         1         0         1         0\natp1b2a         0         0         0         0         0         0         0\n        V0012T8B1 V0013T8B1 V0014T8B1 V0015T8B1 V0016T8B1 V0017T8B1 V0018T8B1\naanat2          0         0         0         1         1         0         0\nalcama          0         1         1         1         0         1         0\naldocb          0         0         0         1         0         0         0\narr3a           0         0         1         0         0         1         0\narr3b           0         0         0         0         0         0         0\nascl1a          0         0         0         1         0         1         0\nasip2b          0         1         0         1         0         0         0\natp1a3a         0         0         0         0         1         0         0\natp1b1b         0         1         0         0         0         1         0\natp1b2a         0         1         0         1         0         0         1\n```\n:::\n:::\n\n\n-   [Link](https://github.com/vchongmorrison/zfBrainAsymmetry/blob/master/annotations/codebook_0_AM0765_zebrafishChongMorrisonAsymmetry.csv) to panel codebook\n\n#### **Composition of the final panel :**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##### Explore intersection of markers between clusters #####\nlibrary(UpSetR)\n\ncl2 <- read.table(\"./annotations/cl2_de_markers_epiphysis.txt\", header=TRUE)\ncl2$cluster <- \"Cluster2\"\ncolnames(cl2) <- c(\"markers\",\"cluster\")\n\ncl19 <- read.table(\"./annotations/cl19_de_markers_epiphysis.txt\", header=TRUE)\ncl19$cluster <- \"Cluster19\"\ncolnames(cl19) <- c(\"markers\",\"cluster\")\n\nmerscope$markers <- rownames(merscope)\nmerscope$cluster <- \"merscope\"\nmerscope <- data.frame(merscope$markers, merscope$cluster)\ncolnames(merscope) <- c(\"markers\",\"cluster\")\n\nall.markers <- rbind(cl2, cl19, merscope)\n\n# Format data to serve as input for UpSetR.\ninput <- all.markers %>% mutate(truval=TRUE) %>% spread(cluster, truval, fill=FALSE)\ninput <- input %>%\n  mutate(across(2:4, ~ as.integer(as.character(factor(., levels = c(\"TRUE\", \"FALSE\"), labels = c(1, 0))))))\n\n# UpSetR plot - Conway et al. 2017\nupset(input, empty.intersections = \"on\", order.by = \"freq\", mainbar.y.label = \"Epiphysis marker intersections\", sets.x.label = \"Epiphysis markers per set\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Pre-processing of MERSCOPE data\n\nMERSCOPE Visualizer is a free software provided by Vizgen as an out-of-box solution to explore results.\n\n### Cell segmentation\n\nin progress\n\n## Clustering of MERSCOPE data\n\nin progress\n\n------------------------------------------------------------------------\n\n## Summary notes for Aim 1 - Part 2\n\n1.  in progress\n\n2.  in progress\n\n------------------------------------------------------------------------\n\n## References\n\n### Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npkgs <- cite_packages(output = \"table\", out.dir = \".\")\nknitr::kable(pkgs)\n```\n\n::: {.cell-output-display}\n|Package              |Version   |Citation     |\n|:--------------------|:---------|:------------|\n|base                 |4.4.2     |@base        |\n|BiocParallel         |1.38.0    |@BiocPar.... |\n|dittoSeq             |1.16.0    |@dittoSeq    |\n|future               |1.34.0    |@RJ-2021-048 |\n|knitr                |1.49      |@knitr20.... |\n|Matrix               |1.7.0     |@Matrix      |\n|RCurl                |1.98.1.16 |@RCurl       |\n|reticulate           |1.40.0    |@reticulate  |\n|rmarkdown            |2.29      |@rmarkdo.... |\n|scDblFinder          |1.18.0    |@scDblFinder |\n|Seurat               |5.1.0     |@Seurat2.... |\n|SingleCellExperiment |1.26.0    |@SingleC.... |\n|tidyverse            |2.0.0     |@tidyverse   |\n|UpSetR               |1.4.0     |@UpSetR      |\n:::\n:::\n\n\n### Previous work\n\n-   I. Lekk, V. Duboc, A. Faro, S. Nicolaou, P. Blader and S.W. Wilson. *Sox1a mediates the ability of the parapineal to impart habenular left-right asymmetry*. eLife (2019), e47376, 8, <https://doi.org/10.7554/eLife.47376>\n\n## Session Info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.2 (2024-10-31)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] UpSetR_1.4.0                grateful_0.2.10            \n [3] SingleCellExperiment_1.26.0 SummarizedExperiment_1.34.0\n [5] Biobase_2.64.0              GenomicRanges_1.56.2       \n [7] GenomeInfoDb_1.40.1         IRanges_2.38.1             \n [9] S4Vectors_0.42.1            BiocGenerics_0.50.0        \n[11] MatrixGenerics_1.16.0       matrixStats_1.4.1          \n[13] dittoSeq_1.16.0             lubridate_1.9.3            \n[15] forcats_1.0.0               stringr_1.5.1              \n[17] dplyr_1.1.4                 purrr_1.0.2                \n[19] readr_2.1.5                 tidyr_1.3.1                \n[21] tibble_3.2.1                ggplot2_3.5.1              \n[23] tidyverse_2.0.0             Seurat_5.1.0               \n[25] SeuratObject_5.0.2          sp_2.1-4                   \n[27] reticulate_1.40.0           BiocParallel_1.38.0        \n[29] future_1.34.0              \n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3      rstudioapi_0.17.1       jsonlite_1.8.9         \n  [4] magrittr_2.0.3          spatstat.utils_3.1-1    farver_2.1.2           \n  [7] rmarkdown_2.29          zlibbioc_1.50.0         vctrs_0.6.5            \n [10] ROCR_1.0-11             spatstat.explore_3.3-3  S4Arrays_1.4.1         \n [13] htmltools_0.5.8.1       SparseArray_1.4.8       sctransform_0.4.1      \n [16] parallelly_1.39.0       KernSmooth_2.23-24      htmlwidgets_1.6.4      \n [19] ica_1.0-3               plyr_1.8.9              plotly_4.10.4          \n [22] zoo_1.8-12              igraph_2.1.1            mime_0.12              \n [25] lifecycle_1.0.4         pkgconfig_2.0.3         Matrix_1.7-0           \n [28] R6_2.5.1                fastmap_1.2.0           GenomeInfoDbData_1.2.12\n [31] fitdistrplus_1.2-1      shiny_1.9.1             digest_0.6.37          \n [34] colorspace_2.1-1        patchwork_1.3.0         tensor_1.5             \n [37] RSpectra_0.16-2         irlba_2.3.5.1           labeling_0.4.3         \n [40] progressr_0.15.0        fansi_1.0.6             spatstat.sparse_3.1-0  \n [43] timechange_0.3.0        httr_1.4.7              polyclip_1.10-7        \n [46] abind_1.4-8             compiler_4.4.2          withr_3.0.2            \n [49] fastDummies_1.7.4       MASS_7.3-61             DelayedArray_0.30.1    \n [52] rappdirs_0.3.3          tools_4.4.2             lmtest_0.9-40          \n [55] httpuv_1.6.15           future.apply_1.11.3     goftest_1.2-3          \n [58] glue_1.8.0              nlme_3.1-165            promises_1.3.0         \n [61] grid_4.4.2              Rtsne_0.17              cluster_2.1.6          \n [64] reshape2_1.4.4          generics_0.1.3          gtable_0.3.6           \n [67] spatstat.data_3.1-2     tzdb_0.4.0              data.table_1.16.2      \n [70] hms_1.1.3               XVector_0.44.0          utf8_1.2.4             \n [73] spatstat.geom_3.3-3     RcppAnnoy_0.0.22        ggrepel_0.9.6          \n [76] RANN_2.6.2              pillar_1.9.0            limma_3.60.6           \n [79] spam_2.11-0             RcppHNSW_0.6.0          later_1.3.2            \n [82] splines_4.4.2           lattice_0.22-6          renv_1.0.11            \n [85] survival_3.7-0          deldir_2.0-4            tidyselect_1.2.1       \n [88] miniUI_0.1.1.1          pbapply_1.7-2           knitr_1.49             \n [91] gridExtra_2.3           scattermore_1.2         xfun_0.49              \n [94] statmod_1.5.0           pheatmap_1.0.12         UCSC.utils_1.0.0       \n [97] stringi_1.8.4           lazyeval_0.2.2          yaml_2.3.10            \n[100] evaluate_1.0.1          codetools_0.2-20        cli_3.6.3              \n[103] uwot_0.2.2              xtable_1.8-4            munsell_0.5.1          \n[106] Rcpp_1.0.13-1           globals_0.16.3          spatstat.random_3.3-2  \n[109] png_0.1-8               spatstat.univar_3.1-1   parallel_4.4.2         \n[112] presto_1.0.0            dotCall64_1.2           listenv_0.9.1          \n[115] viridisLite_0.4.2       scales_1.3.0            ggridges_0.5.6         \n[118] crayon_1.5.3            leiden_0.4.3.1          rlang_1.1.4            \n[121] cowplot_1.1.3          \n```\n:::\n:::\n",
    "supporting": [
      "Aim1_part2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}