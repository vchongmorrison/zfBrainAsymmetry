{
  "hash": "84b692a64c8c4ed08b40715cb96a8a89",
  "result": {
    "markdown": "---\ntitle: \"The parapineal 'cell type' - Part 2\"\n---\n\n\n## Identification of epiphysis cells\n\n### **Premise**\n\nIn the previous [section](Aim1_part1.qmd), two putative epiphysis cell clusters were identified in a \\~30-32 hpf scRNA-seq dataset. Can this result be replicated in the embryo? In other words, how likely are the inferred clusters to be from the epiphysis?\n\n### Experimental design\n\nMERFISH (**M**ultiplexed **E**rror-**R**obust **F**luorescence **i**n **s**itu **H**ybridisation) is an imaging-based approach capable of measuring RNA transcripts at single cell resolution. Unlike the destructive nature of scRNA-seq, *in vivo* spatial information (where each measured transcript is located in the sample) is preserved. [Vizgen MERSCOPE](https://vizgen.com/technology/) offers a commercial platform to perform MERFISH and was employed for this study.\n\n![Schematic of experiment design. A detailed sample preparation protocol can be found on <https://vchongmorrison.github.io/protocols/>](./figures/merscope-experiment.png){fig-align=\"center\"}\n\nAs illustrated above, only x2 10 micron tissue sections were collected for MERFISH. This was restricted by the maximum imaging area on the MERSCOPE slide. Therefore up to 5 embryos were simultaneously mounted in a tissue block, with the caveat that there will be unavoidable inter-embryo variation of the resulting tissue slices. Depending on how the embryo was mounted, the first (and second) section could be from the parapineal/pineal region (*sox1a* / *bsx* ++), or 1 or 2 planes later towards the pineal region only (*bsx* +).\n\nThe final dataset consists of x2 sections each of x2 biological replicates/embryos (wild type, \\~32-36 hpf). For sake of brevity, each section is named 'anterior' or 'posterior' depending on their relative location within the embryo they originated from.\n\n### Initialise R environment\n\n[Session](session.qmd)\n\n\n\n\n\n## MERSCOPE panel design\n\nVizgen offers the option to build custom gene panels of up to 140, 300, 500 or 1000 genes at increasingly extortionate prices. Since the aim of the MERFISH experiment was to query the two putative scRNA-seq epiphysis clusters `2` and `19` from the previously analysed `ss_e107` `SeuratObject`, a 140 gene panel was designed based on this result.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"../foxd3flh-5k_ss-e107.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Genes that are well known to be expressed in the epiphysis\nmarkers <- c(\"bsx\", \"noto\", \"otx5\")\ndittoPlotVarsAcrossGroups(ss_e107, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"ss_e107 (mean of bsx + noto + otx5)\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n### Call markers\n\nThere is an overwhelming number of methods in the scientific literature for scRNA-seq marker identification. Depending on your goal(s) for performing marker identification, some approaches might be better suited than others.\n\nIn this case, the main goal is to shortlist genes that could be MERFISH-measured in the embryo, including (hopefully) the epiphysis region. As a first pass, we run `FindMarkers` (implemented in `Seurat`) on clusters `2` and `19`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncl2.de.markers <- FindMarkers(ss_e107, ident.1 = \"2\", ident.2 = NULL, only.pos = TRUE, assay = \"RNA\")\nnrow(cl2.de.markers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6936\n```\n:::\n\n```{.r .cell-code}\n# Add new column of gene IDs called 'markers'\ncl2.de.markers$markers <- rownames(cl2.de.markers)\nhead(cl2.de.markers, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 p_val avg_log2FC pct.1 pct.2 p_val_adj          markers\notx1                 0   2.755492 0.938 0.100         0             otx1\notx2b                0   3.250256 0.810 0.044         0            otx2b\nbarhl2               0   3.424283 0.812 0.074         0           barhl2\nsi:ch211-69b22.5     0   2.500534 0.808 0.070         0 si:ch211-69b22.5\notx2a                0   2.263520 0.821 0.097         0            otx2a\nwnt4                 0   2.333122 0.783 0.076         0             wnt4\nfabp11a              0   4.230501 0.968 0.270         0          fabp11a\nzic4                 0   2.272131 0.778 0.096         0             zic4\nsall3b               0   2.044002 0.670 0.055         0           sall3b\ntpbga                0   3.059875 0.655 0.045         0            tpbga\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncl19.de.markers <- FindMarkers(ss_e107, ident.1 = \"19\", ident.2 = NULL, only.pos = TRUE, assay = \"RNA\")\nnrow(cl19.de.markers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11487\n```\n:::\n\n```{.r .cell-code}\n# Add new column of gene IDs called 'markers'\ncl19.de.markers$markers <- rownames(cl19.de.markers)\nhead(cl19.de.markers, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                          p_val avg_log2FC pct.1 pct.2     p_val_adj\nbsx                0.000000e+00   5.801700 0.910 0.030  0.000000e+00\nisl1               0.000000e+00   5.476998 0.888 0.031  0.000000e+00\nsix3a              0.000000e+00   6.449455 0.708 0.014  0.000000e+00\nlayna              0.000000e+00   6.930195 0.663 0.011  0.000000e+00\nsi:ch211-67e16.11  0.000000e+00   5.451577 0.663 0.014  0.000000e+00\nzgc:165481        8.312723e-294   6.072816 0.629 0.013 1.990565e-289\nLHX3              2.098162e-279   8.568871 0.326 0.001 5.024258e-275\nbtbd3b            6.471199e-274   4.982485 0.573 0.011 1.549593e-269\nnxph1             3.397695e-248   6.210768 0.742 0.027 8.136121e-244\nskor1b            1.170595e-245   6.371964 0.618 0.017 2.803108e-241\n                            markers\nbsx                             bsx\nisl1                           isl1\nsix3a                         six3a\nlayna                         layna\nsi:ch211-67e16.11 si:ch211-67e16.11\nzgc:165481               zgc:165481\nLHX3                           LHX3\nbtbd3b                       btbd3b\nnxph1                         nxph1\nskor1b                       skor1b\n```\n:::\n:::\n\n\n**Using the default cut-offs resulted in \\~7 and 11k of markers.** Clearly these need to be significantly narrowed down to build a 140 gene panel.\n\n### Cross-reference with ZFIN\n\nThis was achieved by mining [ZFIN gene expression data](session.qmd#Zebrafish%20Information%20Network%20(ZFIN)) for called markers whose expression were detected in the `epiphysis`. Of course, this is not fool-proof and heavily depends on the accuracy and completion of ZFIN's annotation. There may be many genes whose expression in the epiphysis were not annotated as such and therefore will be missed (more likely), and *vice versa* (exception rather than rule).\n\nFollow the link above for the code to pull ZFIN data-of-interest into a dataframe `gex_ISH` used below :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngex <- read.delim(url(\"https://zfin.org/downloads/wildtype-expression_fish.txt\"), header = FALSE, sep =\"\\t\")\nhead(gex, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 V1   V2 V3          V4             V5 V6 V7\n1 ZDB-GENE-060824-3 a1cf WT ZFA:0000123          liver      \n2 ZDB-GENE-060824-3 a1cf WT ZFA:0000123          liver      \n3 ZDB-GENE-060824-3 a1cf WT ZFA:0001094 whole organism      \n4 ZDB-GENE-090212-1 a2ml WT ZFA:0000112            gut      \n5 ZDB-GENE-090212-1 a2ml WT ZFA:0000123          liver      \n                       V8               V9                        V10\n1                   Adult            Adult  Reverse transcription PCR\n2 Larval:Protruding-mouth     Larval:Day 5 mRNA in situ hybridization\n3                   Adult            Adult  Reverse transcription PCR\n4        Larval:Days 7-13 Larval:Days 7-13 mRNA in situ hybridization\n5            Larval:Day 4     Larval:Day 4 mRNA in situ hybridization\n          V11               V12 V13 V14                   V15\n1 MMO:0000655  ZDB-PUB-060501-4         ZDB-FISH-150901-29105\n2 MMO:0000658  ZDB-PUB-060501-4         ZDB-FISH-150901-29105\n3 MMO:0000655  ZDB-PUB-060501-4         ZDB-FISH-150901-29105\n4 MMO:0000658 ZDB-PUB-081121-13         ZDB-FISH-150901-29105\n5 MMO:0000658 ZDB-PUB-081121-13         ZDB-FISH-150901-29105\n```\n:::\n\n```{.r .cell-code}\n# Add column IDs (based on Column Headers in the Downloads page above)\ncolnames(gex) <- c(\"GeneID\", \"GeneSymbol\",\"FishName\",\"SuperStructureID\",\"SuperStructureName\",\n                   \"SubStructureID\",\"SubStructureName\",\"StartStage\",\"EndStage\",\"Assay\",\n                   \"AssayMMOID\",\"PublicationID\",\"ProbeID\",\"AntibodyID\",\"FishID\")\ngex_ISH <- gex[which(gex$FishName=='WT' | gex$FishName=='AB/TU'), ]\ngex_ISH <- gex_ISH[which(gex_ISH$Assay=='mRNA in situ hybridization'), ]\ngex_ISH <- data.frame(gex_ISH$GeneSymbol, gex_ISH$SuperStructureName)\ncolnames(gex_ISH) <- c(\"GeneSymbol\",\"Structure\")\nhead(gex_ISH, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   GeneSymbol            Structure\n1        a1cf                liver\n2        a2ml                  gut\n3        a2ml                liver\n4        a2ml                liver\n5        a2ml                liver\n6        a2ml                 yolk\n7        a2ml                 yolk\n8        a2ml yolk syncytial layer\n9        a2ml yolk syncytial layer\n10       a2ml yolk syncytial layer\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Match every marker with every known WISH-detected Structure\ncl2.de.markers.epiphysis <- left_join(cl2.de.markers, gex_ISH, by = c(\"markers\" = \"GeneSymbol\"))\nhead(cl2.de.markers.epiphysis, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  p_val avg_log2FC pct.1 pct.2 p_val_adj markers                   Structure\n1     0   2.755492 0.938   0.1         0    otx1  alar plate midbrain region\n2     0   2.755492 0.938   0.1         0    otx1    anterior axial hypoblast\n3     0   2.755492 0.938   0.1         0    otx1                        axis\n4     0   2.755492 0.938   0.1         0    otx1 basal plate midbrain region\n5     0   2.755492 0.938   0.1         0    otx1                diencephalon\n```\n:::\n\n```{.r .cell-code}\n# Filter for \"epiphysis\" only\ncl2.de.markers.epiphysis <- distinct(filter(cl2.de.markers.epiphysis, Structure==\"epiphysis\"))\nhead(cl2.de.markers.epiphysis, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          p_val avg_log2FC pct.1 pct.2     p_val_adj markers Structure\n1  0.000000e+00   2.755492 0.938 0.100  0.000000e+00    otx1 epiphysis\n2  0.000000e+00   3.250256 0.810 0.044  0.000000e+00   otx2b epiphysis\n3  0.000000e+00   2.263520 0.821 0.097  0.000000e+00   otx2a epiphysis\n4  0.000000e+00   2.333122 0.783 0.076  0.000000e+00    wnt4 epiphysis\n5 4.197046e-284   2.721522 0.959 0.210 1.005025e-279  cldn5a epiphysis\n```\n:::\n\n```{.r .cell-code}\nnrow(cl2.de.markers.epiphysis)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 135\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Match every marker with every known WISH-detected Structure\ncl19.de.markers.epiphysis <- left_join(cl19.de.markers, gex_ISH, by = c(\"markers\" = \"GeneSymbol\"))\nhead(cl19.de.markers.epiphysis, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  p_val avg_log2FC pct.1 pct.2 p_val_adj markers         Structure\n1     0     5.8017  0.91  0.03         0     bsx             brain\n2     0     5.8017  0.91  0.03         0     bsx             brain\n3     0     5.8017  0.91  0.03         0     bsx             brain\n4     0     5.8017  0.91  0.03         0     bsx caudal tuberculum\n5     0     5.8017  0.91  0.03         0     bsx caudal tuberculum\n```\n:::\n\n```{.r .cell-code}\n# Filter for \"epiphysis\" only\ncl19.de.markers.epiphysis <- distinct(filter(cl19.de.markers.epiphysis, Structure==\"epiphysis\"))\nhead(cl19.de.markers.epiphysis, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          p_val avg_log2FC pct.1 pct.2     p_val_adj markers Structure\n1  0.000000e+00   5.801700 0.910 0.030  0.000000e+00     bsx epiphysis\n2 3.397695e-248   6.210768 0.742 0.027 8.136121e-244   nxph1 epiphysis\n3 2.688572e-217   6.833524 0.337 0.003 6.438054e-213  rcvrn2 epiphysis\n4 9.997499e-179   3.981461 0.865 0.062 2.394001e-174  esrrga epiphysis\n5 4.366307e-176   5.705932 0.404 0.007 1.045556e-171  sall3a epiphysis\n```\n:::\n\n```{.r .cell-code}\nnrow(cl19.de.markers.epiphysis)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 302\n```\n:::\n:::\n\n\nThis step identifies a significantly more manageable \\~100 and 300 candidate genes per cluster for a MERFISH experiment.\n\n-   [Link](https://github.com/vchongmorrison/zfBrainAsymmetry/blob/master/annotations/cl2_de_markers_epiphysis.txt) to Cluster `2` candidate gene list\n\n-   [Link](https://github.com/vchongmorrison/zfBrainAsymmetry/blob/master/annotations/cl19_de_markers_epiphysis.txt) to Cluster `19` candidate gene list\n\nAt this point, the gene lists were manually shortlisted for inclusion into the final MERSCOPE 140 Gene Panel, with decreasing priority below.\n\n1.  Genes from the literature/previous work\n\n    -   Clanton *et al*. 2013\n\n    -   Khuansuwan *et al*. 2016\n\n    -   Schredelseker & Driever, 2018\n\n2.  Genes related to GABA synthesis and signalling\n\n    -   (one-liner explanation from S Wilson? TBC)\n\n3.  Selected from Cluster `2` and `19` candidate gene lists, that generally have some previous links to neurogenesis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save gene lists to file\nwrite.table(data.frame(cl2.de.markers.epiphysis$markers), file=\"./annotations/cl2_de_markers_epiphysis.txt\", row.names=FALSE, quote=FALSE)\nwrite.table(data.frame(cl19.de.markers.epiphysis$markers), file=\"./annotations/cl19_de_markers_epiphysis.txt\", row.names=FALSE, quote=FALSE)\n```\n:::\n\n\n### 140 Gene Panel for MERSCOPE - final\n\n-   [Link](https://github.com/vchongmorrison/zfBrainAsymmetry/blob/master/annotations/codebook_0_AM0765_zebrafishChongMorrisonAsymmetry.csv) to panel codebook\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerscope <- read.csv('./annotations/codebook_0_AM0765_zebrafishChongMorrisonAsymmetry.csv', header=TRUE, row.names=1)\nhead(merscope, 10) # print first 10 rows only\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        id barcodeType V0001T8B1 V0002T8B1 V0003T8B1 V0004T8B1\naanat2  ENSDART00000018205     merfish         0         0         1         0\nalcama  ENSDART00000129400     merfish         0         0         0         0\naldocb  ENSDART00000026766     merfish         0         1         0         1\narr3a   ENSDART00000078996     merfish         0         0         0         1\narr3b   ENSDART00000158077     merfish         0         0         0         0\nascl1a  ENSDART00000056005     merfish         0         0         0         0\nasip2b  ENSDART00000185699     merfish         0         0         0         0\natp1a3a ENSDART00000104950     merfish         0         0         0         1\natp1b1b ENSDART00000139387     merfish         0         0         0         0\natp1b2a ENSDART00000160044     merfish         0         1         0         0\n        V0005T8B1 V0006T8B1 V0007T8B1 V0008T8B1 V0009T8B1 V0010T8B1 V0011T8B1\naanat2          0         0         0         0         0         0         1\nalcama          0         0         0         0         0         0         0\naldocb          0         0         0         0         1         0         0\narr3a           0         0         0         1         0         0         0\narr3b           1         1         1         0         1         0         0\nascl1a          0         0         1         0         1         0         0\nasip2b          1         0         1         0         0         0         0\natp1a3a         0         0         0         0         0         1         1\natp1b1b         0         0         0         1         0         1         0\natp1b2a         0         0         0         0         0         0         0\n        V0012T8B1 V0013T8B1 V0014T8B1 V0015T8B1 V0016T8B1 V0017T8B1 V0018T8B1\naanat2          0         0         0         1         1         0         0\nalcama          0         1         1         1         0         1         0\naldocb          0         0         0         1         0         0         0\narr3a           0         0         1         0         0         1         0\narr3b           0         0         0         0         0         0         0\nascl1a          0         0         0         1         0         1         0\nasip2b          0         1         0         1         0         0         0\natp1a3a         0         0         0         0         1         0         0\natp1b1b         0         1         0         0         0         1         0\natp1b2a         0         1         0         1         0         0         1\n```\n:::\n:::\n\n\n#### **Composition of the final panel**\n\n[UpSet](https://github.com/hms-dbmi/UpSetR) plots are an excellent alternative to Venn diagrams for visualising intersection between the three gene lists above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##### Explore intersection of markers between clusters #####\nlibrary(UpSetR)\n\ncl2 <- read.table(\"./annotations/cl2_de_markers_epiphysis.txt\", header=TRUE)\ncl2$cluster <- \"Cluster2\"\ncolnames(cl2) <- c(\"markers\",\"cluster\")\n\ncl19 <- read.table(\"./annotations/cl19_de_markers_epiphysis.txt\", header=TRUE)\ncl19$cluster <- \"Cluster19\"\ncolnames(cl19) <- c(\"markers\",\"cluster\")\n\nmerscope <- merscope[1:140,] # 140 gene targets, remove 40 Blanks\nmerscope$markers <- rownames(merscope)\nmerscope$cluster <- \"merscope\"\nmerscope <- data.frame(merscope$markers, merscope$cluster)\ncolnames(merscope) <- c(\"markers\",\"cluster\")\n\nall.markers <- rbind(cl2, cl19, merscope)\n\n# Format data to serve as input for UpSetR.\ninput <- all.markers %>% mutate(truval=TRUE) %>% spread(cluster, truval, fill=FALSE)\ninput <- input %>%\n  mutate(across(2:4, ~ as.integer(as.character(factor(., levels = c(\"TRUE\", \"FALSE\"), labels = c(1, 0))))))\n\n# UpSetR plot - Conway et al. 2017\nupset(input, empty.intersections = \"on\", order.by = \"freq\", mainbar.y.label = \"Epiphysis marker intersections\", sets.x.label = \"Epiphysis markers per set\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nOf the 140 genes in the MERSCOPE panel;\n\n-   The large majority, 103, are specific to Cluster `19` candidate genes\n\n-   9 are shared between Cluster `2` and `19`\n\n-   4 are specific to Cluster `2` candidate genes\n\n-   24 are from neither i.e. from the literature and GABA genes\n\n#### **Expression pattern in `ss_e107`** \n\nTo explore the expression of these genes in the `ss_e107` scRNA-seq dataset, let's first check that all the panel genes are present in the `SeuratObject`. Otherwise, plotting will throw errors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# MERSCOPE panel genes\nmerscope <- read.csv(\"./annotations/codebook_0_AM0765_zebrafishChongMorrisonAsymmetry.csv\", header=TRUE)\nmerscope <- merscope[1:140,]\n# 3 genes filtered out in ss_e107 dataset, remove these otherwise plotting ss_e107 will throw error\ngenes <- data.frame(rownames(ss_e107))\ncolnames(genes) <- \"gene\"\nmerscope_check <- dplyr::left_join(genes, merscope, by = c(\"gene\" = \"name\")) %>% filter(barcodeType==\"merfish\") # 137 genes\nanti_join(merscope, merscope_check, by=join_by(name == gene)) # to get names of these genes (gfi1ab, opn1sw1, rho)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     name                 id barcodeType V0001T8B1 V0002T8B1 V0003T8B1\n1  gfi1ab ENSDART00000065139     merfish         0         0         0\n2 opn1sw1 ENSDART00000067160     merfish         1         0         0\n3     rho ENSDART00000027000     merfish         1         0         0\n  V0004T8B1 V0005T8B1 V0006T8B1 V0007T8B1 V0008T8B1 V0009T8B1 V0010T8B1\n1         1         1         0         0         0         0         0\n2         0         0         0         1         0         0         1\n3         0         0         0         0         0         0         0\n  V0011T8B1 V0012T8B1 V0013T8B1 V0014T8B1 V0015T8B1 V0016T8B1 V0017T8B1\n1         0         0         1         1         0         0         0\n2         0         0         0         0         0         0         1\n3         0         1         0         1         0         0         1\n  V0018T8B1\n1         0\n2         0\n3         0\n```\n:::\n:::\n\n\nPlot a heatmap of the 140 (137) panel genes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoHeatmap(ss_e107, merscope_check$gene,\n             annot.by = \"SCT_snn_res.1\",\n             scaled.to.max = TRUE,\n             show_colnames = FALSE,\n             show_rownames = TRUE, complex=TRUE, fontsize_row = 3)\n```\n\n::: {.cell-output-display}\n![](Aim1_part2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nThis heatmap illustrates the on-going challenge - that the epiphysis shares many of its expressed genes with other neuronal and/or cranial cell types. Despite 'marker identification' followed by filtering for those with pre-validated *in vivo* expression in the epiphysis, these genes as a whole ***do not specifically*** mark out the (putative) epiphysis clusters `2` and `19`. Therefore, from a bioinformatics perspective, using a ***combination of genes*** is vital to 'extract' these cells - as demonstrated in [Aim 1 Part 1: Identify epiphysis clusters](Aim1_part1.qmd#Identify%20epiphysis%20clusters).\n\n### Additional insights\n\nHowever, in the painstaking iterative process of going through the gene lists above and cross-checking with ZFIN, two groups of genes were noted to display specific expression in the epiphysis and retina. The ones highlighted in **bold** were called in Clusters `2` and `19` candidate gene lists.\n\n-   Recoverins - `rcvrna`, `rcvrnb`, **`rcvrn2`**, `rcvrn3`\n\n-   Phosphodiesterases - **`pde6gb`**,**`pde6c`**,**`pde6d`** ... (too many to list).\n\nThe [recoverins](https://zfin.org/ZDB-IMAGE-151008-27#image) and [*pde6gb*](https://zfin.org/ZDB-FIG-050630-4919#summary) in particular had striking epiphysis- plus/minus retina-specific expression patterns in the embryo. They reflect the photoreceptive characteristics of these organs. Let's look at these genes together with the three markers previously used to identify epiphysis clusters - *bsx*, *noto*, *otx5*. *Sox1a* is included as the parapineal marker.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nepiphysis_genes <- c(\"bsx\", \"noto\", \"otx5\", \"sox1a\",\n                     \"rcvrna\", \"rcvrnb\", \"rcvrn2\", \"rcvrn3\",\n                     \"pde6gb\")\n\ndittoDotPlot(ss_e107, epiphysis_genes, group.by=\"SCT_snn_res.1\")\n```\n\n::: {.cell-output-display}\n![](Aim1_part2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nCluster `19` demonstrated robust expression of several of these 'ZFIN-validated' genes. Remarkably, the remaining clusters, including Cluster `2`, showed co-expression of these genes as well to a certain extent...are these 'contaminating' retinal photoreceptor precursors? However, the parapineal marker *sox1a* is still only detected in Clusters `2` and `19`.\n\nWith these lessons in mind, we proceed with the MERSCOPE experiment to gather additional evidence and wrap-up Aim 1.\n\n## Pre-processing of MERSCOPE data\n\n[MERSCOPE Vizualizer](https://vizgen.com/vizualizer-software/) is a free software provided by Vizgen as an out-of-box solution to explore results from MERSCOPE runs. The following images are exported using the following settings: `Transcripts Z-plane = All`; `Z-plane = 2` ; `Images = DAPI` channel only. The MERFISH signal coverage clearly encompasses the epiphysis region, which is promising. However, these images also have the `cell` setting ON...and it is clear that the default cell segmentation algorithm in the run is incompatible with the samples.\n\n::: {#fig-e1 layout-ncol=\"2\"}\n![Embryo 1 - anterior slice](./figures/embryo1_ant_all-genes_DAPI.png)\n\n![Embryo 1 - posterior slice](./figures/embryo1_pos_all-genes_DAPI.png)\n\nEmbryo 1 with all detected transcripts and failed cell segmentation\n:::\n\n::: {#fig-e2 layout-ncol=\"2\"}\n![Embryo 2 - anterior slice](./figures/embryo2_ant_all-genes_DAPI.png)\n\n![Embryo 2 - posterior slice](./figures/embryo2_pos_all-genes_DAPI.png)\n\nEmbryo 2 with all detected transcripts and failed cell segmentation\n:::\n\n### Cell segmentation\n\nThrough a lot of trial and error, I worked out that [Cellpose](https://github.com/MouseLand/cellpose)'s `cyto3` model released with v3 (Feb 2024) had the best performance in segmenting these images. In addition, Vizgen's [VPT](https://vizgen.com/vpt/) tool with the [Cellpose2 plugin](https://github.com/Vizgen/vpt-plugin-cellpose2) enables performing custom 2-task segmentation runs, where the results of two (up to six) segmentation settings can be harmonised for a 'consensus'-like result (and perhaps improve sensitivity). The final pipeline is implemented as an `apptainer` container that runs VPT-Cellpose2 to perform 2-task segmentation using the `cyto3` model.\n\n``` bash\n# apptainer.def file\n```\n\n::: {#fig-reseg layout-ncol=\"2\"}\n![Embryo 1 - posterior slice](./figures/embryo1_pos_all-genes_DAPI_reseg.png)\n\n![Embryo 2 - posterior slice](./figures/embryo2_pos_all-genes_DAPI_reseg.png)\n\nEmbryo 1 and 2 with all detected transcripts and successful re-segmentation\n:::\n\n## Clustering of MERSCOPE data\n\nin progress\n\n------------------------------------------------------------------------\n\n## Summary notes for Aim 1 - Part 2\n\n1.  in progress\n\n2.  in progress\n\n------------------------------------------------------------------------\n\n## References\n\n### Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npkgs <- cite_packages(output = \"table\", out.dir = \".\")\nknitr::kable(pkgs)\n```\n\n::: {.cell-output-display}\n|Package              |Version   |Citation     |\n|:--------------------|:---------|:------------|\n|base                 |4.4.2     |@base        |\n|BiocParallel         |1.38.0    |@BiocPar.... |\n|dittoSeq             |1.16.0    |@dittoSeq    |\n|future               |1.34.0    |@RJ-2021-048 |\n|knitr                |1.49      |@knitr20.... |\n|Matrix               |1.7.0     |@Matrix      |\n|RCurl                |1.98.1.16 |@RCurl       |\n|reticulate           |1.40.0    |@reticulate  |\n|rmarkdown            |2.29      |@rmarkdo.... |\n|scDblFinder          |1.18.0    |@scDblFinder |\n|Seurat               |5.1.0     |@Seurat2.... |\n|SingleCellExperiment |1.26.0    |@SingleC.... |\n|tidyverse            |2.0.0     |@tidyverse   |\n|UpSetR               |1.4.0     |@UpSetR      |\n:::\n:::\n\n\n### Previous work\n\n-   I. Lekk, V. Duboc, A. Faro, S. Nicolaou, P. Blader and S.W. Wilson. *Sox1a mediates the ability of the parapineal to impart habenular left-right asymmetry*. eLife (2019), e47376, 8, <https://doi.org/10.7554/eLife.47376>\n-   S. Khuansuwan, J. A. Clanton, B. J. Dean, J. G. Patton, J. T. Gamse; A transcription factor network controls cell migration and fate decisions in the developing zebrafish pineal complex. *Development* 15 July 2016; 143 (14): 2641--2650, <https://doi.org/10.1242/dev.131680>\n-   J. A. Clanton, K. D. Hope, J. T. Gamse; Fgf signaling governs cell fate in the zebrafish pineal complex. *Development* 15 January 2013; 140 (2): 323--332, <https://doi.org/10.1242/dev.083709>\n-   Theresa Schredelseker, Wolfgang Driever; Bsx controls pineal complex development. *Development* 1 July 2018; 145 (13): dev163477, <https://doi.org/10.1242/dev.163477>\n\n## Session Info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.2 (2024-10-31)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] UpSetR_1.4.0                grateful_0.2.10            \n [3] SingleCellExperiment_1.26.0 SummarizedExperiment_1.34.0\n [5] Biobase_2.64.0              GenomicRanges_1.56.2       \n [7] GenomeInfoDb_1.40.1         IRanges_2.38.1             \n [9] S4Vectors_0.42.1            BiocGenerics_0.50.0        \n[11] MatrixGenerics_1.16.0       matrixStats_1.4.1          \n[13] dittoSeq_1.16.0             lubridate_1.9.3            \n[15] forcats_1.0.0               stringr_1.5.1              \n[17] dplyr_1.1.4                 purrr_1.0.2                \n[19] readr_2.1.5                 tidyr_1.3.1                \n[21] tibble_3.2.1                ggplot2_3.5.1              \n[23] tidyverse_2.0.0             Seurat_5.1.0               \n[25] SeuratObject_5.0.2          sp_2.1-4                   \n[27] reticulate_1.40.0           BiocParallel_1.38.0        \n[29] future_1.34.0              \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22        splines_4.4.2           later_1.3.2            \n  [4] polyclip_1.10-7         fastDummies_1.7.4       lifecycle_1.0.4        \n  [7] doParallel_1.0.17       globals_0.16.3          lattice_0.22-6         \n [10] MASS_7.3-61             magrittr_2.0.3          limma_3.60.6           \n [13] plotly_4.10.4           rmarkdown_2.29          yaml_2.3.10            \n [16] httpuv_1.6.15           sctransform_0.4.1       spam_2.11-0            \n [19] spatstat.sparse_3.1-0   cowplot_1.1.3           pbapply_1.7-2          \n [22] RColorBrewer_1.1-3      abind_1.4-8             zlibbioc_1.50.0        \n [25] Rtsne_0.17              presto_1.0.0            rappdirs_0.3.3         \n [28] circlize_0.4.16         GenomeInfoDbData_1.2.12 ggrepel_0.9.6          \n [31] irlba_2.3.5.1           listenv_0.9.1           spatstat.utils_3.1-1   \n [34] pheatmap_1.0.12         goftest_1.2-3           RSpectra_0.16-2        \n [37] spatstat.random_3.3-2   fitdistrplus_1.2-1      parallelly_1.39.0      \n [40] leiden_0.4.3.1          codetools_0.2-20        DelayedArray_0.30.1    \n [43] shape_1.4.6.1           tidyselect_1.2.1        UCSC.utils_1.0.0       \n [46] farver_2.1.2            spatstat.explore_3.3-3  jsonlite_1.8.9         \n [49] GetoptLong_1.0.5        progressr_0.15.0        ggridges_0.5.6         \n [52] survival_3.7-0          iterators_1.0.14        foreach_1.5.2          \n [55] tools_4.4.2             ica_1.0-3               Rcpp_1.0.13-1          \n [58] glue_1.8.0              gridExtra_2.3           SparseArray_1.4.8      \n [61] xfun_0.49               withr_3.0.2             fastmap_1.2.0          \n [64] fansi_1.0.6             digest_0.6.37           timechange_0.3.0       \n [67] R6_2.5.1                mime_0.12               colorspace_2.1-1       \n [70] Cairo_1.6-2             scattermore_1.2         tensor_1.5             \n [73] spatstat.data_3.1-2     utf8_1.2.4              generics_0.1.3         \n [76] renv_1.0.11             data.table_1.16.2       httr_1.4.7             \n [79] htmlwidgets_1.6.4       S4Arrays_1.4.1          uwot_0.2.2             \n [82] pkgconfig_2.0.3         gtable_0.3.6            ComplexHeatmap_2.20.0  \n [85] lmtest_0.9-40           XVector_0.44.0          htmltools_0.5.8.1      \n [88] dotCall64_1.2           clue_0.3-66             scales_1.3.0           \n [91] png_0.1-8               spatstat.univar_3.1-1   knitr_1.49             \n [94] rstudioapi_0.17.1       rjson_0.2.23            tzdb_0.4.0             \n [97] reshape2_1.4.4          nlme_3.1-165            zoo_1.8-12             \n[100] GlobalOptions_0.1.2     KernSmooth_2.23-24      parallel_4.4.2         \n[103] miniUI_0.1.1.1          pillar_1.9.0            grid_4.4.2             \n[106] vctrs_0.6.5             RANN_2.6.2              promises_1.3.0         \n[109] xtable_1.8-4            cluster_2.1.6           evaluate_1.0.1         \n[112] cli_3.6.3               compiler_4.4.2          rlang_1.1.4            \n[115] crayon_1.5.3            future.apply_1.11.3     labeling_0.4.3         \n[118] plyr_1.8.9              stringi_1.8.4           viridisLite_0.4.2      \n[121] deldir_2.0-4            munsell_0.5.1           lazyeval_0.2.2         \n[124] spatstat.geom_3.3-3     Matrix_1.7-0            RcppHNSW_0.6.0         \n[127] hms_1.1.3               patchwork_1.3.0         statmod_1.5.0          \n[130] shiny_1.9.1             ROCR_1.0-11             igraph_2.1.1           \n```\n:::\n:::\n",
    "supporting": [
      "Aim1_part2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}