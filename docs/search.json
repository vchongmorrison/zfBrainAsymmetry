[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Lead Author and Researcher Dr V Chong-Morrison (Senior Postdoctoral Scientist) \nPrincipal Investigators \nProfessor S Wilson (University College London)  Professor T Sauka-Spengler (University of Oxford/Stowers Institute) \nThis website is a live documentation of the data underlying the following study.\n\n\n\nLeft/right differences in the brain have fascinated thinkers for generations. Zebrafish genetic tools harnessed within the epithalamus of the forebrain has led to the habenula’s emergence as a powerful paradigm to understand brain lateralisation. During development in the embryo, the habenula forms bilaterally as a pair of left and right nuclei, along with a medial pineal gland, and left-sided parapineal nucleus that emerges from the pineal.\n\n\nA substantial body of research in zebrafish unequivocally identified the parapineal organ (also known as the “parietal eye” in other organisms) as a crucial determinant of habenular left/right asymmetry. Through an unidentified mechanism, the parapineal organ signals to newly-born habenular neurons to adopt “left-sided” characteristics. This elusive signal is potent and precise within a defined developmental time window - approximately 28 to 32 hours post-fertilisation. Removing the parapineal signal during this time leads to a complete loss of left identity, resulting in a “double right” 4-days-old habenula.\n\n\n\nThe parapineal organ of a zebrafish embryo signals to neurons in the habenula region (dotted circles) circa 32 hours post fertilisation to acquire left/right asymmetric nuclei by 4 days old.\n\n\n\n\n\nPrevious studies have demonstrated that the parapineal organ expresses sox1a during its development. Lekk et al. showed that zebrafish sox1a mutants have “double right” habenula despite the parapineal developing normally in appearance. This finding was important as it uncoupled the parapineal’s signalling role from its anatomical structure. Unlike ablating or removing the parapineal altogether, which also leads to “double right” habenula, sox1a mutants can be utilised as a vehicle to retrieve signalling-deficient parapineal organs. These would uncover the important signal(s) crucial for habenula neurons to acquire left-sided character.\n\n\n\nIdentifying the parapineal signal(s) has previously eluded the field due to non-trivial technical challenges. At fewer than 20 cells per zebrafish embryo, isolating a pure population of parapineal cells of sufficient quality to characterise their genetic content was monumentally difficult. By combining single cell sequencing technologies with prior expertise in characterising small cell populations from zebrafish embryos, I overcame these challenges to illuminate a cohort of biological factors responsible for parapineal function in the context of epithalamic asymmetry.\n\n\n\n\n\n\nI. Lekk, V. Duboc, A. Faro, S. Nicolaou, P. Blader and S.W. Wilson. Sox1a mediates the ability of the parapineal to impart habenular left-right asymmetry. eLife (2019), e47376, 8, https://doi.org/10.7554/eLife.47376\nV. Duboc, P. Dufourcq, P. Blader, and M. Roussigné. Asymmetry of the Brain: Development and Implications. Annual Review of Genetics (2015), 647-672, 49(1), https://doi.org/10.1146/annurev-genet-112414-055322\n\n\n\n\n\nWilson Lab, University College London\nSauka-Spengler Lab, University of Oxford"
  },
  {
    "objectID": "index.html#background",
    "href": "index.html#background",
    "title": "Introduction",
    "section": "",
    "text": "Left/right differences in the brain have fascinated thinkers for generations. Zebrafish genetic tools harnessed within the epithalamus of the forebrain has led to the habenula’s emergence as a powerful paradigm to understand brain lateralisation. During development in the embryo, the habenula forms bilaterally as a pair of left and right nuclei, along with a medial pineal gland, and left-sided parapineal nucleus that emerges from the pineal.\n\n\nA substantial body of research in zebrafish unequivocally identified the parapineal organ (also known as the “parietal eye” in other organisms) as a crucial determinant of habenular left/right asymmetry. Through an unidentified mechanism, the parapineal organ signals to newly-born habenular neurons to adopt “left-sided” characteristics. This elusive signal is potent and precise within a defined developmental time window - approximately 28 to 32 hours post-fertilisation. Removing the parapineal signal during this time leads to a complete loss of left identity, resulting in a “double right” 4-days-old habenula.\n\n\n\nThe parapineal organ of a zebrafish embryo signals to neurons in the habenula region (dotted circles) circa 32 hours post fertilisation to acquire left/right asymmetric nuclei by 4 days old.\n\n\n\n\n\nPrevious studies have demonstrated that the parapineal organ expresses sox1a during its development. Lekk et al. showed that zebrafish sox1a mutants have “double right” habenula despite the parapineal developing normally in appearance. This finding was important as it uncoupled the parapineal’s signalling role from its anatomical structure. Unlike ablating or removing the parapineal altogether, which also leads to “double right” habenula, sox1a mutants can be utilised as a vehicle to retrieve signalling-deficient parapineal organs. These would uncover the important signal(s) crucial for habenula neurons to acquire left-sided character.\n\n\n\nIdentifying the parapineal signal(s) has previously eluded the field due to non-trivial technical challenges. At fewer than 20 cells per zebrafish embryo, isolating a pure population of parapineal cells of sufficient quality to characterise their genetic content was monumentally difficult. By combining single cell sequencing technologies with prior expertise in characterising small cell populations from zebrafish embryos, I overcame these challenges to illuminate a cohort of biological factors responsible for parapineal function in the context of epithalamic asymmetry."
  },
  {
    "objectID": "index.html#key-references",
    "href": "index.html#key-references",
    "title": "Introduction",
    "section": "",
    "text": "I. Lekk, V. Duboc, A. Faro, S. Nicolaou, P. Blader and S.W. Wilson. Sox1a mediates the ability of the parapineal to impart habenular left-right asymmetry. eLife (2019), e47376, 8, https://doi.org/10.7554/eLife.47376\nV. Duboc, P. Dufourcq, P. Blader, and M. Roussigné. Asymmetry of the Brain: Development and Implications. Annual Review of Genetics (2015), 647-672, 49(1), https://doi.org/10.1146/annurev-genet-112414-055322"
  },
  {
    "objectID": "index.html#external-links",
    "href": "index.html#external-links",
    "title": "Introduction",
    "section": "",
    "text": "Wilson Lab, University College London\nSauka-Spengler Lab, University of Oxford"
  },
  {
    "objectID": "session.html",
    "href": "session.html",
    "title": "Session",
    "section": "",
    "text": "I run this at the start of every session as a base.\nn.b. Additional packages are imported in as needed.\n##### Set libPaths and memory/parallel cores usage #####\n.libPaths(c(\"/home/chongmorrison/R/x86_64-pc-linux-gnu-library/4.3\",\n            \"/home/chongmorrison/R/4.4.1-Bioc3.19\"))\n.libPaths() # check .libPaths\n\noptions(Ncpus = 12) # adjust no. of cores for base R\ngetOption(\"Ncpus\", 1L)\n\nlibrary(future)\noptions(future.globals.maxSize = 2000 * 1024^2) # adjust limit of allowable object size = 2G\n# *could* enable parallelisation i.e. workers &gt; 1, for Seurat etc. but breaks Python processes currently...\nfuture::plan(\"multisession\", workers = 1) # or use \"sequential\" mode\nfuture::plan()\n\nlibrary(BiocParallel) # for parallelising Bioconductor packages\n\n##### Import analysis packages #####\n# Potential bug: Python environment needs to be activated before loading Seurat\nlibrary(reticulate)\nconda_list() # check available conda environments\nuse_condaenv(\"singlecell-scHPF\", required=TRUE) # has leidenalg etc. installed\n# R packages\nlibrary(Seurat)\nlibrary(tidyverse)\nlibrary(dittoSeq)\nlibrary(SingleCellExperiment)\nlibrary(grateful)\n\n# set seed for reproducibility of random sampling\nset.seed(584)"
  },
  {
    "objectID": "session.html#initialise-r-environment",
    "href": "session.html#initialise-r-environment",
    "title": "Session",
    "section": "",
    "text": "I run this at the start of every session as a base.\nn.b. Additional packages are imported in as needed.\n##### Set libPaths and memory/parallel cores usage #####\n.libPaths(c(\"/home/chongmorrison/R/x86_64-pc-linux-gnu-library/4.3\",\n            \"/home/chongmorrison/R/4.4.1-Bioc3.19\"))\n.libPaths() # check .libPaths\n\noptions(Ncpus = 12) # adjust no. of cores for base R\ngetOption(\"Ncpus\", 1L)\n\nlibrary(future)\noptions(future.globals.maxSize = 2000 * 1024^2) # adjust limit of allowable object size = 2G\n# *could* enable parallelisation i.e. workers &gt; 1, for Seurat etc. but breaks Python processes currently...\nfuture::plan(\"multisession\", workers = 1) # or use \"sequential\" mode\nfuture::plan()\n\nlibrary(BiocParallel) # for parallelising Bioconductor packages\n\n##### Import analysis packages #####\n# Potential bug: Python environment needs to be activated before loading Seurat\nlibrary(reticulate)\nconda_list() # check available conda environments\nuse_condaenv(\"singlecell-scHPF\", required=TRUE) # has leidenalg etc. installed\n# R packages\nlibrary(Seurat)\nlibrary(tidyverse)\nlibrary(dittoSeq)\nlibrary(SingleCellExperiment)\nlibrary(grateful)\n\n# set seed for reproducibility of random sampling\nset.seed(584)"
  },
  {
    "objectID": "session.html#session-info",
    "href": "session.html#session-info",
    "title": "Session",
    "section": "Session Info",
    "text": "Session Info\n\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] compiler_4.4.2    fastmap_1.2.0     cli_3.6.3         tools_4.4.2      \n [5] htmltools_0.5.8.1 yaml_2.3.10       rmarkdown_2.29    knitr_1.49       \n [9] jsonlite_1.8.9    xfun_0.49         digest_0.6.37     rlang_1.1.4      \n[13] evaluate_1.0.1"
  },
  {
    "objectID": "Aim1.html",
    "href": "Aim1.html",
    "title": "The parapineal ‘cell type’",
    "section": "",
    "text": "Question: Using single cell RNA-seq (scRNA-seq), can pineal and parapineal cells be identified from a mixed population regardless of sox1a genotype?\n\n\nApproximately 230 heads from ~30-32 hpf larvae were collected. Larvae were of mixed sox1a genotype (hets, homs and wild types) obtained by incrossing sox1a hets. Heads were dissociated into single cell suspension for FACS-based enrichment of GFP++/mCherry- cells. GFP labels the epiphysis and other ‘contaminant’ cell types, while mCherry labels ‘contaminant’ cell types only. The mCherry transgene was pre-determined in prior imaging experiments to not label the parapineal organ. Approximately 10k sorted events were recorded and collected for scRNA-seq using 10X Genomics 3’ v3.1 GEX chemistry. The library was sequenced to at least 500 million reads, thus yielding a depth of ~100k reads per cell.\n\n\n\nSchematic of experiment design.\n\n\n\n\n\n[link to Session page]\n\n\n\nTo empirically determine the robustness of called clusters downstream, reads were pre-processed using two different mapper/gene annotation combinations:\n\n10X Genomics CellRanger v7.1.0 + Lawson Lab annotation (Lawson et al., 2020)\n\nThis pipeline maps unique reads only:\n# Preprocessing - Cell Ranger 7.1.0 (unique reads only)\ncellranger count --id=foxd3flhGFP \\\n--transcriptome=/home/ucbtvmr/Scratch/cellranger/mkref/GRCz11_lawson/GRCz11_v4.3.2_GFP_mCherry \\\n--fastqs=/home/ucbtvmr/Scratch/4_scRNAseq/fastq \\\n--sample=VCM2-AK30645-AK6234 \\\n--no-bam\n\n\n\n\nSTARsolo v2.7.10b + Ensembl release 107 annotation\n\nThis pipeline includes multi-mapping reads assigned using EM algorithm:\n# Preprocessing - STARsolo v2.7.10b (with EM multi-mapped reads)\nSTAR --genomeDir /home/ucbtvmr/ensembl_releases/ensembl107/Danio_rerio.genome.GFP.mCherry/star_2.7.9a \\\n--readFilesIn /home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234*in progress**_S1_L002_R2_001.fastq.gz \\\n/home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234_S1_L002_R1_001.fastq.gz \\\n--readFilesCommand zcat \\\n--soloFeatures GeneFull \\\n--soloMultiMappers EM \\\n--clipAdapterType CellRanger4 --outFilterScoreMin 30 \\\n--soloCBwhitelist 3M-february-2018.txt \\\n--soloType CB_UMI_Simple \\\n--soloCBlen 16 \\\n--soloUMIstart 17 \\\n--soloUMIlen 12 \\\n--soloBarcodeReadLength 0 \\\n--soloCellFilter EmptyDrops_CR \\\n--limitOutSJcollapsed 5000000 \\\n--runThreadN 8\n\ncd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107/Solo.out/GeneFull\nmkdir raw_EM\ncd raw_EM\n# move multimapped-containing matrix to /raw_EM\nmv ../raw/UniqueAndMult-EM.mtx .\ncp ../raw/features.tsv .\ncp ../raw/barcodes.tsv .\n# rename multimapped-containing matrix to 'matrix.mtx' for --soloCellFiltering\nmv UniqueAndMult-EM.mtx matrix.mtx\n\n# Change working directory to the one containing Aligned.out.sam\ncd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107\n# Call cells\nSTAR --runMode soloCellFiltering ./Solo.out/GeneFull/raw_EM ./Solo.out/GeneFull/filtered_EM/filtered_EM --soloCellFilter EmptyDrops_CR"
  },
  {
    "objectID": "Aim1.html#identification-of-pineal-cells",
    "href": "Aim1.html#identification-of-pineal-cells",
    "title": "The parapineal ‘cell type’",
    "section": "",
    "text": "[in progress]\n\n.libPaths()\n\n[1] \"/home/chongmorrison/R/x86_64-pc-linux-gnu-library/4.4\"\n[2] \"/usr/local/lib/R/site-library\"                        \n[3] \"/usr/lib/R/site-library\"                              \n[4] \"/usr/lib/R/library\""
  },
  {
    "objectID": "Aim1.html#session-info",
    "href": "Aim1.html#session-info",
    "title": "The parapineal ‘cell type’",
    "section": "Session Info",
    "text": "Session Info\n\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] scDblFinder_1.18.0          grateful_0.2.10            \n [3] SingleCellExperiment_1.26.0 SummarizedExperiment_1.34.0\n [5] Biobase_2.64.0              GenomicRanges_1.56.2       \n [7] GenomeInfoDb_1.40.1         IRanges_2.38.1             \n [9] S4Vectors_0.42.1            BiocGenerics_0.50.0        \n[11] MatrixGenerics_1.16.0       matrixStats_1.4.1          \n[13] dittoSeq_1.16.0             lubridate_1.9.3            \n[15] forcats_1.0.0               stringr_1.5.1              \n[17] dplyr_1.1.4                 purrr_1.0.2                \n[19] readr_2.1.5                 tidyr_1.3.1                \n[21] tibble_3.2.1                ggplot2_3.5.1              \n[23] tidyverse_2.0.0             Seurat_5.1.0               \n[25] SeuratObject_5.0.2          sp_2.1-4                   \n[27] reticulate_1.39.0           BiocParallel_1.38.0        \n[29] future_1.34.0              \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22          splines_4.4.2            \n  [3] later_1.3.2               BiocIO_1.14.0            \n  [5] bitops_1.0-9              polyclip_1.10-7          \n  [7] XML_3.99-0.17             fastDummies_1.7.4        \n  [9] lifecycle_1.0.4           edgeR_4.2.2              \n [11] globals_0.16.3            lattice_0.22-6           \n [13] MASS_7.3-61               magrittr_2.0.3           \n [15] limma_3.60.6              plotly_4.10.4            \n [17] rmarkdown_2.29            yaml_2.3.10              \n [19] metapod_1.12.0            httpuv_1.6.15            \n [21] glmGamPoi_1.16.0          sctransform_0.4.1        \n [23] spam_2.11-0               spatstat.sparse_3.1-0    \n [25] cowplot_1.1.3             pbapply_1.7-2            \n [27] RColorBrewer_1.1-3        abind_1.4-8              \n [29] zlibbioc_1.50.0           Rtsne_0.17               \n [31] RCurl_1.98-1.16           rappdirs_0.3.3           \n [33] GenomeInfoDbData_1.2.12   ggrepel_0.9.6            \n [35] irlba_2.3.5.1             listenv_0.9.1            \n [37] spatstat.utils_3.1-1      pheatmap_1.0.12          \n [39] goftest_1.2-3             RSpectra_0.16-2          \n [41] dqrng_0.4.1               spatstat.random_3.3-2    \n [43] fitdistrplus_1.2-1        parallelly_1.39.0        \n [45] DelayedMatrixStats_1.26.0 leiden_0.4.3.1           \n [47] codetools_0.2-20          DelayedArray_0.30.1      \n [49] scuttle_1.14.0            tidyselect_1.2.1         \n [51] UCSC.utils_1.0.0          farver_2.1.2             \n [53] viridis_0.6.5             ScaledMatrix_1.12.0      \n [55] spatstat.explore_3.3-3    GenomicAlignments_1.40.0 \n [57] jsonlite_1.8.9            BiocNeighbors_1.22.0     \n [59] progressr_0.15.0          scater_1.32.1            \n [61] ggridges_0.5.6            survival_3.7-0           \n [63] tools_4.4.2               ica_1.0-3                \n [65] Rcpp_1.0.13-1             glue_1.8.0               \n [67] gridExtra_2.3             SparseArray_1.4.8        \n [69] xfun_0.49                 withr_3.0.2              \n [71] fastmap_1.2.0             bluster_1.14.0           \n [73] fansi_1.0.6               rsvd_1.0.5               \n [75] digest_0.6.37             timechange_0.3.0         \n [77] R6_2.5.1                  mime_0.12                \n [79] colorspace_2.1-1          scattermore_1.2          \n [81] tensor_1.5                spatstat.data_3.1-2      \n [83] utf8_1.2.4                generics_0.1.3           \n [85] renv_1.0.11               data.table_1.16.2        \n [87] rtracklayer_1.64.0        httr_1.4.7               \n [89] htmlwidgets_1.6.4         S4Arrays_1.4.1           \n [91] uwot_0.2.2                pkgconfig_2.0.3          \n [93] gtable_0.3.6              lmtest_0.9-40            \n [95] XVector_0.44.0            htmltools_0.5.8.1        \n [97] dotCall64_1.2             scales_1.3.0             \n [99] png_0.1-8                 spatstat.univar_3.1-1    \n[101] scran_1.32.0              knitr_1.49               \n[103] rstudioapi_0.17.1         rjson_0.2.23             \n[105] tzdb_0.4.0                reshape2_1.4.4           \n[107] curl_6.0.0                nlme_3.1-165             \n[109] zoo_1.8-12                KernSmooth_2.23-24       \n[111] vipor_0.4.7               parallel_4.4.2           \n[113] miniUI_0.1.1.1            restfulr_0.0.15          \n[115] pillar_1.9.0              grid_4.4.2               \n[117] vctrs_0.6.5               RANN_2.6.2               \n[119] promises_1.3.0            BiocSingular_1.20.0      \n[121] beachmat_2.20.0           xtable_1.8-4             \n[123] cluster_2.1.6             beeswarm_0.4.0           \n[125] evaluate_1.0.1            locfit_1.5-9.10          \n[127] Rsamtools_2.20.0          cli_3.6.3                \n[129] compiler_4.4.2            rlang_1.1.4              \n[131] crayon_1.5.3              future.apply_1.11.3      \n[133] labeling_0.4.3            ggbeeswarm_0.7.2         \n[135] plyr_1.8.9                stringi_1.8.4            \n[137] viridisLite_0.4.2         deldir_2.0-4             \n[139] Biostrings_2.72.1         munsell_0.5.1            \n[141] lazyeval_0.2.2            spatstat.geom_3.3-3      \n[143] Matrix_1.7-0              RcppHNSW_0.6.0           \n[145] hms_1.1.3                 patchwork_1.3.0          \n[147] sparseMatrixStats_1.16.0  statmod_1.5.0            \n[149] shiny_1.9.1               ROCR_1.0-11              \n[151] igraph_2.1.1              xgboost_1.7.8.1"
  },
  {
    "objectID": "Aim2.html",
    "href": "Aim2.html",
    "title": "The sox1a ‘phenotype’",
    "section": "",
    "text": "[in progress]\n\n.libPaths()\n\n[1] \"/home/chongmorrison/R/x86_64-pc-linux-gnu-library/4.4\"\n[2] \"/usr/local/lib/R/site-library\"                        \n[3] \"/usr/lib/R/site-library\"                              \n[4] \"/usr/lib/R/library\""
  },
  {
    "objectID": "Aim2.html#extract-pineal-cells-from-mutants",
    "href": "Aim2.html#extract-pineal-cells-from-mutants",
    "title": "The sox1a ‘phenotype’",
    "section": "",
    "text": "[in progress]\n\n.libPaths()\n\n[1] \"/home/chongmorrison/R/x86_64-pc-linux-gnu-library/4.4\"\n[2] \"/usr/local/lib/R/site-library\"                        \n[3] \"/usr/lib/R/site-library\"                              \n[4] \"/usr/lib/R/library\""
  },
  {
    "objectID": "Aim2.html#session-info",
    "href": "Aim2.html#session-info",
    "title": "The sox1a ‘phenotype’",
    "section": "Session Info",
    "text": "Session Info\n\nsessionInfo()\n\nR version 4.4.1 (2024-06-14)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] compiler_4.4.1    fastmap_1.2.0     cli_3.6.3         tools_4.4.1      \n [5] htmltools_0.5.8.1 yaml_2.3.10       rmarkdown_2.29    knitr_1.48       \n [9] jsonlite_1.8.9    xfun_0.49         digest_0.6.37     rlang_1.1.4      \n[13] evaluate_1.0.1"
  },
  {
    "objectID": "Aim1.html#identification-of-epiphysis-cells",
    "href": "Aim1.html#identification-of-epiphysis-cells",
    "title": "The parapineal ‘cell type’",
    "section": "",
    "text": "Question: Using single cell RNA-seq (scRNA-seq), can pineal and parapineal cells be identified from a mixed population regardless of sox1a genotype?\n\n\nApproximately 230 heads from ~30-32 hpf larvae were collected. Larvae were of mixed sox1a genotype (hets, homs and wild types) obtained by incrossing sox1a hets. Heads were dissociated into single cell suspension for FACS-based enrichment of GFP++/mCherry- cells. GFP labels the epiphysis and other ‘contaminant’ cell types, while mCherry labels ‘contaminant’ cell types only. The mCherry transgene was pre-determined in prior imaging experiments to not label the parapineal organ. Approximately 10k sorted events were recorded and collected for scRNA-seq using 10X Genomics 3’ v3.1 GEX chemistry. The library was sequenced to at least 500 million reads, thus yielding a depth of ~100k reads per cell.\n\n\n\nSchematic of experiment design.\n\n\n\n\n\n[link to Session page]\n\n\n\nTo empirically determine the robustness of called clusters downstream, reads were pre-processed using two different mapper/gene annotation combinations:\n\n10X Genomics CellRanger v7.1.0 + Lawson Lab annotation (Lawson et al., 2020)\n\nThis pipeline maps unique reads only:\n# Preprocessing - Cell Ranger 7.1.0 (unique reads only)\ncellranger count --id=foxd3flhGFP \\\n--transcriptome=/home/ucbtvmr/Scratch/cellranger/mkref/GRCz11_lawson/GRCz11_v4.3.2_GFP_mCherry \\\n--fastqs=/home/ucbtvmr/Scratch/4_scRNAseq/fastq \\\n--sample=VCM2-AK30645-AK6234 \\\n--no-bam\n\n\n\n\nSTARsolo v2.7.10b + Ensembl release 107 annotation\n\nThis pipeline includes multi-mapping reads assigned using EM algorithm:\n# Preprocessing - STARsolo v2.7.10b (with EM multi-mapped reads)\nSTAR --genomeDir /home/ucbtvmr/ensembl_releases/ensembl107/Danio_rerio.genome.GFP.mCherry/star_2.7.9a \\\n--readFilesIn /home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234*in progress**_S1_L002_R2_001.fastq.gz \\\n/home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234_S1_L002_R1_001.fastq.gz \\\n--readFilesCommand zcat \\\n--soloFeatures GeneFull \\\n--soloMultiMappers EM \\\n--clipAdapterType CellRanger4 --outFilterScoreMin 30 \\\n--soloCBwhitelist 3M-february-2018.txt \\\n--soloType CB_UMI_Simple \\\n--soloCBlen 16 \\\n--soloUMIstart 17 \\\n--soloUMIlen 12 \\\n--soloBarcodeReadLength 0 \\\n--soloCellFilter EmptyDrops_CR \\\n--limitOutSJcollapsed 5000000 \\\n--runThreadN 8\n\ncd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107/Solo.out/GeneFull\nmkdir raw_EM\ncd raw_EM\n# move multimapped-containing matrix to /raw_EM\nmv ../raw/UniqueAndMult-EM.mtx .\ncp ../raw/features.tsv .\ncp ../raw/barcodes.tsv .\n# rename multimapped-containing matrix to 'matrix.mtx' for --soloCellFiltering\nmv UniqueAndMult-EM.mtx matrix.mtx\n\n# Change working directory to the one containing Aligned.out.sam\ncd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107\n# Call cells\nSTAR --runMode soloCellFiltering ./Solo.out/GeneFull/raw_EM ./Solo.out/GeneFull/filtered_EM/filtered_EM --soloCellFilter EmptyDrops_CR"
  },
  {
    "objectID": "Aim1.html#summary-notes-for-aim-1",
    "href": "Aim1.html#summary-notes-for-aim-1",
    "title": "The parapineal ‘cell type’",
    "section": "Summary notes for Aim 1",
    "text": "Summary notes for Aim 1\n\nPutative epiphysis cell clusters can be identified by scRNA-seq regardless of sox1a genotype.\nSox1a-positive putative parapineal cells can be detected within these clusters.\nNext step: In vivo validation of these putative clusters using spatial transcriptomics (Vizgen MERSCOPE)"
  },
  {
    "objectID": "Aim1.html#references",
    "href": "Aim1.html#references",
    "title": "The parapineal ‘cell type’",
    "section": "References",
    "text": "References\n\nPackages\n\npkgs &lt;- cite_packages(output = \"table\", out.dir = \".\")\nknitr::kable(pkgs)\n\n\n\n\nPackage\nVersion\nCitation\n\n\n\n\nbase\n4.4.2\nR Core Team (2024)\n\n\nBiocParallel\n1.38.0\n(BiocPar?)….\n\n\ndittoSeq\n1.16.0\nBunis et al. (2020)\n\n\nfuture\n1.34.0\nBengtsson (2021)\n\n\nknitr\n1.49\n(knitr20?)….\n\n\nMatrix\n1.7.0\nBates, Maechler, and Jagan (2024)\n\n\nRCurl\n1.98.1.16\nTemple Lang (2024)\n\n\nreticulate\n1.39.0\nUshey, Allaire, and Tang (2024)\n\n\nrmarkdown\n2.29\n(rmarkdo?)….\n\n\nscDblFinder\n1.18.0\nGermain et al. (2022)\n\n\nSeurat\n5.1.0\n(Seurat2?)….\n\n\nSingleCellExperiment\n1.26.0\n(SingleC?)….\n\n\ntidyverse\n2.0.0\nWickham et al. (2019)\n\n\n\n\n\n\n\nPrevious work\n\nMary Piper, Meeta Mistry, Jihe Liu, William Gammerdinger, & Radhika Khetani. (2022, January 6). hbctraining/scRNA-seq_online: scRNA-seq Lessons from HCBC (first release). Zenodo. https://doi.org/10.5281/zenodo.5826256.\nI. Lekk, V. Duboc, A. Faro, S. Nicolaou, P. Blader and S.W. Wilson. Sox1a mediates the ability of the parapineal to impart habenular left-right asymmetry. eLife (2019), e47376, 8, https://doi.org/10.7554/eLife.47376"
  },
  {
    "objectID": "session.html#ensembl-annotations",
    "href": "session.html#ensembl-annotations",
    "title": "Session",
    "section": "Ensembl annotations",
    "text": "Ensembl annotations\nUseful to have gene annotations in CSV format at hand, which can be called into the analysis anytime.\nlibrary(AnnotationHub)\nlibrary(ensembldb)\n# Connect to AnnotationHub\nah &lt;- AnnotationHub()\n# Access the Ensembl database for organism\nahDb &lt;- query(ah, \n              pattern = c(\"Danio rerio\", \"EnsDb\"), \n              ignore.case = TRUE)\n# Acquire the latest annotation files\nid &lt;- ahDb %&gt;%\n  mcols() %&gt;%\n  rownames() %&gt;%\n  tail(n = 1)\n# Download the appropriate Ensembldb database\nedb &lt;- ah[[id]]\n# Extract gene-level information from database\nannotations &lt;- genes(edb, \n                     return.type = \"data.frame\")\n# Select annotations of interest\nannotations &lt;- annotations %&gt;%\n  dplyr::select(gene_id, gene_name, seq_name, gene_biotype, description)\n# Save for later use\nwrite.csv(annotations, file=\"./ensembl_annotations.csv\")"
  },
  {
    "objectID": "session.html#references",
    "href": "session.html#references",
    "title": "Session",
    "section": "References",
    "text": "References\n\nMary Piper, Meeta Mistry, Jihe Liu, William Gammerdinger, & Radhika Khetani. (2022, January 6). hbctraining/scRNA-seq_online: scRNA-seq Lessons from HCBC (first release). Zenodo. https://doi.org/10.5281/zenodo.5826256."
  },
  {
    "objectID": "Aim1.html#scrna-seq-analysis-in-seurat",
    "href": "Aim1.html#scrna-seq-analysis-in-seurat",
    "title": "The parapineal ‘cell type’",
    "section": "scRNA-seq analysis in Seurat",
    "text": "scRNA-seq analysis in Seurat\n\nLoad cell x gene matrices\n\npath1 &lt;- \"/home/chongmorrison/Dropbox/VCM-StarBook/ResearchProjects/parapineal/preprocessing/foxd3flhGFP/cellranger7.1.0_Lawson/filtered_feature_bc_matrix\"\npath2 &lt;- \"/home/chongmorrison/Dropbox/VCM-StarBook/ResearchProjects/parapineal/preprocessing/foxd3flhGFP/starsolo2.7.10b_ens107/filtered_EM\"\n\n# Create Seurat objects\ncr_law &lt;- CreateSeuratObject(Read10X(path1), project=\"CellRanger-Lawson\")\n\nWarning: Feature names cannot have underscores ('_'), replacing with dashes\n('-')\n\nss_e107 &lt;- CreateSeuratObject(ReadSTARsolo(path2), project=\"STARsolo-ens107\")\n\nWarning: Feature names cannot have underscores ('_'), replacing with dashes\n('-')\n\n\n\n# 4770 cells x 36353 genes\nncol(cr_law)\n\n[1] 4770\n\nnrow(cr_law)\n\n[1] 36353\n\n# 4536 cells x 32522 genes\nncol(ss_e107)\n\n[1] 4536\n\nnrow(ss_e107)\n\n[1] 32522\n\n\n\n\nFilter genes\n\n# Extract counts\ncounts &lt;- LayerData(cr_law, layer = \"counts\")\n# Output a logical matrix specifying for each gene on whether or not there are more than zero counts per cell\nnonzero &lt;- counts &gt; 0\n# Sums all TRUE values and returns TRUE if more than 5 TRUE values per gene\nkeep_genes &lt;- Matrix::rowSums(nonzero) &gt;= 5\n# Only keeping those genes expressed in more than 5 cells\nfiltered_counts &lt;- counts[keep_genes, ]\n# Assign to Seurat object (make new SeuratObject)\ncr_law &lt;- CreateSeuratObject(filtered_counts, meta.data = cr_law@meta.data)\n# 4770 cells x 24969 genes\nncol(cr_law)\n\n[1] 4770\n\nnrow(cr_law)\n\n[1] 24969\n\ncounts &lt;- LayerData(ss_e107, layer = \"counts\")\nnonzero &lt;- counts &gt; 0\nkeep_genes &lt;- Matrix::rowSums(nonzero) &gt;= 5\nfiltered_counts &lt;- counts[keep_genes, ]\nss_e107 &lt;- CreateSeuratObject(filtered_counts, meta.data = ss_e107@meta.data)\n# 4536 cells x 23946 genes\nncol(ss_e107) \n\n[1] 4536\n\nnrow(ss_e107)\n\n[1] 23946\n\n\n\n\nCompute additional metrics - percent.mito, ribo, complexity\n\ncr_law$percent.mt &lt;- PercentageFeatureSet(cr_law, pattern = \"^mt-\")\ncr_law$log10GenesPerUMI &lt;- log10(cr_law$nFeature_RNA) / log10(cr_law$nCount_RNA)\ncr_law$percent.ribo &lt;- PercentageFeatureSet(cr_law, pattern =\"^rps\") + \n  PercentageFeatureSet(cr_law, pattern =\"^rpl\")\n\nss_e107$percent.mt &lt;- PercentageFeatureSet(ss_e107, pattern = \"^mt-\")\nss_e107$log10GenesPerUMI &lt;- log10(ss_e107$nFeature_RNA) / log10(ss_e107$nCount_RNA)\nss_e107$percent.ribo &lt;- PercentageFeatureSet(ss_e107, pattern =\"^rps\") + \n  PercentageFeatureSet(ss_e107, pattern =\"^rpl\")\n\n\n\nCompute cell cycle scores\n\nObtain cell cycle genes\n\ncell_cycle_genes &lt;- read.csv(text = RCurl::getURL(\"https://raw.githubusercontent.com/hbc/tinyatlas/master/cell_cycle/Danio_rerio.csv\"))\n# call in Ensembl annotations\nannotations &lt;- read.csv('./ensembl_annotations.csv', header=TRUE, row.names=1)\n# make a dataframe of cell cycle markers\ncell_cycle_markers &lt;- dplyr::left_join(cell_cycle_genes, annotations, by = c(\"geneID\" = \"gene_id\"))\n\ns_genes &lt;- cell_cycle_markers %&gt;%\n  dplyr::filter(phase == \"S\") %&gt;%\n  pull(\"gene_name\")\n\ng2m_genes &lt;- cell_cycle_markers %&gt;%\n  dplyr::filter(phase == \"G2/M\") %&gt;%\n  pull(\"gene_name\")\n\n# Remove non-zebrafish \"CENPF\" and \"CKS2\" from g2m_genes\ng2m_genes &lt;- g2m_genes[!g2m_genes == c(\"CENPF\",\"CKS2\")]\n\nWarning in g2m_genes == c(\"CENPF\", \"CKS2\"): longer object length is not a\nmultiple of shorter object length\n\n\n\n\nCell cycle scoring\n\n# Normalise counts for cell cycle scoring\ncr_law &lt;- NormalizeData(cr_law)\n\nNormalizing layer: counts\n\nss_e107 &lt;- NormalizeData(ss_e107)\n\nNormalizing layer: counts\n\n# Cell cycle scoring\ncr_law &lt;- CellCycleScoring(cr_law, g2m.features = g2m_genes, s.features = s_genes)\nss_e107 &lt;- CellCycleScoring(ss_e107, g2m.features = g2m_genes, s.features = s_genes)\n\n# Add difference between G2M and S phase scores\ncr_law$CC.Difference &lt;- cr_law$S.Score - cr_law$G2M.Score\nss_e107$CC.Difference &lt;- ss_e107$S.Score - ss_e107$G2M.Score\n\n\n\n\nCell filtering?\nIn a lot of cases, studies, example workflows etc. ‘poor’ quality cells are filtered out based on arbitrary metrics e.g. number of transcripts/genes suggestive of multiplets, percentage mitochondrial transcripts suggestive of dying cells. I judge these to be sound reasoning points…if you truly know the cellular composition of the dataset. Unlike gene-level filtering where you only make an a priori definition of an ‘expressed’ gene i.e. in at least X number of cells, cell filtering based on biological conditions dictated by the metrics mentioned above is more nuanced and (I believe) could introduce unnecessary bias and/or risk losing ‘good’ cells.\nTherefore, for this novel dataset, I take a quasi-unbiased approach :\n\nCheck that *most* cells are largely healthy i.e. percent.mt &lt; 5\n\ndittoPlot(cr_law, \"percent.mt\", group.by = \"Phase\",\n          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n          main = \"PercentageFeatureSet(^mt-), cr_law\")\n\n\n\n\n\ndittoPlot(ss_e107, \"percent.mt\", group.by = \"Phase\",\n          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n          main = \"PercentageFeatureSet(^mt-), ss_e107\")\n\n\n\n\nPerform dimensional reduction i.e. clustering on all cells, then\n\nCheck that potential multiplets are not forming spurious clusters, and are distributed across all called clusters\nAlso check that other ‘uninteresting’ metrics are not forming spurious clusters"
  },
  {
    "objectID": "Aim1.html#dimensional-reductionclustering",
    "href": "Aim1.html#dimensional-reductionclustering",
    "title": "The parapineal ‘cell type’",
    "section": "Dimensional reduction/clustering",
    "text": "Dimensional reduction/clustering\n\nSCTransform (“normalise, find variable genes, regress unwanted variation”)\nI previously explored the data to check if there was significant variation between the cell types driven by ribosomal/mitochondrial content. See Supplementary Section 1 (in progress)\nThere was clear variation being driven by cell cycle phase. This was expected given a neuronal-enriched population at this developmental stage.\nAltogether these inform the SCTransform parameters, where CC.Difference is used instead of Phase to maintain the separation between progenitors and non-cycling cells :\n\nDefaultAssay(cr_law) &lt;- \"RNA\"\ncr_law &lt;- SCTransform(cr_law,\n                     vars.to.regress = c(\"percent.ribo\", \"percent.mt\", \"CC.Difference\"),\n                     vst.flavor=\"v2\")\n\nRunning SCTransform on assay: RNA\n\n\nRunning SCTransform on layer: counts\n\n\nvst.flavor='v2' set. Using model with fixed slope and excluding poisson genes.\n\n\nVariance stabilizing transformation of count matrix of size 24969 by 4770\n\n\nModel formula is y ~ log_umi\n\n\nGet Negative Binomial regression parameters per gene\n\n\nUsing 2000 genes, 4770 cells\n\n\nFound 16 outliers - those will be ignored in fitting/regularization step\n\n\nSecond step: Get residuals using fitted parameters for 24969 genes\n\n\nComputing corrected count matrix for 24969 genes\n\n\nCalculating gene attributes\n\n\nWall clock passed: Time difference of 15.94711 secs\n\n\nDetermine variable features\n\n\nRegressing out percent.ribo, percent.mt, CC.Difference\n\n\nCentering data matrix\n\n\nSet default assay to SCT\n\nDefaultAssay(ss_e107) &lt;- \"RNA\"\nss_e107 &lt;- SCTransform(ss_e107,\n                       vars.to.regress = c(\"percent.ribo\", \"percent.mt\", \"CC.Difference\"),\n                       vst.flavor=\"v2\")\n\nRunning SCTransform on assay: RNA\n\n\nRunning SCTransform on layer: counts\n\n\nvst.flavor='v2' set. Using model with fixed slope and excluding poisson genes.\n\n\nVariance stabilizing transformation of count matrix of size 23946 by 4536\n\n\nModel formula is y ~ log_umi\n\n\nGet Negative Binomial regression parameters per gene\n\n\nUsing 2000 genes, 4536 cells\n\n\nFound 20 outliers - those will be ignored in fitting/regularization step\n\n\nSecond step: Get residuals using fitted parameters for 23946 genes\n\n\nComputing corrected count matrix for 23946 genes\n\n\nCalculating gene attributes\n\n\nWall clock passed: Time difference of 13.17915 secs\n\n\nDetermine variable features\n\n\nRegressing out percent.ribo, percent.mt, CC.Difference\n\n\nCentering data matrix\n\n\nSet default assay to SCT\n\n\n\n\n‘Unsupervised’ Clustering\nAs clustering is more an art than exact science, I empirically determined the main parameters - algorithm, npcs, k.param, and resolution - and compared the result between the two pre-processing workflows/Seurat objects.\n‘Picking’ the number of Principal Component dimensions npcs\n\ncr_law &lt;- RunPCA(cr_law, npcs = 60)\n\nPC_ 1 \nPositive:  sncb, stmn1b, tuba1c, ckbb, gap43, nrxn2a, elavl4, nrxn1a, rbfox1, onecut1 \n       stx1b, tmsb, ywhag2, gng3, TENM2, elavl3, BX548062.1, GFP, robo2, snap25a \n       stmn2a, c1ql4a, celf4, id4, lhx9, raly, vamp2, mllt11, atp6v0cb, stmn4 \nNegative:  si:ch211-263k4.2, gli2a, tns1b, jarid2b, lmx1bb, pard3bb, dock1, foxp4, zbtb16a, ctdp1 \n       znrf3, ror1, cachd1, pax5, pdzrn3b, cdon, tenm4, lama5, rxraa, gli3 \n       BX571942.1, diaph3, zeb2a, BX005454.1, trps1, slc35f1, dacha, nxn, hs6st1a, si:dkey-112m2.1 \nPC_ 2 \nPositive:  pax5, efna2a, tenm4, FP016248.1, ncam1a, her4.2, pax2b, lama5, dacha, nkain2 \n       LOC100537384, lmx1bb, en1b, efnb3b, bcam, en2b, her4.1, pax3a, unc5c, si:ch211-57n23.4 \n       elavl3, BX571942.1, ctnna2, pax2a, nova2, sema5ba, her15.1, LOC100535496, znf423, CR847968.1 \nNegative:  alx4a, lrmda, mcamb, trpm1b, ltk, nrp2a, alx4b, adam19a, rxraa, pnp4a \n       aqp1a.1, gpnmb, si:ch211-243a20.3, sox5, sox10, impdh1b, cdh11, pcbp4, kank3, ttyh2l \n       gab2, pdzrn3b, anks1b, atp11a, apoda.1, defbl1, gmps, paics, sox6, pcdh9 \nPC_ 3 \nPositive:  CACNA2D1, sez6b, ptprfb, efna3a, znf804a, lrfn5a, lrp1bb, cacna1ha, BX548062.1, grm8a \n       mdga1, unc5a, znf536, TENM2, cntn3a.2, GRIK2, raly, grik4, cpne5b, nlgn1 \n       nrxn2a, b4galnt4a, rbfox3b, kirrel3a, nav3, robo2, rbfox1, dscamb, GALNTL6, igsf21a \nNegative:  sncb, islr2, gap43, tuba1c, gng3, mllt11, stmn1b, atp6v0cb, tmsb2, ywhag2 \n       cplx2l, stmn2a, zgc:65894, cotl1, vamp2, rtn1b, gapdhs, inab, tuba1a, rtn1a \n       bsg, tmsb, eno1a, tpi1b, map1ab, aldocb, pou3f1, elavl4, rnasekb, tac1 \nPC_ 4 \nPositive:  lhx9, raly, mdga1, znf804a, r3hdm1, rbfox3b, nr2f2, sez6b, ckbb, onecut1 \n       GRIK2, chrm4a, lrfn5a, lhx2b, cpne7, cacna1ha, pdzrn4, grin2aa, evx2, GFP \n       atp2b1a, igsf21a, CACNA2D1, mab21l1, cntn3a.2, si:ch211-215d8.2, caln2, LOC110439372, grm8a, samd10b \nNegative:  celf5a, si:dkeyp-14d3.1, epha4b, thsd7ba, islr2, elavl4, pcdh9, cacna1i, edil3a, nlgn3a \n       msi2b, ntm, syt1a, rnf220a, neto1l, sema6bb, cadm1a, LOC100536716, CR847968.1, NPAS3 \n       fam19a5a, enox2, ptprga, cntn4, brinp1, si:dkey-35m8.1, rab6ba, meis2a, plxna4, sox6 \nPC_ 5 \nPositive:  elavl3, pax5, pax7a, ctnna2, nkain2, efna2a, si:ch211-57n23.4, plxna2, pax2b, dlb \n       her4.2, en1b, thsd7aa, ebf3a, CR847968.1, nhlh2, en2b, pax2a, ebf2, srrm4 \n       FP016248.1, hes6, LOC100537384, insm1b, sox11b, pdlim5a, XLOC-003692, si:ch73-386h18.1, myt1b, LOC101882472 \nNegative:  lmx1bb, si:ch211-263k4.2, si:dkey-112m2.1, fabp11a, rspo2, ptprub, si:ch211-285f17.1, BX005454.1, brinp2, slit3 \n       cdon, zgc:162939, CR848683.2, wnt4a, cyp26c1, rspo3, lrp2a, ntm, epha7, kirrel3a \n       lzts2a, gli2a, wnt3a, cachd1, unc5b, pax6a, unc5a, tnfrsf19, pawr, cldn5a \n\nElbowPlot(cr_law, ndims=60, reduction=\"pca\")\n\n\n\nss_e107 &lt;- RunPCA(ss_e107, npcs = 60)\n\nPC_ 1 \nPositive:  gli2a, jarid2b, si:ch211-263k4.2, lmx1bb, pard3bb, dock1, zbtb16a, ctdp1, foxp4, znrf3 \n       CT027638.1, cachd1, ror1, cdon, pdzrn3b, tenm4, qkib, BX005454.1, pax5, gli3 \n       BX571942.1, trps1, lama5, dacha, zeb2a, rxraa, efnb3b, nxn, hs6st1a, fbxw7 \nNegative:  sncb, ckbb, tuba1c, gap43, elavl4, nrxn1a, nrxn2a, rbfox1, tmsb, stx1b \n       paqr7b, ywhag2, gng3, GFP, tuba1a, TENM2, snap25a, onecut1, stmn2a, rtn1a \n       elavl3, tubb5, id4, mllt11, atp6v0cb, lhx9, stmn1b, raly, cadm4, robo2.1 \nPC_ 2 \nPositive:  alx4a, lrmda, trpm1b, mcamb, nrp2a, ltk, alx4b, pnp4a, aqp1a.1, gpnmb \n       si:ch211-243a20.3, rxraa, impdh1b, sox10, sox5, cdh11, ttyh2l, kank3, rab32a, gab2 \n       apoda.1, defbl1, gmps, pcbp4, paics, atp11a, pdzrn3b, sox6, ldhba, atic \nNegative:  pax5, efna2a, ncam1a, tenm4, FP016248.1, dacha, her4.2, nkain2, ctnna2, sema5ba \n       lama5, pax2b, lmx1bb, ENSDARG00000059707, efnb3b, adgrb3, bcam, BX571942.1, pax3a, en1b \n       BX465834.1, pou2f2a.1, her4.1, BX005454.1, en2b, brsk2b, nova2, cdon, BX663520.2, pax2a \nPC_ 3 \nPositive:  CACNA2D1, efna3a, TENM2, ptprfb, sez6b, znf536, rbms3, znf804a, unc5a, nrxn1a \n       nrxn2a, cacna1ha, lrfn5a, grm8a, dscamb, b4galnt4a, cpne5b, chl1b, kcnma1a, mdga1 \n       gria3b, cadm4, nrg3b, nlgn1, meis1b, GRIK2, raly, rbfox1, SRCIN1, LRFN2 \nNegative:  tuba1c, sncb, gap43, gng3, tuba1a, mllt11, ywhag2, atp6v0cb, tmsb, paqr7b \n       tmsb2, zgc:65894, stmn2a, islr2, rtn1a, si:dkey-276j7.1, ckbb, vamp2, stmn1b, cplx2l \n       bsg, cotl1, rtn1b, tubb5, gapdhs, rnasekb, hmgb3a, zgc:153426, pou3f1, tpi1b \nPC_ 4 \nPositive:  raly, sez6b, mdga1, znf804a, GRIK2, lhx9, cacna1ha, lrfn5a, grin2aa, rbfox3b \n       CACNA2D1, cpne7, r3hdm1, igsf21a, chrm4a, grm8a, nr2f2, pdzrn4, LRFN2, samd10b \n       caln2, evx2, cntn3a.2, robo2.1, atp2b1a, lhx2b, rbfox1, GALNTL6, si:ch211-215d8.2, cpne5b \nNegative:  celf5a, TMEM132C, islr2, msi2b, elavl4, thsd7ba, epha4b, cadm1a, CR847968.1, edil3a \n       ntm, rnf220a, cacna1ia, nlgn3a, sox6, syt1a, neto1l, enox2, ebf3a, tafa5a \n       map1ab, plxna3, khdrbs2, ptprga, meis2a.1, snap25b, atp1b1b, plxna4, isl1, pcp4a \nPC_ 5 \nPositive:  elavl3, pax7a, pax5, efna2a, nkain2, ctnna2, her4.2, dlb, pax2b, en1b \n       ebf3a.1, gadd45gb.1, nhlh2, plxna2, pax2a, en2b, thsd7aa, sox11b, ebf2, srrm4 \n       FP016248.1, hes6, CR847968.1, si:ch73-386h18.1, insm1b, myt1b, her4.2.1, abhd6a, scrt2, pou2f2a.1 \nNegative:  lmx1bb, TMEM132C.1, fabp11a, si:ch211-263k4.2, rspo2, BX005454.1, ptprub, si:ch211-285f17.1, brinp2, slit3 \n       cdon, aopep, CR848683.2, wnt4, ntm, rspo3, cyp26c1, gli2a, lrp2a, epha7 \n       kirrel3a, wnt3a, cachd1, unc5a, unc5b, pax6a, pax6b, pawr, tnfrsf19, barhl2 \n\nElbowPlot(ss_e107, ndims=60, reduction=\"pca\")\n\n\n\n\nBased on the elbow plots above I went with npcs = 40. k.param is kept at the default 20, and the Leiden algorithm = 4 is selected.\n\ncr_law &lt;- RunPCA(cr_law, npcs = 40) %&gt;%\n  FindNeighbors(dims = 1:40) %&gt;%\n  FindClusters(algorithm = 4, resolution = c(1.0), method=\"igraph\") %&gt;%\n  RunUMAP(dims = 1:40, n.neighbors = 20) # to match default k.param=20\n\nPC_ 1 \nPositive:  sncb, stmn1b, tuba1c, ckbb, gap43, nrxn2a, elavl4, nrxn1a, rbfox1, onecut1 \n       stx1b, tmsb, ywhag2, gng3, TENM2, elavl3, BX548062.1, GFP, robo2, snap25a \n       stmn2a, c1ql4a, celf4, id4, lhx9, raly, vamp2, mllt11, atp6v0cb, stmn4 \nNegative:  si:ch211-263k4.2, gli2a, tns1b, jarid2b, lmx1bb, pard3bb, dock1, foxp4, zbtb16a, ctdp1 \n       znrf3, ror1, cachd1, pax5, pdzrn3b, cdon, tenm4, lama5, rxraa, gli3 \n       BX571942.1, diaph3, zeb2a, BX005454.1, trps1, slc35f1, dacha, nxn, hs6st1a, si:dkey-112m2.1 \nPC_ 2 \nPositive:  pax5, efna2a, tenm4, FP016248.1, ncam1a, her4.2, pax2b, lama5, dacha, nkain2 \n       LOC100537384, lmx1bb, en1b, efnb3b, bcam, en2b, her4.1, pax3a, unc5c, si:ch211-57n23.4 \n       elavl3, BX571942.1, ctnna2, pax2a, nova2, sema5ba, her15.1, LOC100535496, znf423, CR847968.1 \nNegative:  alx4a, lrmda, mcamb, trpm1b, ltk, nrp2a, alx4b, adam19a, rxraa, pnp4a \n       aqp1a.1, gpnmb, si:ch211-243a20.3, sox5, sox10, impdh1b, cdh11, pcbp4, kank3, ttyh2l \n       gab2, pdzrn3b, anks1b, atp11a, apoda.1, defbl1, gmps, paics, sox6, pcdh9 \nPC_ 3 \nPositive:  CACNA2D1, sez6b, ptprfb, efna3a, znf804a, lrfn5a, lrp1bb, cacna1ha, BX548062.1, grm8a \n       mdga1, unc5a, znf536, TENM2, cntn3a.2, GRIK2, raly, grik4, cpne5b, nlgn1 \n       nrxn2a, b4galnt4a, rbfox3b, kirrel3a, nav3, robo2, rbfox1, dscamb, GALNTL6, igsf21a \nNegative:  sncb, islr2, gap43, tuba1c, gng3, mllt11, stmn1b, atp6v0cb, tmsb2, ywhag2 \n       cplx2l, stmn2a, zgc:65894, cotl1, vamp2, rtn1b, gapdhs, inab, tuba1a, rtn1a \n       bsg, tmsb, eno1a, tpi1b, map1ab, aldocb, pou3f1, elavl4, rnasekb, tac1 \nPC_ 4 \nPositive:  celf5a, si:dkeyp-14d3.1, epha4b, thsd7ba, islr2, elavl4, pcdh9, cacna1i, edil3a, nlgn3a \n       msi2b, ntm, syt1a, rnf220a, neto1l, sema6bb, cadm1a, LOC100536716, CR847968.1, NPAS3 \n       fam19a5a, enox2, ptprga, cntn4, brinp1, si:dkey-35m8.1, rab6ba, meis2a, plxna4, sox6 \nNegative:  lhx9, raly, mdga1, znf804a, r3hdm1, rbfox3b, nr2f2, sez6b, ckbb, onecut1 \n       GRIK2, chrm4a, lrfn5a, lhx2b, cpne7, cacna1ha, pdzrn4, grin2aa, evx2, GFP \n       atp2b1a, igsf21a, CACNA2D1, mab21l1, cntn3a.2, si:ch211-215d8.2, caln2, LOC110439372, grm8a, samd10b \nPC_ 5 \nPositive:  elavl3, pax5, pax7a, ctnna2, nkain2, efna2a, si:ch211-57n23.4, plxna2, pax2b, dlb \n       her4.2, en1b, thsd7aa, ebf3a, CR847968.1, nhlh2, en2b, pax2a, ebf2, srrm4 \n       FP016248.1, hes6, LOC100537384, insm1b, sox11b, pdlim5a, XLOC-003692, si:ch73-386h18.1, myt1b, LOC101882472 \nNegative:  lmx1bb, si:ch211-263k4.2, si:dkey-112m2.1, fabp11a, rspo2, ptprub, si:ch211-285f17.1, BX005454.1, brinp2, slit3 \n       cdon, zgc:162939, CR848683.2, wnt4a, cyp26c1, rspo3, lrp2a, ntm, epha7, kirrel3a \n       lzts2a, gli2a, wnt3a, cachd1, unc5b, pax6a, unc5a, tnfrsf19, pawr, cldn5a \n\n\nComputing nearest neighbor graph\n\n\nComputing SNN\n\n\n16:44:52 UMAP embedding parameters a = 0.9922 b = 1.112\n\n\n16:44:52 Read 4770 rows and found 40 numeric columns\n\n\n16:44:52 Using Annoy for neighbor search, n_neighbors = 20\n\n\n16:44:52 Building Annoy index with metric = cosine, n_trees = 50\n\n\n0%   10   20   30   40   50   60   70   80   90   100%\n\n\n[----|----|----|----|----|----|----|----|----|----|\n\n\n**************************************************|\n16:44:52 Writing NN index file to temp file /tmp/Rtmp77BlJC/file6c3488acd86\n16:44:52 Searching Annoy index using 1 thread, search_k = 2000\n16:44:53 Annoy recall = 100%\n16:44:53 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 20\n16:44:54 Initializing from normalized Laplacian + noise (using RSpectra)\n16:44:54 Commencing optimization for 500 epochs, with 130740 positive edges\n16:44:57 Optimization finished\n\nss_e107 &lt;- RunPCA(ss_e107, npcs = 40) %&gt;%\n  FindNeighbors(dims = 1:40) %&gt;%\n  FindClusters(algorithm = 4, resolution = c(1.0), method=\"igraph\") %&gt;%\n  RunUMAP(dims = 1:40, n.neighbors = 20) # to match default k.param=20\n\nPC_ 1 \nPositive:  gli2a, jarid2b, si:ch211-263k4.2, lmx1bb, pard3bb, dock1, zbtb16a, ctdp1, foxp4, znrf3 \n       CT027638.1, cachd1, ror1, cdon, pdzrn3b, tenm4, qkib, BX005454.1, pax5, gli3 \n       BX571942.1, trps1, lama5, dacha, zeb2a, rxraa, efnb3b, nxn, hs6st1a, fbxw7 \nNegative:  sncb, ckbb, tuba1c, gap43, elavl4, nrxn1a, nrxn2a, rbfox1, tmsb, stx1b \n       paqr7b, ywhag2, gng3, GFP, tuba1a, TENM2, snap25a, onecut1, stmn2a, rtn1a \n       elavl3, tubb5, id4, mllt11, atp6v0cb, lhx9, stmn1b, raly, cadm4, robo2.1 \nPC_ 2 \nPositive:  alx4a, lrmda, trpm1b, mcamb, nrp2a, ltk, alx4b, pnp4a, aqp1a.1, gpnmb \n       si:ch211-243a20.3, rxraa, impdh1b, sox10, sox5, cdh11, ttyh2l, kank3, rab32a, gab2 \n       apoda.1, defbl1, gmps, pcbp4, paics, atp11a, pdzrn3b, sox6, ldhba, atic \nNegative:  pax5, efna2a, ncam1a, tenm4, FP016248.1, dacha, her4.2, nkain2, ctnna2, sema5ba \n       lama5, pax2b, lmx1bb, ENSDARG00000059707, efnb3b, adgrb3, bcam, BX571942.1, pax3a, en1b \n       BX465834.1, pou2f2a.1, her4.1, BX005454.1, en2b, brsk2b, nova2, cdon, BX663520.2, pax2a \nPC_ 3 \nPositive:  CACNA2D1, efna3a, TENM2, ptprfb, sez6b, znf536, rbms3, znf804a, unc5a, nrxn1a \n       nrxn2a, cacna1ha, lrfn5a, grm8a, dscamb, b4galnt4a, cpne5b, chl1b, kcnma1a, mdga1 \n       gria3b, cadm4, nrg3b, nlgn1, meis1b, GRIK2, raly, rbfox1, SRCIN1, LRFN2 \nNegative:  tuba1c, sncb, gap43, gng3, tuba1a, mllt11, ywhag2, atp6v0cb, tmsb, paqr7b \n       tmsb2, zgc:65894, stmn2a, islr2, rtn1a, si:dkey-276j7.1, ckbb, vamp2, stmn1b, cplx2l \n       bsg, cotl1, rtn1b, tubb5, gapdhs, rnasekb, hmgb3a, zgc:153426, pou3f1, tpi1b \nPC_ 4 \nPositive:  celf5a, TMEM132C, islr2, msi2b, elavl4, thsd7ba, epha4b, cadm1a, CR847968.1, edil3a \n       ntm, rnf220a, cacna1ia, nlgn3a, sox6, syt1a, neto1l, enox2, ebf3a, tafa5a \n       map1ab, plxna3, khdrbs2, ptprga, meis2a.1, snap25b, atp1b1b, plxna4, isl1, pcp4a \nNegative:  raly, sez6b, mdga1, znf804a, GRIK2, lhx9, cacna1ha, lrfn5a, grin2aa, rbfox3b \n       CACNA2D1, cpne7, r3hdm1, igsf21a, chrm4a, grm8a, nr2f2, pdzrn4, LRFN2, samd10b \n       caln2, evx2, cntn3a.2, robo2.1, atp2b1a, lhx2b, rbfox1, GALNTL6, si:ch211-215d8.2, cpne5b \nPC_ 5 \nPositive:  lmx1bb, TMEM132C.1, fabp11a, si:ch211-263k4.2, rspo2, BX005454.1, ptprub, si:ch211-285f17.1, brinp2, slit3 \n       cdon, aopep, CR848683.2, wnt4, ntm, rspo3, cyp26c1, gli2a, lrp2a, epha7 \n       kirrel3a, wnt3a, cachd1, unc5a, unc5b, pax6a, pax6b, pawr, tnfrsf19, barhl2 \nNegative:  elavl3, pax7a, pax5, efna2a, nkain2, ctnna2, her4.2, dlb, pax2b, en1b \n       ebf3a.1, gadd45gb.1, nhlh2, plxna2, pax2a, en2b, thsd7aa, sox11b, ebf2, srrm4 \n       FP016248.1, hes6, CR847968.1, si:ch73-386h18.1, insm1b, myt1b, her4.2.1, abhd6a, scrt2, pou2f2a.1 \nComputing nearest neighbor graph\nComputing SNN\n16:45:00 UMAP embedding parameters a = 0.9922 b = 1.112\n16:45:00 Read 4536 rows and found 40 numeric columns\n16:45:00 Using Annoy for neighbor search, n_neighbors = 20\n16:45:00 Building Annoy index with metric = cosine, n_trees = 50\n0%   10   20   30   40   50   60   70   80   90   100%\n[----|----|----|----|----|----|----|----|----|----|\n**************************************************|\n16:45:01 Writing NN index file to temp file /tmp/Rtmp77BlJC/file6c3459635dbd\n16:45:01 Searching Annoy index using 1 thread, search_k = 2000\n16:45:01 Annoy recall = 100%\n16:45:02 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 20\n16:45:02 Initializing from normalized Laplacian + noise (using RSpectra)\n16:45:02 Commencing optimization for 500 epochs, with 122026 positive edges\n16:45:05 Optimization finished\n\n\nSave Seurat objects to make it easier to load later without re-running all the above:\n\n# Set DefaultAssay (and slot) and save objects for visualisation\nDefaultAssay(cr_law) &lt;- \"RNA\"\ncr_law &lt;- NormalizeData(cr_law)\n\nNormalizing layer: counts\n\nDefaultAssay(ss_e107) &lt;- \"RNA\"\nss_e107 &lt;- NormalizeData(ss_e107)\n\nNormalizing layer: counts\n\nsave(cr_law, file=\"./foxd3flh-5k_cr-law.RData\")\nsave(ss_e107, file=\"./foxd3flh-5k_ss-e107.RData\")"
  },
  {
    "objectID": "Aim1.html#visualise-and-explore-clustering-results-with-dittoseq",
    "href": "Aim1.html#visualise-and-explore-clustering-results-with-dittoseq",
    "title": "The parapineal ‘cell type’",
    "section": "Visualise and explore clustering results with dittoSeq",
    "text": "Visualise and explore clustering results with dittoSeq\n\nUMAP reduction\n\ndittoDimPlot(cr_law, \"SCT_snn_res.1\", reduction.use=\"umap\",\n             main=\"CellRanger7.1.0\",\n             sub=\"Lawson2020\",\n             legend.title=\"clusters\",\n             do.label=TRUE)\n\n\n\n\n\ndittoDimPlot(ss_e107, \"SCT_snn_res.1\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b\",\n             sub=\"ensembl107\",\n             legend.title=\"clusters\",\n             do.label=TRUE)"
  },
  {
    "objectID": "Aim1.html#identify-epiphysis-clusters",
    "href": "Aim1.html#identify-epiphysis-clusters",
    "title": "The parapineal ‘cell type’",
    "section": "Identify epiphysis clusters",
    "text": "Identify epiphysis clusters\nThe epiphysis shares several of its known i.e. well-characterised markers with other neuronal/cranial cell types. For example, bsx is also expressed in the hypothalamus, noto is also expressed in the telencephalon, otx5 is also expressed in the retina. Inferring the epiphysis clusters from any of these genes alone is futile:\n\n# Genes that are well known to be expressed in the epiphysis\nmarkers &lt;- c(\"bsx\", \"noto\", \"otx5\")\n\n\ndittoPlotVarsAcrossGroups(cr_law, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"cr_law (bsx/noto/otx5)\", summary.fxn = max, adjustment = NULL)\n\n\n\n\n\ndittoPlotVarsAcrossGroups(ss_e107, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"ss_e107 (bsx/noto/otx5)\", summary.fxn = max, adjustment = NULL)\n\n\n\n\nI reasoned that, by using instead the mean expression values of these three genes combined, one could eliminate clusters that are least likely to be epiphysis cells.\nFor example, an epiphysis cell is likely to co-express bsx (1) + noto (1) + otx5 (1) = 3. Mean expression value = 3 / 3 = 1.\nOn the other hand, a retina cell would not express bsx ( &lt; 1) + noto (&lt; 1), but express + otx5 (1) = &lt; 3. Mean expression value = &lt;3 / 3 = &lt; 1.\n\ndittoPlotVarsAcrossGroups(cr_law, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"cr_law (mean of bsx + noto + otx5)\")\n\n\n\n\n\ndittoPlotVarsAcrossGroups(ss_e107, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"ss_e107 (mean of bsx + noto + otx5)\")\n\n\n\n\nThis worked quite well, and one can appreciate two clusters-of-interest likely to be epiphysis cells. Furthermore, this observation is robust and reproducible from cell x gene matrices generated using the two dissimilar preprocessing pipelines.\n\ncr_law clusters-of-interest = 3 and 18\nss_e107 clusters-of-interest = 2 and 18\n\nLet’s now look at sox1a that is expressed in the parapineal as it emerges from the anterior pineal region (Lekk et al. 2019). The following plots show that sox1a expression can be detected in the clusters-of-interest.\n\nmulti_dittoDimPlot(cr_law, c(markers,\"sox1a\"), order=\"increasing\", reduction.use=\"umap\")\n\n\n\n\n\nmulti_dittoDimPlot(ss_e107, c(markers,\"sox1a\"), order=\"increasing\", reduction.use=\"umap\")\n\n\n\n\nAs both matrices consistently produced similar results so far, I am proceeding further with ss_e107 only.\nHow many cells (roughly) are present in the clusters-of-interest? ~250 cells in total.\n\ndittoBarPlot(ss_e107, \"SCT_snn_res.1\", group.by = \"SCT_snn_res.1\",\n             scale = \"count\",\n             cells.use = meta(\"SCT_snn_res.1\", ss_e107) == c(\"2\", \"18\"),\n             main=\"No. of cells\")\n\n\n\n\n\nSanity checks on clustering\nRemember that I did not perform cell filtering prior to clustering (see previous page ‘Cell-filtering?’). To evaluate if the clusters are largely driven by ‘true’ biological heterogeneity, in a qualitative sense:\n\nCheck distribution of multiplets\nI run scDblFinder to identify multiplets:\n\nsce &lt;- SingleCellExperiment(\n  assays = list(counts = as.matrix(LayerData(ss_e107, assay = \"RNA\", layer=\"counts\"))))\n\nlibrary(scDblFinder)\nsce &lt;- scDblFinder(sce, clusters=c(Idents(ss_e107)),\n                   BPPARAM=MulticoreParam(2, RNGseed=1234))\n\n21 clusters\n\n\nCreating ~4410 artificial doublets...\n\n\nDimensional reduction\n\n\nEvaluating kNN...\n\n\nTraining model...\n\n\niter=0, 355 cells excluded from training.\n\n\niter=1, 354 cells excluded from training.\n\n\niter=2, 342 cells excluded from training.\n\n\nThreshold found:0.497\n\n\n369 (8.1%) doublets called\n\ntable(sce$scDblFinder.class) # RESULT = 4184 singlets, 352 doublets (7.8%)\n\n\nsinglet doublet \n   4167     369 \n\n\nNow port the results back to the original ss_e107 object for visualisation. Called doublets are distributed randomly across entire dataset, which is ideal.\n\nss_e107$scDblFinder.class &lt;- sce$scDblFinder.class\n\n\ndittoDimPlot(ss_e107, \"scDblFinder.class\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"class\")\n\n\n\n\n\n\nWhat about other metrics?\n\ndittoDimPlot(ss_e107, \"nCount_RNA\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"nUMI\")\n\n\n\n\n\ndittoDimPlot(ss_e107, \"nFeature_RNA\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"nGenes\")\n\n\n\n\n\ndittoDimPlot(ss_e107, \"percent.ribo\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"% ribosomal transcripts\")\n\n\n\n\n\ndittoDimPlot(ss_e107, \"percent.mt\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"% mitochondrial transcripts\")\n\n\n\n\n\ndittoDimPlot(ss_e107, \"Phase\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"cell cycle\")\n\n\n\n\nThe plots above suggests that the clusters-of-interest 2 and 18 vary from each other by cell cycle phase, and perhaps to subtle differences in the other metrics. This is something to bear in mind when interpreting results based on this clustering."
  },
  {
    "objectID": "Aim1_part1.html",
    "href": "Aim1_part1.html",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "",
    "text": "Using single cell RNA-seq (scRNA-seq), can pineal and parapineal cells be identified from a mixed population regardless of sox1a genotype?\n\n\n\nApproximately 230 heads from ~30-32 hpf larvae were collected. Larvae were of mixed sox1a genotype (hets, homs and wild types) obtained by incrossing sox1a hets.\nHeads were dissociated into single cell suspension for FACS-based enrichment of GFP++/mCherry- cells. GFP labels the epiphysis and other ‘contaminant’ cell types, while mCherry labels ‘contaminant’ cell types only. The mCherry transgene was pre-determined in prior imaging experiments to not label the parapineal organ.\nApproximately 10k sorted events were recorded and collected for scRNA-seq using 10X Genomics 3’ v3.1 GEX chemistry. The library was sequenced to at least 500 million reads, thus yielding a depth of ~100k reads per cell.\n\n\n\nSchematic of experiment design.\n\n\n\n\n\nSession\n\n\n\nTo empirically determine the robustness of called clusters downstream, reads were pre-processed using two different mapper/gene annotation combinations:\n\n10X Genomics CellRanger v7.1.0 + Lawson Lab annotation (Lawson et al., 2020)\n\nThis pipeline maps unique reads only:\n# Preprocessing - Cell Ranger 7.1.0 (unique reads only)\ncellranger count --id=foxd3flhGFP \\\n--transcriptome=/home/ucbtvmr/Scratch/cellranger/mkref/GRCz11_lawson/GRCz11_v4.3.2_GFP_mCherry \\\n--fastqs=/home/ucbtvmr/Scratch/4_scRNAseq/fastq \\\n--sample=VCM2-AK30645-AK6234 \\\n--no-bam\n\nSTARsolo v2.7.10b + Ensembl release 107 annotation\n\nThis pipeline includes multi-mapping reads assigned using EM algorithm:\n# Preprocessing - STARsolo v2.7.10b (with EM multi-mapped reads)\nSTAR --genomeDir /home/ucbtvmr/ensembl_releases/ensembl107/Danio_rerio.genome.GFP.mCherry/star_2.7.9a \\\n--readFilesIn /home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234*in progress**_S1_L002_R2_001.fastq.gz \\\n/home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234_S1_L002_R1_001.fastq.gz \\\n--readFilesCommand zcat \\\n--soloFeatures GeneFull \\\n--soloMultiMappers EM \\\n--clipAdapterType CellRanger4 --outFilterScoreMin 30 \\\n--soloCBwhitelist 3M-february-2018.txt \\\n--soloType CB_UMI_Simple \\\n--soloCBlen 16 \\\n--soloUMIstart 17 \\\n--soloUMIlen 12 \\\n--soloBarcodeReadLength 0 \\\n--soloCellFilter EmptyDrops_CR \\\n--limitOutSJcollapsed 5000000 \\\n--runThreadN 8\n\ncd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107/Solo.out/GeneFull\nmkdir raw_EM\ncd raw_EM\n# move multimapped-containing matrix to /raw_EM\nmv ../raw/UniqueAndMult-EM.mtx .\ncp ../raw/features.tsv .\ncp ../raw/barcodes.tsv .\n# rename multimapped-containing matrix to 'matrix.mtx' for --soloCellFiltering\nmv UniqueAndMult-EM.mtx matrix.mtx\n\n# Change working directory to the one containing Aligned.out.sam\ncd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107\n# Call cells\nSTAR --runMode soloCellFiltering ./Solo.out/GeneFull/raw_EM ./Solo.out/GeneFull/filtered_EM/filtered_EM --soloCellFilter EmptyDrops_CR"
  },
  {
    "objectID": "Aim1_part1.html#identification-of-epiphysis-cells",
    "href": "Aim1_part1.html#identification-of-epiphysis-cells",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "",
    "text": "Using single cell RNA-seq (scRNA-seq), can pineal and parapineal cells be identified from a mixed population regardless of sox1a genotype?\n\n\n\nApproximately 230 heads from ~30-32 hpf larvae were collected. Larvae were of mixed sox1a genotype (hets, homs and wild types) obtained by incrossing sox1a hets.\nHeads were dissociated into single cell suspension for FACS-based enrichment of GFP++/mCherry- cells. GFP labels the epiphysis and other ‘contaminant’ cell types, while mCherry labels ‘contaminant’ cell types only. The mCherry transgene was pre-determined in prior imaging experiments to not label the parapineal organ.\nApproximately 10k sorted events were recorded and collected for scRNA-seq using 10X Genomics 3’ v3.1 GEX chemistry. The library was sequenced to at least 500 million reads, thus yielding a depth of ~100k reads per cell.\n\n\n\nSchematic of experiment design.\n\n\n\n\n\nSession\n\n\n\nTo empirically determine the robustness of called clusters downstream, reads were pre-processed using two different mapper/gene annotation combinations:\n\n10X Genomics CellRanger v7.1.0 + Lawson Lab annotation (Lawson et al., 2020)\n\nThis pipeline maps unique reads only:\n# Preprocessing - Cell Ranger 7.1.0 (unique reads only)\ncellranger count --id=foxd3flhGFP \\\n--transcriptome=/home/ucbtvmr/Scratch/cellranger/mkref/GRCz11_lawson/GRCz11_v4.3.2_GFP_mCherry \\\n--fastqs=/home/ucbtvmr/Scratch/4_scRNAseq/fastq \\\n--sample=VCM2-AK30645-AK6234 \\\n--no-bam\n\nSTARsolo v2.7.10b + Ensembl release 107 annotation\n\nThis pipeline includes multi-mapping reads assigned using EM algorithm:\n# Preprocessing - STARsolo v2.7.10b (with EM multi-mapped reads)\nSTAR --genomeDir /home/ucbtvmr/ensembl_releases/ensembl107/Danio_rerio.genome.GFP.mCherry/star_2.7.9a \\\n--readFilesIn /home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234*in progress**_S1_L002_R2_001.fastq.gz \\\n/home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234_S1_L002_R1_001.fastq.gz \\\n--readFilesCommand zcat \\\n--soloFeatures GeneFull \\\n--soloMultiMappers EM \\\n--clipAdapterType CellRanger4 --outFilterScoreMin 30 \\\n--soloCBwhitelist 3M-february-2018.txt \\\n--soloType CB_UMI_Simple \\\n--soloCBlen 16 \\\n--soloUMIstart 17 \\\n--soloUMIlen 12 \\\n--soloBarcodeReadLength 0 \\\n--soloCellFilter EmptyDrops_CR \\\n--limitOutSJcollapsed 5000000 \\\n--runThreadN 8\n\ncd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107/Solo.out/GeneFull\nmkdir raw_EM\ncd raw_EM\n# move multimapped-containing matrix to /raw_EM\nmv ../raw/UniqueAndMult-EM.mtx .\ncp ../raw/features.tsv .\ncp ../raw/barcodes.tsv .\n# rename multimapped-containing matrix to 'matrix.mtx' for --soloCellFiltering\nmv UniqueAndMult-EM.mtx matrix.mtx\n\n# Change working directory to the one containing Aligned.out.sam\ncd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107\n# Call cells\nSTAR --runMode soloCellFiltering ./Solo.out/GeneFull/raw_EM ./Solo.out/GeneFull/filtered_EM/filtered_EM --soloCellFilter EmptyDrops_CR"
  },
  {
    "objectID": "Aim1_part1.html#scrna-seq-analysis-in-seurat",
    "href": "Aim1_part1.html#scrna-seq-analysis-in-seurat",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "scRNA-seq analysis in Seurat",
    "text": "scRNA-seq analysis in Seurat\n\nLoad cell x gene matrices\n\npath1 &lt;- \"/home/chongmorrison/Dropbox/VCM-StarBook/ResearchProjects/parapineal/preprocessing/foxd3flhGFP/cellranger7.1.0_Lawson/filtered_feature_bc_matrix\"\npath2 &lt;- \"/home/chongmorrison/Dropbox/VCM-StarBook/ResearchProjects/parapineal/preprocessing/foxd3flhGFP/starsolo2.7.10b_ens107/filtered_EM\"\n\nCreate Seurat objects and check nos. of cells and genes\n\ncr_law &lt;- CreateSeuratObject(Read10X(path1), project=\"CellRanger-Lawson\")\n\nWarning: Feature names cannot have underscores ('_'), replacing with dashes\n('-')\n\nss_e107 &lt;- CreateSeuratObject(ReadSTARsolo(path2), project=\"STARsolo-ens107\")\n\nWarning: Feature names cannot have underscores ('_'), replacing with dashes\n('-')\n\n\n\n# 4770 cells x 36353 genes\nncol(cr_law)\n\n[1] 4770\n\nnrow(cr_law)\n\n[1] 36353\n\n# 4536 cells x 32522 genes\nncol(ss_e107)\n\n[1] 4536\n\nnrow(ss_e107)\n\n[1] 32522\n\n\n\n\nFilter genes\n\n# Extract counts\ncounts &lt;- LayerData(cr_law, layer = \"counts\")\n# Output a logical matrix specifying for each gene on whether or not there are more than zero counts per cell\nnonzero &lt;- counts &gt; 0\n# Sums all TRUE values and returns TRUE if more than 5 TRUE values per gene\nkeep_genes &lt;- Matrix::rowSums(nonzero) &gt;= 5\n# Only keeping those genes expressed in more than 5 cells\nfiltered_counts &lt;- counts[keep_genes, ]\n# Assign to Seurat object (make new SeuratObject)\ncr_law &lt;- CreateSeuratObject(filtered_counts, meta.data = cr_law@meta.data)\n# 4770 cells x 24969 genes\nncol(cr_law)\n\n[1] 4770\n\nnrow(cr_law)\n\n[1] 24969\n\ncounts &lt;- LayerData(ss_e107, layer = \"counts\")\nnonzero &lt;- counts &gt; 0\nkeep_genes &lt;- Matrix::rowSums(nonzero) &gt;= 5\nfiltered_counts &lt;- counts[keep_genes, ]\nss_e107 &lt;- CreateSeuratObject(filtered_counts, meta.data = ss_e107@meta.data)\n# 4536 cells x 23946 genes\nncol(ss_e107) \n\n[1] 4536\n\nnrow(ss_e107)\n\n[1] 23946\n\n\n\n\nCompute additional metrics - percent.mito, ribo, complexity\n\ncr_law$percent.mt &lt;- PercentageFeatureSet(cr_law, pattern = \"^mt-\")\ncr_law$log10GenesPerUMI &lt;- log10(cr_law$nFeature_RNA) / log10(cr_law$nCount_RNA)\ncr_law$percent.ribo &lt;- PercentageFeatureSet(cr_law, pattern =\"^rps\") + \n  PercentageFeatureSet(cr_law, pattern =\"^rpl\")\n\nss_e107$percent.mt &lt;- PercentageFeatureSet(ss_e107, pattern = \"^mt-\")\nss_e107$log10GenesPerUMI &lt;- log10(ss_e107$nFeature_RNA) / log10(ss_e107$nCount_RNA)\nss_e107$percent.ribo &lt;- PercentageFeatureSet(ss_e107, pattern =\"^rps\") + \n  PercentageFeatureSet(ss_e107, pattern =\"^rpl\")\n\n\n\nCompute cell cycle scores\n\nObtain cell cycle genes\n\ncell_cycle_genes &lt;- read.csv(text = RCurl::getURL(\"https://raw.githubusercontent.com/hbc/tinyatlas/master/cell_cycle/Danio_rerio.csv\"))\n# call in Ensembl annotations\nannotations &lt;- read.csv('./ensembl_annotations.csv', header=TRUE, row.names=1)\n# make a dataframe of cell cycle markers\ncell_cycle_markers &lt;- dplyr::left_join(cell_cycle_genes, annotations, by = c(\"geneID\" = \"gene_id\"))\n\ns_genes &lt;- cell_cycle_markers %&gt;%\n  dplyr::filter(phase == \"S\") %&gt;%\n  pull(\"gene_name\")\n\ng2m_genes &lt;- cell_cycle_markers %&gt;%\n  dplyr::filter(phase == \"G2/M\") %&gt;%\n  pull(\"gene_name\")\n\n# Remove non-zebrafish \"CENPF\" and \"CKS2\" from g2m_genes\ng2m_genes &lt;- g2m_genes[!g2m_genes == c(\"CENPF\",\"CKS2\")]\n\nWarning in g2m_genes == c(\"CENPF\", \"CKS2\"): longer object length is not a\nmultiple of shorter object length\n\n\n\n\nCell cycle scoring\n\n# Normalise counts for cell cycle scoring\ncr_law &lt;- NormalizeData(cr_law)\n\nNormalizing layer: counts\n\nss_e107 &lt;- NormalizeData(ss_e107)\n\nNormalizing layer: counts\n\n# Cell cycle scoring\ncr_law &lt;- CellCycleScoring(cr_law, g2m.features = g2m_genes, s.features = s_genes)\nss_e107 &lt;- CellCycleScoring(ss_e107, g2m.features = g2m_genes, s.features = s_genes)\n\n# Add difference between G2M and S phase scores\ncr_law$CC.Difference &lt;- cr_law$S.Score - cr_law$G2M.Score\nss_e107$CC.Difference &lt;- ss_e107$S.Score - ss_e107$G2M.Score\n\n\n\n\nCell filtering?\nIn a lot of cases, studies, example workflows etc. ‘poor’ quality cells are filtered out based on arbitrary metrics e.g. number of transcripts/genes suggestive of multiplets, high percentage mitochondrial transcripts suggestive of dying cells.\nI judge these to be sound reasoning points…if you truly know the cellular composition of the dataset. Unlike gene-level filtering where you only make an a priori definition of an ‘expressed’ gene i.e. in at least X number of cells, cell filtering based on biological conditions dictated by the metrics mentioned above is more nuanced and (I believe) could introduce unnecessary bias and/or risk losing ‘good’ cells.\nTherefore, for this novel dataset, I take a quasi-unbiased approach :\n\nCheck that *most* cells are largely healthy i.e. percent.mt &lt; 5\n\ndittoPlot(cr_law, \"percent.mt\", group.by = \"Phase\",\n          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n          main = \"PercentageFeatureSet(^mt-), cr_law\")\n\n\n\n\n\ndittoPlot(ss_e107, \"percent.mt\", group.by = \"Phase\",\n          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n          main = \"PercentageFeatureSet(^mt-), ss_e107\")\n\n\n\n\nPerform dimensional reduction i.e. clustering on all cells, then\n\nCheck that potential multiplets are not forming spurious clusters, and are distributed across all called clusters\nAlso check that other ‘uninteresting’ metrics are not forming spurious clusters"
  },
  {
    "objectID": "Aim1_part1.html#dimensional-reductionclustering",
    "href": "Aim1_part1.html#dimensional-reductionclustering",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "Dimensional reduction/clustering",
    "text": "Dimensional reduction/clustering\n\nSCTransform (‘normalise, find variable genes, regress unwanted variation’)\nI previously explored the data to check if there was significant variation between the cell types driven by ribosomal/mitochondrial content. Supplementary Section 1 (in progress).\nThere was clear variation being driven by cell cycle phase. This was expected given a neuronal-enriched population at this developmental stage.\nAltogether these inform the SCTransform parameters, where CC.Difference is used instead of Phase to maintain the separation between progenitors and non-cycling cells :\n\nDefaultAssay(cr_law) &lt;- \"RNA\"\ncr_law &lt;- SCTransform(cr_law,\n                     vars.to.regress = c(\"percent.ribo\", \"percent.mt\", \"CC.Difference\"),\n                     vst.flavor=\"v2\")\n\nRunning SCTransform on assay: RNA\n\n\nRunning SCTransform on layer: counts\n\n\nvst.flavor='v2' set. Using model with fixed slope and excluding poisson genes.\n\n\nVariance stabilizing transformation of count matrix of size 24969 by 4770\n\n\nModel formula is y ~ log_umi\n\n\nGet Negative Binomial regression parameters per gene\n\n\nUsing 2000 genes, 4770 cells\n\n\nFound 16 outliers - those will be ignored in fitting/regularization step\n\n\nSecond step: Get residuals using fitted parameters for 24969 genes\n\n\nComputing corrected count matrix for 24969 genes\n\n\nCalculating gene attributes\n\n\nWall clock passed: Time difference of 15.94846 secs\n\n\nDetermine variable features\n\n\nRegressing out percent.ribo, percent.mt, CC.Difference\n\n\nCentering data matrix\n\n\nSet default assay to SCT\n\nDefaultAssay(ss_e107) &lt;- \"RNA\"\nss_e107 &lt;- SCTransform(ss_e107,\n                       vars.to.regress = c(\"percent.ribo\", \"percent.mt\", \"CC.Difference\"),\n                       vst.flavor=\"v2\")\n\nRunning SCTransform on assay: RNA\n\n\nRunning SCTransform on layer: counts\n\n\nvst.flavor='v2' set. Using model with fixed slope and excluding poisson genes.\n\n\nVariance stabilizing transformation of count matrix of size 23946 by 4536\n\n\nModel formula is y ~ log_umi\n\n\nGet Negative Binomial regression parameters per gene\n\n\nUsing 2000 genes, 4536 cells\n\n\nFound 20 outliers - those will be ignored in fitting/regularization step\n\n\nSecond step: Get residuals using fitted parameters for 23946 genes\n\n\nComputing corrected count matrix for 23946 genes\n\n\nCalculating gene attributes\n\n\nWall clock passed: Time difference of 13.02944 secs\n\n\nDetermine variable features\n\n\nRegressing out percent.ribo, percent.mt, CC.Difference\n\n\nCentering data matrix\n\n\nSet default assay to SCT\n\n\n\n\n‘Unsupervised’ Clustering\nAs clustering is more an art than exact science, I empirically determined the main parameters - algorithm, npcs, k.param, and resolution - and compared the result between the two pre-processing workflows/Seurat objects.\n‘Picking’ the number of Principal Component dimensions npcs\n\ncr_law &lt;- RunPCA(cr_law, npcs = 60)\n\nPC_ 1 \nPositive:  sncb, stmn1b, tuba1c, ckbb, gap43, nrxn2a, elavl4, nrxn1a, rbfox1, onecut1 \n       stx1b, tmsb, ywhag2, gng3, TENM2, elavl3, BX548062.1, GFP, robo2, snap25a \n       stmn2a, c1ql4a, celf4, id4, lhx9, raly, vamp2, mllt11, atp6v0cb, stmn4 \nNegative:  si:ch211-263k4.2, gli2a, tns1b, jarid2b, lmx1bb, pard3bb, dock1, foxp4, zbtb16a, ctdp1 \n       znrf3, ror1, cachd1, pax5, pdzrn3b, cdon, tenm4, lama5, rxraa, gli3 \n       BX571942.1, diaph3, zeb2a, BX005454.1, trps1, slc35f1, dacha, nxn, hs6st1a, si:dkey-112m2.1 \nPC_ 2 \nPositive:  pax5, efna2a, tenm4, FP016248.1, ncam1a, her4.2, pax2b, lama5, dacha, nkain2 \n       LOC100537384, lmx1bb, en1b, efnb3b, bcam, en2b, her4.1, pax3a, unc5c, si:ch211-57n23.4 \n       elavl3, BX571942.1, ctnna2, pax2a, nova2, sema5ba, her15.1, LOC100535496, znf423, CR847968.1 \nNegative:  alx4a, lrmda, mcamb, trpm1b, ltk, nrp2a, alx4b, adam19a, rxraa, pnp4a \n       aqp1a.1, gpnmb, si:ch211-243a20.3, sox5, sox10, impdh1b, cdh11, pcbp4, kank3, ttyh2l \n       gab2, pdzrn3b, anks1b, atp11a, apoda.1, defbl1, gmps, paics, sox6, pcdh9 \nPC_ 3 \nPositive:  CACNA2D1, sez6b, ptprfb, efna3a, znf804a, lrfn5a, lrp1bb, cacna1ha, BX548062.1, grm8a \n       mdga1, unc5a, znf536, TENM2, cntn3a.2, GRIK2, raly, grik4, cpne5b, nlgn1 \n       nrxn2a, b4galnt4a, rbfox3b, kirrel3a, nav3, robo2, rbfox1, dscamb, GALNTL6, igsf21a \nNegative:  sncb, islr2, gap43, tuba1c, gng3, mllt11, stmn1b, atp6v0cb, tmsb2, ywhag2 \n       cplx2l, stmn2a, zgc:65894, cotl1, vamp2, rtn1b, gapdhs, inab, tuba1a, rtn1a \n       bsg, tmsb, eno1a, tpi1b, map1ab, aldocb, pou3f1, elavl4, rnasekb, tac1 \nPC_ 4 \nPositive:  lhx9, raly, mdga1, znf804a, r3hdm1, rbfox3b, nr2f2, sez6b, ckbb, onecut1 \n       GRIK2, chrm4a, lrfn5a, lhx2b, cpne7, cacna1ha, pdzrn4, grin2aa, evx2, GFP \n       atp2b1a, igsf21a, CACNA2D1, mab21l1, cntn3a.2, si:ch211-215d8.2, caln2, LOC110439372, grm8a, samd10b \nNegative:  celf5a, si:dkeyp-14d3.1, epha4b, thsd7ba, islr2, elavl4, pcdh9, cacna1i, edil3a, nlgn3a \n       msi2b, ntm, syt1a, rnf220a, neto1l, sema6bb, cadm1a, LOC100536716, CR847968.1, NPAS3 \n       fam19a5a, enox2, ptprga, cntn4, brinp1, si:dkey-35m8.1, rab6ba, meis2a, plxna4, sox6 \nPC_ 5 \nPositive:  elavl3, pax5, pax7a, ctnna2, nkain2, efna2a, si:ch211-57n23.4, plxna2, pax2b, dlb \n       her4.2, en1b, thsd7aa, ebf3a, CR847968.1, nhlh2, en2b, pax2a, ebf2, srrm4 \n       FP016248.1, hes6, LOC100537384, insm1b, sox11b, pdlim5a, XLOC-003692, si:ch73-386h18.1, myt1b, LOC101882472 \nNegative:  lmx1bb, si:ch211-263k4.2, si:dkey-112m2.1, fabp11a, rspo2, ptprub, si:ch211-285f17.1, BX005454.1, brinp2, slit3 \n       cdon, zgc:162939, CR848683.2, wnt4a, cyp26c1, rspo3, lrp2a, ntm, epha7, kirrel3a \n       lzts2a, gli2a, wnt3a, cachd1, unc5b, pax6a, unc5a, tnfrsf19, pawr, cldn5a \n\nElbowPlot(cr_law, ndims=60, reduction=\"pca\")\n\n\n\nss_e107 &lt;- RunPCA(ss_e107, npcs = 60)\n\nPC_ 1 \nPositive:  gli2a, jarid2b, si:ch211-263k4.2, lmx1bb, pard3bb, dock1, zbtb16a, ctdp1, foxp4, znrf3 \n       CT027638.1, cachd1, ror1, cdon, pdzrn3b, tenm4, qkib, BX005454.1, pax5, gli3 \n       BX571942.1, trps1, lama5, dacha, zeb2a, rxraa, efnb3b, nxn, hs6st1a, fbxw7 \nNegative:  sncb, ckbb, tuba1c, gap43, elavl4, nrxn1a, nrxn2a, rbfox1, tmsb, stx1b \n       paqr7b, ywhag2, gng3, GFP, tuba1a, TENM2, snap25a, onecut1, stmn2a, rtn1a \n       elavl3, tubb5, id4, mllt11, atp6v0cb, lhx9, stmn1b, raly, cadm4, robo2.1 \nPC_ 2 \nPositive:  alx4a, lrmda, trpm1b, mcamb, nrp2a, ltk, alx4b, pnp4a, aqp1a.1, gpnmb \n       si:ch211-243a20.3, rxraa, impdh1b, sox10, sox5, cdh11, ttyh2l, kank3, rab32a, gab2 \n       apoda.1, defbl1, gmps, pcbp4, paics, atp11a, pdzrn3b, sox6, ldhba, atic \nNegative:  pax5, efna2a, ncam1a, tenm4, FP016248.1, dacha, her4.2, nkain2, ctnna2, sema5ba \n       lama5, pax2b, lmx1bb, ENSDARG00000059707, efnb3b, adgrb3, bcam, BX571942.1, pax3a, en1b \n       BX465834.1, pou2f2a.1, her4.1, BX005454.1, en2b, brsk2b, nova2, cdon, BX663520.2, pax2a \nPC_ 3 \nPositive:  CACNA2D1, efna3a, TENM2, ptprfb, sez6b, znf536, rbms3, znf804a, unc5a, nrxn1a \n       nrxn2a, cacna1ha, lrfn5a, grm8a, dscamb, b4galnt4a, cpne5b, chl1b, kcnma1a, mdga1 \n       gria3b, cadm4, nrg3b, nlgn1, meis1b, GRIK2, raly, rbfox1, SRCIN1, LRFN2 \nNegative:  tuba1c, sncb, gap43, gng3, tuba1a, mllt11, ywhag2, atp6v0cb, tmsb, paqr7b \n       tmsb2, zgc:65894, stmn2a, islr2, rtn1a, si:dkey-276j7.1, ckbb, vamp2, stmn1b, cplx2l \n       bsg, cotl1, rtn1b, tubb5, gapdhs, rnasekb, hmgb3a, zgc:153426, pou3f1, tpi1b \nPC_ 4 \nPositive:  raly, sez6b, mdga1, znf804a, GRIK2, lhx9, cacna1ha, lrfn5a, grin2aa, rbfox3b \n       CACNA2D1, cpne7, r3hdm1, igsf21a, chrm4a, grm8a, nr2f2, pdzrn4, LRFN2, samd10b \n       caln2, evx2, cntn3a.2, robo2.1, atp2b1a, lhx2b, rbfox1, GALNTL6, si:ch211-215d8.2, cpne5b \nNegative:  celf5a, TMEM132C, islr2, msi2b, elavl4, thsd7ba, epha4b, cadm1a, CR847968.1, edil3a \n       ntm, rnf220a, cacna1ia, nlgn3a, sox6, syt1a, neto1l, enox2, ebf3a, tafa5a \n       map1ab, plxna3, khdrbs2, ptprga, meis2a.1, snap25b, atp1b1b, plxna4, isl1, pcp4a \nPC_ 5 \nPositive:  elavl3, pax7a, pax5, efna2a, nkain2, ctnna2, her4.2, dlb, pax2b, en1b \n       ebf3a.1, gadd45gb.1, nhlh2, plxna2, pax2a, en2b, thsd7aa, sox11b, ebf2, srrm4 \n       FP016248.1, hes6, CR847968.1, si:ch73-386h18.1, insm1b, myt1b, her4.2.1, abhd6a, scrt2, pou2f2a.1 \nNegative:  lmx1bb, TMEM132C.1, fabp11a, si:ch211-263k4.2, rspo2, BX005454.1, ptprub, si:ch211-285f17.1, brinp2, slit3 \n       cdon, aopep, CR848683.2, wnt4, ntm, rspo3, cyp26c1, gli2a, lrp2a, epha7 \n       kirrel3a, wnt3a, cachd1, unc5a, unc5b, pax6a, pax6b, pawr, tnfrsf19, barhl2 \n\nElbowPlot(ss_e107, ndims=60, reduction=\"pca\")\n\n\n\n\nBased on the elbow plots above I went with npcs = 40. k.param is kept at the default 20, and the Leiden algorithm = 4 is selected.\n\ncr_law &lt;- RunPCA(cr_law, npcs = 40) %&gt;%\n  FindNeighbors(dims = 1:40) %&gt;%\n  FindClusters(algorithm = 4, resolution = c(1.0), method=\"igraph\") %&gt;%\n  RunUMAP(dims = 1:40, n.neighbors = 20) # to match default k.param=20\n\nPC_ 1 \nPositive:  sncb, stmn1b, tuba1c, ckbb, gap43, nrxn2a, elavl4, nrxn1a, rbfox1, onecut1 \n       stx1b, tmsb, ywhag2, gng3, TENM2, elavl3, BX548062.1, GFP, robo2, snap25a \n       stmn2a, c1ql4a, celf4, id4, lhx9, raly, vamp2, mllt11, atp6v0cb, stmn4 \nNegative:  si:ch211-263k4.2, gli2a, tns1b, jarid2b, lmx1bb, pard3bb, dock1, foxp4, zbtb16a, ctdp1 \n       znrf3, ror1, cachd1, pax5, pdzrn3b, cdon, tenm4, lama5, rxraa, gli3 \n       BX571942.1, diaph3, zeb2a, BX005454.1, trps1, slc35f1, dacha, nxn, hs6st1a, si:dkey-112m2.1 \nPC_ 2 \nPositive:  pax5, efna2a, tenm4, FP016248.1, ncam1a, her4.2, pax2b, lama5, dacha, nkain2 \n       LOC100537384, lmx1bb, en1b, efnb3b, bcam, en2b, her4.1, pax3a, unc5c, si:ch211-57n23.4 \n       elavl3, BX571942.1, ctnna2, pax2a, nova2, sema5ba, her15.1, LOC100535496, znf423, CR847968.1 \nNegative:  alx4a, lrmda, mcamb, trpm1b, ltk, nrp2a, alx4b, adam19a, rxraa, pnp4a \n       aqp1a.1, gpnmb, si:ch211-243a20.3, sox5, sox10, impdh1b, cdh11, pcbp4, kank3, ttyh2l \n       gab2, pdzrn3b, anks1b, atp11a, apoda.1, defbl1, gmps, paics, sox6, pcdh9 \nPC_ 3 \nPositive:  CACNA2D1, sez6b, ptprfb, efna3a, znf804a, lrfn5a, lrp1bb, cacna1ha, BX548062.1, grm8a \n       mdga1, unc5a, znf536, TENM2, cntn3a.2, GRIK2, raly, grik4, cpne5b, nlgn1 \n       nrxn2a, b4galnt4a, rbfox3b, kirrel3a, nav3, robo2, rbfox1, dscamb, GALNTL6, igsf21a \nNegative:  sncb, islr2, gap43, tuba1c, gng3, mllt11, stmn1b, atp6v0cb, tmsb2, ywhag2 \n       cplx2l, stmn2a, zgc:65894, cotl1, vamp2, rtn1b, gapdhs, inab, tuba1a, rtn1a \n       bsg, tmsb, eno1a, tpi1b, map1ab, aldocb, pou3f1, elavl4, rnasekb, tac1 \nPC_ 4 \nPositive:  celf5a, si:dkeyp-14d3.1, epha4b, thsd7ba, islr2, elavl4, pcdh9, cacna1i, edil3a, nlgn3a \n       msi2b, ntm, syt1a, rnf220a, neto1l, sema6bb, cadm1a, LOC100536716, CR847968.1, NPAS3 \n       fam19a5a, enox2, ptprga, cntn4, brinp1, si:dkey-35m8.1, rab6ba, meis2a, plxna4, sox6 \nNegative:  lhx9, raly, mdga1, znf804a, r3hdm1, rbfox3b, nr2f2, sez6b, ckbb, onecut1 \n       GRIK2, chrm4a, lrfn5a, lhx2b, cpne7, cacna1ha, pdzrn4, grin2aa, evx2, GFP \n       atp2b1a, igsf21a, CACNA2D1, mab21l1, cntn3a.2, si:ch211-215d8.2, caln2, LOC110439372, grm8a, samd10b \nPC_ 5 \nPositive:  elavl3, pax5, pax7a, ctnna2, nkain2, efna2a, si:ch211-57n23.4, plxna2, pax2b, dlb \n       her4.2, en1b, thsd7aa, ebf3a, CR847968.1, nhlh2, en2b, pax2a, ebf2, srrm4 \n       FP016248.1, hes6, LOC100537384, insm1b, sox11b, pdlim5a, XLOC-003692, si:ch73-386h18.1, myt1b, LOC101882472 \nNegative:  lmx1bb, si:ch211-263k4.2, si:dkey-112m2.1, fabp11a, rspo2, ptprub, si:ch211-285f17.1, BX005454.1, brinp2, slit3 \n       cdon, zgc:162939, CR848683.2, wnt4a, cyp26c1, rspo3, lrp2a, ntm, epha7, kirrel3a \n       lzts2a, gli2a, wnt3a, cachd1, unc5b, pax6a, unc5a, tnfrsf19, pawr, cldn5a \n\n\nComputing nearest neighbor graph\n\n\nComputing SNN\n\n\n20:09:52 UMAP embedding parameters a = 0.9922 b = 1.112\n\n\n20:09:52 Read 4770 rows and found 40 numeric columns\n\n\n20:09:52 Using Annoy for neighbor search, n_neighbors = 20\n\n\n20:09:52 Building Annoy index with metric = cosine, n_trees = 50\n\n\n0%   10   20   30   40   50   60   70   80   90   100%\n\n\n[----|----|----|----|----|----|----|----|----|----|\n\n\n**************************************************|\n20:09:52 Writing NN index file to temp file /tmp/RtmpvEtMAu/file39b670137b6b\n20:09:52 Searching Annoy index using 1 thread, search_k = 2000\n20:09:53 Annoy recall = 100%\n20:09:53 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 20\n20:09:54 Initializing from normalized Laplacian + noise (using RSpectra)\n20:09:54 Commencing optimization for 500 epochs, with 130740 positive edges\n20:09:57 Optimization finished\n\nss_e107 &lt;- RunPCA(ss_e107, npcs = 40) %&gt;%\n  FindNeighbors(dims = 1:40) %&gt;%\n  FindClusters(algorithm = 4, resolution = c(1.0), method=\"igraph\") %&gt;%\n  RunUMAP(dims = 1:40, n.neighbors = 20) # to match default k.param=20\n\nPC_ 1 \nPositive:  gli2a, jarid2b, si:ch211-263k4.2, lmx1bb, pard3bb, dock1, zbtb16a, ctdp1, foxp4, znrf3 \n       CT027638.1, cachd1, ror1, cdon, pdzrn3b, tenm4, qkib, BX005454.1, pax5, gli3 \n       BX571942.1, trps1, lama5, dacha, zeb2a, rxraa, efnb3b, nxn, hs6st1a, fbxw7 \nNegative:  sncb, ckbb, tuba1c, gap43, elavl4, nrxn1a, nrxn2a, rbfox1, tmsb, stx1b \n       paqr7b, ywhag2, gng3, GFP, tuba1a, TENM2, snap25a, onecut1, stmn2a, rtn1a \n       elavl3, tubb5, id4, mllt11, atp6v0cb, lhx9, stmn1b, raly, cadm4, robo2.1 \nPC_ 2 \nPositive:  alx4a, lrmda, trpm1b, mcamb, nrp2a, ltk, alx4b, pnp4a, aqp1a.1, gpnmb \n       si:ch211-243a20.3, rxraa, impdh1b, sox10, sox5, cdh11, ttyh2l, kank3, rab32a, gab2 \n       apoda.1, defbl1, gmps, pcbp4, paics, atp11a, pdzrn3b, sox6, ldhba, atic \nNegative:  pax5, efna2a, ncam1a, tenm4, FP016248.1, dacha, her4.2, nkain2, ctnna2, sema5ba \n       lama5, pax2b, lmx1bb, ENSDARG00000059707, efnb3b, adgrb3, bcam, BX571942.1, pax3a, en1b \n       BX465834.1, pou2f2a.1, her4.1, BX005454.1, en2b, brsk2b, nova2, cdon, BX663520.2, pax2a \nPC_ 3 \nPositive:  CACNA2D1, efna3a, TENM2, ptprfb, sez6b, znf536, rbms3, znf804a, unc5a, nrxn1a \n       nrxn2a, cacna1ha, lrfn5a, grm8a, dscamb, b4galnt4a, cpne5b, chl1b, kcnma1a, mdga1 \n       gria3b, cadm4, nrg3b, nlgn1, meis1b, GRIK2, raly, rbfox1, SRCIN1, LRFN2 \nNegative:  tuba1c, sncb, gap43, gng3, tuba1a, mllt11, ywhag2, atp6v0cb, tmsb, paqr7b \n       tmsb2, zgc:65894, stmn2a, islr2, rtn1a, si:dkey-276j7.1, ckbb, vamp2, stmn1b, cplx2l \n       bsg, cotl1, rtn1b, tubb5, gapdhs, rnasekb, hmgb3a, zgc:153426, pou3f1, tpi1b \nPC_ 4 \nPositive:  celf5a, TMEM132C, islr2, msi2b, elavl4, thsd7ba, epha4b, cadm1a, CR847968.1, edil3a \n       ntm, rnf220a, cacna1ia, nlgn3a, sox6, syt1a, neto1l, enox2, ebf3a, tafa5a \n       map1ab, plxna3, khdrbs2, ptprga, meis2a.1, snap25b, atp1b1b, plxna4, isl1, pcp4a \nNegative:  raly, sez6b, mdga1, znf804a, GRIK2, lhx9, cacna1ha, lrfn5a, grin2aa, rbfox3b \n       CACNA2D1, cpne7, r3hdm1, igsf21a, chrm4a, grm8a, nr2f2, pdzrn4, LRFN2, samd10b \n       caln2, evx2, cntn3a.2, robo2.1, atp2b1a, lhx2b, rbfox1, GALNTL6, si:ch211-215d8.2, cpne5b \nPC_ 5 \nPositive:  lmx1bb, TMEM132C.1, fabp11a, si:ch211-263k4.2, rspo2, BX005454.1, ptprub, si:ch211-285f17.1, brinp2, slit3 \n       cdon, aopep, CR848683.2, wnt4, ntm, rspo3, cyp26c1, gli2a, lrp2a, epha7 \n       kirrel3a, wnt3a, cachd1, unc5a, unc5b, pax6a, pax6b, pawr, tnfrsf19, barhl2 \nNegative:  elavl3, pax7a, pax5, efna2a, nkain2, ctnna2, her4.2, dlb, pax2b, en1b \n       ebf3a.1, gadd45gb.1, nhlh2, plxna2, pax2a, en2b, thsd7aa, sox11b, ebf2, srrm4 \n       FP016248.1, hes6, CR847968.1, si:ch73-386h18.1, insm1b, myt1b, her4.2.1, abhd6a, scrt2, pou2f2a.1 \nComputing nearest neighbor graph\nComputing SNN\n20:10:00 UMAP embedding parameters a = 0.9922 b = 1.112\n20:10:00 Read 4536 rows and found 40 numeric columns\n20:10:00 Using Annoy for neighbor search, n_neighbors = 20\n20:10:00 Building Annoy index with metric = cosine, n_trees = 50\n0%   10   20   30   40   50   60   70   80   90   100%\n[----|----|----|----|----|----|----|----|----|----|\n**************************************************|\n20:10:00 Writing NN index file to temp file /tmp/RtmpvEtMAu/file39b67c778279\n20:10:00 Searching Annoy index using 1 thread, search_k = 2000\n20:10:01 Annoy recall = 100%\n20:10:01 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 20\n20:10:02 Initializing from normalized Laplacian + noise (using RSpectra)\n20:10:02 Commencing optimization for 500 epochs, with 122026 positive edges\n20:10:05 Optimization finished\n\n\nSave Seurat objects to load later without re-running all the above:\n\n# Set DefaultAssay (and slot) and save objects for visualisation\nDefaultAssay(cr_law) &lt;- \"RNA\"\ncr_law &lt;- NormalizeData(cr_law)\n\nNormalizing layer: counts\n\nDefaultAssay(ss_e107) &lt;- \"RNA\"\nss_e107 &lt;- NormalizeData(ss_e107)\n\nNormalizing layer: counts\n\nsave(cr_law, file=\"./foxd3flh-5k_cr-law.RData\")\nsave(ss_e107, file=\"./foxd3flh-5k_ss-e107.RData\")"
  },
  {
    "objectID": "Aim1_part1.html#visualise-and-explore-clustering-results-with-dittoseq",
    "href": "Aim1_part1.html#visualise-and-explore-clustering-results-with-dittoseq",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "Visualise and explore clustering results with dittoSeq",
    "text": "Visualise and explore clustering results with dittoSeq\n\nUMAP reduction\n\ndittoDimPlot(cr_law, \"SCT_snn_res.1\", reduction.use=\"umap\",\n             main=\"CellRanger7.1.0\",\n             sub=\"Lawson2020\",\n             legend.title=\"clusters\",\n             do.label=TRUE)\n\n\n\n\n\ndittoDimPlot(ss_e107, \"SCT_snn_res.1\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b\",\n             sub=\"ensembl107\",\n             legend.title=\"clusters\",\n             do.label=TRUE)"
  },
  {
    "objectID": "Aim1_part1.html#identify-epiphysis-clusters",
    "href": "Aim1_part1.html#identify-epiphysis-clusters",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "Identify epiphysis clusters",
    "text": "Identify epiphysis clusters\nThe epiphysis shares several of its known i.e. well-characterised markers with other neuronal/cranial cell types. For example, bsx is also expressed in the hypothalamus, noto is also expressed in the telencephalon, otx5 is also expressed in the retina. Inferring the epiphysis clusters from any of these genes alone is futile:\n\n# Genes that are well known to be expressed in the epiphysis\nmarkers &lt;- c(\"bsx\", \"noto\", \"otx5\")\n\n\ndittoPlotVarsAcrossGroups(cr_law, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"cr_law (bsx/noto/otx5)\", summary.fxn = max, adjustment = NULL)\n\n\n\n\n\ndittoPlotVarsAcrossGroups(ss_e107, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"ss_e107 (bsx/noto/otx5)\", summary.fxn = max, adjustment = NULL)\n\n\n\n\nI reasoned that, by using instead the mean expression values of these three genes combined, one could eliminate clusters that are least likely to be epiphysis cells.\nFor example, an epiphysis cell is likely to co-express bsx (1) + noto (1) + otx5 (1) = 3. Mean expression value = 3 / 3 = 1.\nOn the other hand, a retina cell would not express bsx ( &lt; 1) + noto (&lt; 1), but express + otx5 (1) = &lt; 3. Mean expression value = &lt;3 / 3 = &lt; 1.\n\ndittoPlotVarsAcrossGroups(cr_law, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"cr_law (mean of bsx + noto + otx5)\")\n\n\n\n\n\ndittoPlotVarsAcrossGroups(ss_e107, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"ss_e107 (mean of bsx + noto + otx5)\")\n\n\n\n\nThis worked quite well, and one can appreciate two clusters-of-interest likely to be epiphysis cells. Furthermore, this observation is robust and reproducible from cell x gene matrices generated using the two dissimilar pre-processing pipelines.\n\ncr_law clusters-of-interest = 2 and 18\nss_e107 clusters-of-interest = 2 and 19\n\nLet’s now look at sox1a that is expressed in the parapineal as it emerges from the anterior pineal region (Lekk et al. 2019). The following plots show that sox1a expression can be detected in the clusters-of-interest.\n\nmulti_dittoDimPlot(cr_law, c(markers,\"sox1a\"), order=\"increasing\", reduction.use=\"umap\")\n\n\n\n\n\nmulti_dittoDimPlot(ss_e107, c(markers,\"sox1a\"), order=\"increasing\", reduction.use=\"umap\")\n\n\n\n\nAs both matrices consistently produced similar results so far, I am proceeding further with ss_e107 only.\nHow many cells (roughly) are present in the clusters-of-interest? ~250 cells in total.\n\ndittoBarPlot(ss_e107, \"SCT_snn_res.1\", group.by = \"SCT_snn_res.1\",\n             scale = \"count\",\n             cells.use = meta(\"SCT_snn_res.1\", ss_e107) == c(\"2\", \"19\"),\n             main=\"No. of cells\")"
  },
  {
    "objectID": "Aim1_part1.html#sanity-checks-on-clustering",
    "href": "Aim1_part1.html#sanity-checks-on-clustering",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "Sanity checks on clustering",
    "text": "Sanity checks on clustering\nRemember that I did not perform Cell filtering? To evaluate if the clustering afterwards was largely driven by ‘true’ biological heterogeneity, in a qualitative sense:\n\nCheck distribution of multiplets\nI run scDblFinder to identify multiplets:\n\nsce &lt;- SingleCellExperiment(\n  assays = list(counts = as.matrix(LayerData(ss_e107, assay = \"RNA\", layer=\"counts\"))))\n\nlibrary(scDblFinder)\nsce &lt;- scDblFinder(sce, clusters=c(Idents(ss_e107)),\n                   BPPARAM=MulticoreParam(2, RNGseed=1234))\n\n21 clusters\n\n\nCreating ~4410 artificial doublets...\n\n\nDimensional reduction\n\n\nEvaluating kNN...\n\n\nTraining model...\n\n\niter=0, 355 cells excluded from training.\n\n\niter=1, 354 cells excluded from training.\n\n\niter=2, 342 cells excluded from training.\n\n\nThreshold found:0.497\n\n\n369 (8.1%) doublets called\n\ntable(sce$scDblFinder.class)\n\n\nsinglet doublet \n   4167     369 \n\n\nNow port the results back to the original ss_e107 object for visualisation. Called doublets are distributed randomly across entire dataset, which is ideal.\n\nss_e107$scDblFinder.class &lt;- sce$scDblFinder.class\n\n\ndittoDimPlot(ss_e107, \"scDblFinder.class\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"class\")\n\n\n\n\n\n\nWhat about other metrics?\n\ndittoDimPlot(ss_e107, \"nCount_RNA\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"nUMI\")\n\n\n\n\n\ndittoDimPlot(ss_e107, \"nFeature_RNA\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"nGenes\")\n\n\n\n\n\ndittoDimPlot(ss_e107, \"percent.ribo\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"% ribosomal transcripts\")\n\n\n\n\n\ndittoDimPlot(ss_e107, \"percent.mt\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"% mitochondrial transcripts\")\n\n\n\n\n\ndittoDimPlot(ss_e107, \"Phase\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"cell cycle\")\n\n\n\n\nThe plots above suggests that the clusters-of-interest 2 and 19 vary from each other by cell cycle phase, and perhaps by subtle differences in the other metrics. This is something to bear in mind when interpreting results based on this clustering."
  },
  {
    "objectID": "Aim1_part1.html#summary-notes-for-aim-1",
    "href": "Aim1_part1.html#summary-notes-for-aim-1",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "Summary notes for Aim 1",
    "text": "Summary notes for Aim 1\n\nPutative epiphysis cell clusters can be identified by scRNA-seq regardless of sox1a genotype.\nSox1a-positive putative parapineal cells can be detected within these clusters.\nNext step: In vivo validation of these putative clusters using imaging-based spatial transcriptomics (Vizgen MERSCOPE)"
  },
  {
    "objectID": "Aim1_part1.html#references",
    "href": "Aim1_part1.html#references",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "References",
    "text": "References\n\nPackages\n\npkgs &lt;- cite_packages(output = \"table\", out.dir = \".\")\nknitr::kable(pkgs)\n\n\n\n\nPackage\nVersion\nCitation\n\n\n\n\nbase\n4.4.2\nR Core Team (2024)\n\n\nBiocParallel\n1.38.0\n(BiocPar?)….\n\n\ndittoSeq\n1.16.0\nBunis et al. (2020)\n\n\nfuture\n1.34.0\nBengtsson (2021)\n\n\nknitr\n1.49\n(knitr20?)….\n\n\nMatrix\n1.7.0\nBates, Maechler, and Jagan (2024)\n\n\nRCurl\n1.98.1.16\nTemple Lang (2024)\n\n\nreticulate\n1.39.0\nUshey, Allaire, and Tang (2024)\n\n\nrmarkdown\n2.29\n(rmarkdo?)….\n\n\nscDblFinder\n1.18.0\nGermain et al. (2022)\n\n\nSeurat\n5.1.0\n(Seurat2?)….\n\n\nSingleCellExperiment\n1.26.0\n(SingleC?)….\n\n\ntidyverse\n2.0.0\nWickham et al. (2019)\n\n\n\n\n\n\n\nPrevious work\n\nMary Piper, Meeta Mistry, Jihe Liu, William Gammerdinger, & Radhika Khetani. (2022, January 6). hbctraining/scRNA-seq_online: scRNA-seq Lessons from HCBC (first release). Zenodo. https://doi.org/10.5281/zenodo.5826256.\nI. Lekk, V. Duboc, A. Faro, S. Nicolaou, P. Blader and S.W. Wilson. Sox1a mediates the ability of the parapineal to impart habenular left-right asymmetry. eLife (2019), e47376, 8, https://doi.org/10.7554/eLife.47376"
  },
  {
    "objectID": "Aim1_part1.html#session-info",
    "href": "Aim1_part1.html#session-info",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "Session Info",
    "text": "Session Info\n\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] scDblFinder_1.18.0          grateful_0.2.10            \n [3] SingleCellExperiment_1.26.0 SummarizedExperiment_1.34.0\n [5] Biobase_2.64.0              GenomicRanges_1.56.2       \n [7] GenomeInfoDb_1.40.1         IRanges_2.38.1             \n [9] S4Vectors_0.42.1            BiocGenerics_0.50.0        \n[11] MatrixGenerics_1.16.0       matrixStats_1.4.1          \n[13] dittoSeq_1.16.0             lubridate_1.9.3            \n[15] forcats_1.0.0               stringr_1.5.1              \n[17] dplyr_1.1.4                 purrr_1.0.2                \n[19] readr_2.1.5                 tidyr_1.3.1                \n[21] tibble_3.2.1                ggplot2_3.5.1              \n[23] tidyverse_2.0.0             Seurat_5.1.0               \n[25] SeuratObject_5.0.2          sp_2.1-4                   \n[27] reticulate_1.39.0           BiocParallel_1.38.0        \n[29] future_1.34.0              \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22          splines_4.4.2            \n  [3] later_1.3.2               BiocIO_1.14.0            \n  [5] bitops_1.0-9              polyclip_1.10-7          \n  [7] XML_3.99-0.17             fastDummies_1.7.4        \n  [9] lifecycle_1.0.4           edgeR_4.2.2              \n [11] globals_0.16.3            lattice_0.22-6           \n [13] MASS_7.3-61               magrittr_2.0.3           \n [15] limma_3.60.6              plotly_4.10.4            \n [17] rmarkdown_2.29            yaml_2.3.10              \n [19] metapod_1.12.0            httpuv_1.6.15            \n [21] glmGamPoi_1.16.0          sctransform_0.4.1        \n [23] spam_2.11-0               spatstat.sparse_3.1-0    \n [25] cowplot_1.1.3             pbapply_1.7-2            \n [27] RColorBrewer_1.1-3        abind_1.4-8              \n [29] zlibbioc_1.50.0           Rtsne_0.17               \n [31] RCurl_1.98-1.16           rappdirs_0.3.3           \n [33] GenomeInfoDbData_1.2.12   ggrepel_0.9.6            \n [35] irlba_2.3.5.1             listenv_0.9.1            \n [37] spatstat.utils_3.1-1      pheatmap_1.0.12          \n [39] goftest_1.2-3             RSpectra_0.16-2          \n [41] dqrng_0.4.1               spatstat.random_3.3-2    \n [43] fitdistrplus_1.2-1        parallelly_1.39.0        \n [45] DelayedMatrixStats_1.26.0 leiden_0.4.3.1           \n [47] codetools_0.2-20          DelayedArray_0.30.1      \n [49] scuttle_1.14.0            tidyselect_1.2.1         \n [51] UCSC.utils_1.0.0          farver_2.1.2             \n [53] viridis_0.6.5             ScaledMatrix_1.12.0      \n [55] spatstat.explore_3.3-3    GenomicAlignments_1.40.0 \n [57] jsonlite_1.8.9            BiocNeighbors_1.22.0     \n [59] progressr_0.15.0          scater_1.32.1            \n [61] ggridges_0.5.6            survival_3.7-0           \n [63] tools_4.4.2               ica_1.0-3                \n [65] Rcpp_1.0.13-1             glue_1.8.0               \n [67] gridExtra_2.3             SparseArray_1.4.8        \n [69] xfun_0.49                 withr_3.0.2              \n [71] fastmap_1.2.0             bluster_1.14.0           \n [73] fansi_1.0.6               rsvd_1.0.5               \n [75] digest_0.6.37             timechange_0.3.0         \n [77] R6_2.5.1                  mime_0.12                \n [79] colorspace_2.1-1          scattermore_1.2          \n [81] tensor_1.5                spatstat.data_3.1-2      \n [83] utf8_1.2.4                generics_0.1.3           \n [85] renv_1.0.11               data.table_1.16.2        \n [87] rtracklayer_1.64.0        httr_1.4.7               \n [89] htmlwidgets_1.6.4         S4Arrays_1.4.1           \n [91] uwot_0.2.2                pkgconfig_2.0.3          \n [93] gtable_0.3.6              lmtest_0.9-40            \n [95] XVector_0.44.0            htmltools_0.5.8.1        \n [97] dotCall64_1.2             scales_1.3.0             \n [99] png_0.1-8                 spatstat.univar_3.1-1    \n[101] scran_1.32.0              knitr_1.49               \n[103] rstudioapi_0.17.1         rjson_0.2.23             \n[105] tzdb_0.4.0                reshape2_1.4.4           \n[107] curl_6.0.0                nlme_3.1-165             \n[109] zoo_1.8-12                KernSmooth_2.23-24       \n[111] vipor_0.4.7               parallel_4.4.2           \n[113] miniUI_0.1.1.1            restfulr_0.0.15          \n[115] pillar_1.9.0              grid_4.4.2               \n[117] vctrs_0.6.5               RANN_2.6.2               \n[119] promises_1.3.0            BiocSingular_1.20.0      \n[121] beachmat_2.20.0           xtable_1.8-4             \n[123] cluster_2.1.6             beeswarm_0.4.0           \n[125] evaluate_1.0.1            locfit_1.5-9.10          \n[127] Rsamtools_2.20.0          cli_3.6.3                \n[129] compiler_4.4.2            rlang_1.1.4              \n[131] crayon_1.5.3              future.apply_1.11.3      \n[133] labeling_0.4.3            ggbeeswarm_0.7.2         \n[135] plyr_1.8.9                stringi_1.8.4            \n[137] viridisLite_0.4.2         deldir_2.0-4             \n[139] Biostrings_2.72.1         munsell_0.5.1            \n[141] lazyeval_0.2.2            spatstat.geom_3.3-3      \n[143] Matrix_1.7-0              RcppHNSW_0.6.0           \n[145] hms_1.1.3                 patchwork_1.3.0          \n[147] sparseMatrixStats_1.16.0  statmod_1.5.0            \n[149] shiny_1.9.1               ROCR_1.0-11              \n[151] igraph_2.1.1              xgboost_1.7.8.1"
  },
  {
    "objectID": "Aim1_part1.html#summary-notes-for-aim-1---part-1",
    "href": "Aim1_part1.html#summary-notes-for-aim-1---part-1",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "Summary notes for Aim 1 - Part 1",
    "text": "Summary notes for Aim 1 - Part 1\n\nPutative epiphysis cell clusters can be identified by scRNA-seq regardless of sox1a genotype.\nSox1a-positive putative parapineal cells can be detected within these clusters.\nNext step: In vivo validation of these putative clusters using imaging-based spatial transcriptomics (Vizgen MERSCOPE)"
  }
]