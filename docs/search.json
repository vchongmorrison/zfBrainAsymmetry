[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Lead Author and Researcher Dr V Chong-Morrison (Senior Postdoctoral Scientist) \nPrincipal Investigators \nProfessor S Wilson (University College London)  Professor T Sauka-Spengler (University of Oxford/Stowers Institute) \nThis website is an active documentation of the bioinformatics underlying the following study.\n\n\n\nLeft/right differences in the brain have fascinated thinkers for generations. Zebrafish genetic tools harnessed within the epithalamus of the forebrain has led to the habenula’s emergence as a powerful paradigm to understand brain lateralisation. During development in the embryo, the habenula forms bilaterally as a pair of left and right nuclei, along with a medial pineal gland, and left-sided parapineal nucleus that emerges from the pineal.\n\n\nA substantial body of research in zebrafish unequivocally identified the parapineal organ (also known as the “parietal eye” in other organisms) as a crucial determinant of habenular left/right asymmetry. Through an unidentified mechanism, the parapineal organ signals to newly-born habenular neurons to adopt “left-sided” characteristics. This elusive signal is potent and precise within a defined developmental time window - approximately 28 to 32 hours post-fertilisation. Removing the parapineal signal during this time leads to a complete loss of left identity, resulting in a “double right” 4-days-old habenula.\n\n\n\nThe parapineal organ of a zebrafish embryo signals to neurons in the habenula region (dotted circles) circa 32 hours post fertilisation to acquire left/right asymmetric nuclei by 4 days old.\n\n\n\n\n\nPrevious studies have demonstrated that the parapineal organ expresses sox1a during its development. Lekk et al. showed that zebrafish sox1a mutants have “double right” habenula despite the parapineal developing normally in appearance. This finding was important as it uncoupled the parapineal’s signalling role from its anatomical structure. Unlike ablating or removing the parapineal altogether, which also leads to “double right” habenula, sox1a mutants can be utilised as a vehicle to retrieve signalling-deficient parapineal organs. These would uncover the important signal(s) crucial for habenula neurons to acquire left-sided character.\n\n\n\nIdentifying the parapineal signal(s) has previously eluded the field due to non-trivial technical challenges. At fewer than 20 cells per zebrafish embryo, isolating a pure population of parapineal cells of sufficient quality to characterise their genetic content was monumentally difficult. By combining single cell sequencing technologies with prior expertise in characterising small cell populations from zebrafish embryos, I overcame these challenges to illuminate a cohort of biological factors responsible for parapineal function in the context of epithalamic asymmetry.\n\n\n\n\n\n\nI. Lekk, V. Duboc, A. Faro, S. Nicolaou, P. Blader and S.W. Wilson. Sox1a mediates the ability of the parapineal to impart habenular left-right asymmetry. eLife (2019), e47376, 8, https://doi.org/10.7554/eLife.47376\nV. Duboc, P. Dufourcq, P. Blader, and M. Roussigné. Asymmetry of the Brain: Development and Implications. Annual Review of Genetics (2015), 647-672, 49(1), https://doi.org/10.1146/annurev-genet-112414-055322\n\n\n\n\n\nWilson Lab, University College London\nSauka-Spengler Lab, University of Oxford"
  },
  {
    "objectID": "index.html#background",
    "href": "index.html#background",
    "title": "Introduction",
    "section": "",
    "text": "Left/right differences in the brain have fascinated thinkers for generations. Zebrafish genetic tools harnessed within the epithalamus of the forebrain has led to the habenula’s emergence as a powerful paradigm to understand brain lateralisation. During development in the embryo, the habenula forms bilaterally as a pair of left and right nuclei, along with a medial pineal gland, and left-sided parapineal nucleus that emerges from the pineal.\n\n\nA substantial body of research in zebrafish unequivocally identified the parapineal organ (also known as the “parietal eye” in other organisms) as a crucial determinant of habenular left/right asymmetry. Through an unidentified mechanism, the parapineal organ signals to newly-born habenular neurons to adopt “left-sided” characteristics. This elusive signal is potent and precise within a defined developmental time window - approximately 28 to 32 hours post-fertilisation. Removing the parapineal signal during this time leads to a complete loss of left identity, resulting in a “double right” 4-days-old habenula.\n\n\n\nThe parapineal organ of a zebrafish embryo signals to neurons in the habenula region (dotted circles) circa 32 hours post fertilisation to acquire left/right asymmetric nuclei by 4 days old.\n\n\n\n\n\nPrevious studies have demonstrated that the parapineal organ expresses sox1a during its development. Lekk et al. showed that zebrafish sox1a mutants have “double right” habenula despite the parapineal developing normally in appearance. This finding was important as it uncoupled the parapineal’s signalling role from its anatomical structure. Unlike ablating or removing the parapineal altogether, which also leads to “double right” habenula, sox1a mutants can be utilised as a vehicle to retrieve signalling-deficient parapineal organs. These would uncover the important signal(s) crucial for habenula neurons to acquire left-sided character.\n\n\n\nIdentifying the parapineal signal(s) has previously eluded the field due to non-trivial technical challenges. At fewer than 20 cells per zebrafish embryo, isolating a pure population of parapineal cells of sufficient quality to characterise their genetic content was monumentally difficult. By combining single cell sequencing technologies with prior expertise in characterising small cell populations from zebrafish embryos, I overcame these challenges to illuminate a cohort of biological factors responsible for parapineal function in the context of epithalamic asymmetry."
  },
  {
    "objectID": "index.html#key-references",
    "href": "index.html#key-references",
    "title": "Introduction",
    "section": "",
    "text": "I. Lekk, V. Duboc, A. Faro, S. Nicolaou, P. Blader and S.W. Wilson. Sox1a mediates the ability of the parapineal to impart habenular left-right asymmetry. eLife (2019), e47376, 8, https://doi.org/10.7554/eLife.47376\nV. Duboc, P. Dufourcq, P. Blader, and M. Roussigné. Asymmetry of the Brain: Development and Implications. Annual Review of Genetics (2015), 647-672, 49(1), https://doi.org/10.1146/annurev-genet-112414-055322"
  },
  {
    "objectID": "index.html#external-links",
    "href": "index.html#external-links",
    "title": "Introduction",
    "section": "",
    "text": "Wilson Lab, University College London\nSauka-Spengler Lab, University of Oxford"
  },
  {
    "objectID": "session.html",
    "href": "session.html",
    "title": "Session",
    "section": "",
    "text": "I run this at the start of every session as a base.\nn.b. Additional packages are imported in as needed.\n##### Set libPaths and memory/parallel cores usage #####\n.libPaths(c(\"/home/chongmorrison/R/x86_64-pc-linux-gnu-library/4.3\",\n            \"/home/chongmorrison/R/4.4.1-Bioc3.19\"))\n.libPaths() # check .libPaths\n\noptions(Ncpus = 12) # adjust no. of cores for base R\ngetOption(\"Ncpus\", 1L)\n\nlibrary(future)\noptions(future.globals.maxSize = 2000 * 1024^2) # adjust limit of allowable object size = 2G\n# *could* enable parallelisation i.e. workers &gt; 1, for Seurat etc. but breaks Python processes currently...\nfuture::plan(\"multisession\", workers = 1) # or use \"sequential\" mode\nfuture::plan()\n\nlibrary(BiocParallel) # for parallelising Bioconductor packages\n\n##### Import analysis packages #####\n# Potential bug: Python environment needs to be activated before loading Seurat\nlibrary(reticulate)\nconda_list() # check available conda environments\nuse_condaenv(\"singlecell-scHPF\", required=TRUE) # has leidenalg etc. installed\n# R packages\nlibrary(Seurat)\nlibrary(tidyverse)\nlibrary(dittoSeq)\nlibrary(SingleCellExperiment)\nlibrary(grateful)\n\n# set seed for reproducibility of random sampling\nset.seed(584)"
  },
  {
    "objectID": "session.html#initialise-r-environment",
    "href": "session.html#initialise-r-environment",
    "title": "Session",
    "section": "",
    "text": "I run this at the start of every session as a base.\nn.b. Additional packages are imported in as needed.\n##### Set libPaths and memory/parallel cores usage #####\n.libPaths(c(\"/home/chongmorrison/R/x86_64-pc-linux-gnu-library/4.3\",\n            \"/home/chongmorrison/R/4.4.1-Bioc3.19\"))\n.libPaths() # check .libPaths\n\noptions(Ncpus = 12) # adjust no. of cores for base R\ngetOption(\"Ncpus\", 1L)\n\nlibrary(future)\noptions(future.globals.maxSize = 2000 * 1024^2) # adjust limit of allowable object size = 2G\n# *could* enable parallelisation i.e. workers &gt; 1, for Seurat etc. but breaks Python processes currently...\nfuture::plan(\"multisession\", workers = 1) # or use \"sequential\" mode\nfuture::plan()\n\nlibrary(BiocParallel) # for parallelising Bioconductor packages\n\n##### Import analysis packages #####\n# Potential bug: Python environment needs to be activated before loading Seurat\nlibrary(reticulate)\nconda_list() # check available conda environments\nuse_condaenv(\"singlecell-scHPF\", required=TRUE) # has leidenalg etc. installed\n# R packages\nlibrary(Seurat)\nlibrary(tidyverse)\nlibrary(dittoSeq)\nlibrary(SingleCellExperiment)\nlibrary(grateful)\n\n# set seed for reproducibility of random sampling\nset.seed(584)"
  },
  {
    "objectID": "session.html#ensembl-annotations",
    "href": "session.html#ensembl-annotations",
    "title": "Session",
    "section": "2 Ensembl annotations",
    "text": "2 Ensembl annotations\nUseful to have gene annotations in CSV format at hand, which can be called into the analysis anytime.\nlibrary(AnnotationHub)\nlibrary(ensembldb)\n# Connect to AnnotationHub\nah &lt;- AnnotationHub()\n# Access the Ensembl database for organism\nahDb &lt;- query(ah, \n              pattern = c(\"Danio rerio\", \"EnsDb\"), \n              ignore.case = TRUE)\n# Acquire the latest annotation files\nid &lt;- ahDb %&gt;%\n  mcols() %&gt;%\n  rownames() %&gt;%\n  tail(n = 1)\n# Download the appropriate Ensembldb database\nedb &lt;- ah[[id]]\n# Extract gene-level information from database\nannotations &lt;- genes(edb, \n                     return.type = \"data.frame\")\n# Select annotations of interest\nannotations &lt;- annotations %&gt;%\n  dplyr::select(gene_id, gene_name, seq_name, gene_biotype, description)\n# Save for later use\nwrite.csv(annotations, file=\"./annotations/ensembl_annotations.csv\")"
  },
  {
    "objectID": "session.html#other-databases",
    "href": "session.html#other-databases",
    "title": "Session",
    "section": "3 Other databases",
    "text": "3 Other databases"
  },
  {
    "objectID": "session.html#zebrafish-information-network-zfin",
    "href": "session.html#zebrafish-information-network-zfin",
    "title": "Session",
    "section": "4 Zebrafish Information Network (ZFIN)",
    "text": "4 Zebrafish Information Network (ZFIN)\n\n4.1 Gene expression data\nZFIN has an excellent curation of in vivo expression patterns obtained via WISH (Whole-mount in situ hybridisation). As an example, the following code retrieves WISH data for Wild Type condition from https://zfin.org/downloads (‘Gene Expression’ &gt; ‘Expression data for wildtype fish’).\ngex &lt;- read.delim(url(\"https://zfin.org/downloads/wildtype-expression_fish.txt\"), header = FALSE, sep =\"\\t\")\nhead(gex, 5)\n\n# Add column IDs (based on Column Headers in the Downloads page above)\ncolnames(gex) &lt;- c(\"GeneID\", \"GeneSymbol\",\"FishName\",\"SuperStructureID\",\"SuperStructureName\",\n                   \"SubStructureID\",\"SubStructureName\",\"StartStage\",\"EndStage\",\"Assay\",\n                   \"AssayMMOID\",\"PublicationID\",\"ProbeID\",\"AntibodyID\",\"FishID\")\nHere, the data is filtered to only include information-of-interest e.g. Structure i.e. anatomical information.\ngex_ISH &lt;- gex[which(gex$FishName=='WT' | gex$FishName=='AB/TU'), ]\ngex_ISH &lt;- gex_ISH[which(gex_ISH$Assay=='mRNA in situ hybridization'), ]\ngex_ISH &lt;- data.frame(gex_ISH$GeneSymbol, gex_ISH$SuperStructureName)\ncolnames(gex_ISH) &lt;- c(\"GeneSymbol\",\"Structure\")\nhead(gex_ISH, 10)\n\n\n4.2 Human orthologue information\nZFIN_human &lt;- read.delim(url(\"https://zfin.org/downloads/human_orthos.txt\"), header = FALSE, sep =\"\\t\")\nhead(ZFIN_human, 5)\n# retrieve fish and human orthologues\nZFIN_human &lt;- unique(data.frame(ZFIN_human$V2, ZFIN_human$V4))\n# Add column IDs\ncolnames(ZFIN_human) &lt;- c(\"zf_gene\",\"human_gene\")"
  },
  {
    "objectID": "session.html#references",
    "href": "session.html#references",
    "title": "Session",
    "section": "5 References",
    "text": "5 References\n\nMary Piper, Meeta Mistry, Jihe Liu, William Gammerdinger, & Radhika Khetani. (2022, January 6). hbctraining/scRNA-seq_online: scRNA-seq Lessons from HCBC (first release). Zenodo. https://doi.org/10.5281/zenodo.5826256.\nPeter W Harrison, M Ridwan Amode, Olanrewaju Austine-Orimoloye, Andrey G Azov, Matthieu Barba, If Barnes, Arne Becker, Ruth Bennett, Andrew Berry, Jyothish Bhai, Simarpreet Kaur Bhurji, Sanjay Boddu, Paulo R Branco Lins, Lucy Brooks, Shashank Budhanuru Ramaraju, Lahcen I Campbell, Manuel Carbajo Martinez, Mehrnaz Charkhchi, Kapeel Chougule, Alexander Cockburn, Claire Davidson, Nishadi H De Silva, Kamalkumar Dodiya, Sarah Donaldson, Bilal El Houdaigui, Tamara El Naboulsi, Reham Fatima, Carlos Garcia Giron, Thiago Genez, Dionysios Grigoriadis, Gurpreet S Ghattaoraya, Jose Gonzalez Martinez, Tatiana A Gurbich, Matthew Hardy, Zoe Hollis, Thibaut Hourlier, Toby Hunt, Mike Kay, Vinay Kaykala, Tuan Le, Diana Lemos, Disha Lodha, Diego Marques-Coelho, Gareth Maslen, Gabriela Alejandra Merino, Louisse Paola Mirabueno, Aleena Mushtaq, Syed Nakib Hossain, Denye N Ogeh, Manoj Pandian Sakthivel, Anne Parker, Malcolm Perry, Ivana Piližota, Daniel Poppleton, Irina Prosovetskaia, Shriya Raj, José G Pérez-Silva, Ahamed Imran Abdul Salam, Shradha Saraf, Nuno Saraiva-Agostinho, Dan Sheppard, Swati Sinha, Botond Sipos, Vasily Sitnik, William Stark, Emily Steed, Marie-Marthe Suner, Likhitha Surapaneni, Kyösti Sutinen, Francesca Floriana Tricomi, David Urbina-Gómez, Andres Veidenberg, Thomas A Walsh, Doreen Ware, Elizabeth Wass, Natalie L Willhoft, Jamie Allen, Jorge Alvarez-Jarreta, Marc Chakiachvili, Bethany Flint, Stefano Giorgetti, Leanne Haggerty, Garth R Ilsley, Jon Keatley, Jane E Loveland, Benjamin Moore, Jonathan M Mudge, Guy Naamati, John Tate, Stephen J Trevanion, Andrea Winterbottom, Adam Frankish, Sarah E Hunt, Fiona Cunningham, Sarah Dyer, Robert D Finn, Fergal J Martin, and Andrew D Yates. (Ensembl 2024). Nucleic Acids Res. 2024, 52(D1):D891–D899. 10.1093/nar/gkad1049\nBradford, Y.M., Van Slyke, C.E., Ruzicka, L., Singer, A., Eagle, A., Fashena, D., Howe, D.G., Frazer, K., Martin, R., Paddock, H., Pich, C., Ramachandran, S., Westerfield, M. (2022) Zebrafish Information Network, the knowledgebase for Danio rerio research. Genetics. 220(4). 10.1093/genetics/iyac016"
  },
  {
    "objectID": "session.html#session-info",
    "href": "session.html#session-info",
    "title": "Session",
    "section": "6 Session Info",
    "text": "6 Session Info\n\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] compiler_4.4.2    fastmap_1.2.0     cli_3.6.3         tools_4.4.2      \n [5] htmltools_0.5.8.1 yaml_2.3.10       rmarkdown_2.29    knitr_1.49       \n [9] jsonlite_1.8.9    xfun_0.49         digest_0.6.37     rlang_1.1.4      \n[13] evaluate_1.0.1"
  },
  {
    "objectID": "Aim1_part1.html",
    "href": "Aim1_part1.html",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "",
    "text": "Using single cell RNA-seq (scRNA-seq), can pineal and parapineal cells be identified from a mixed population regardless of sox1a genotype?\n\n\n\nApproximately 230 heads from ~30-32 hpf larvae were collected. Larvae were of mixed sox1a genotype (hets, homs and wild types) obtained by incrossing sox1a hets.\nHeads were dissociated into single cell suspension for FACS-based enrichment of GFP++/mCherry- cells. GFP labels the epiphysis and other ‘contaminant’ cell types, while mCherry labels ‘contaminant’ cell types only. The mCherry transgene was pre-determined in prior imaging experiments to not label the parapineal organ.\nApproximately 10k sorted events were recorded and collected for scRNA-seq using 10X Genomics 3’ v3.1 GEX chemistry. The library was sequenced to at least 500 million reads, thus yielding a depth of ~100k reads per cell.\n\n\n\nSchematic of experiment design.\n\n\n\n\n\nSession\n\n\n\nTo empirically determine the robustness of called clusters downstream, reads were pre-processed using two different mapper/gene annotation combinations:\n\n10X Genomics CellRanger v7.1.0 + Lawson Lab annotation (Lawson et al., 2020)\n\nThis pipeline maps unique reads only:\n# Preprocessing - Cell Ranger 7.1.0 (unique reads only)\ncellranger count --id=foxd3flhGFP \\\n--transcriptome=/home/ucbtvmr/Scratch/cellranger/mkref/GRCz11_lawson/GRCz11_v4.3.2_GFP_mCherry \\\n--fastqs=/home/ucbtvmr/Scratch/4_scRNAseq/fastq \\\n--sample=VCM2-AK30645-AK6234 \\\n--no-bam\n\nSTARsolo v2.7.10b + Ensembl release 107 annotation\n\nThis pipeline includes multi-mapping reads assigned using EM algorithm:\n# Preprocessing - STARsolo v2.7.10b (with EM multi-mapped reads)\nSTAR --genomeDir /home/ucbtvmr/ensembl_releases/ensembl107/Danio_rerio.genome.GFP.mCherry/star_2.7.9a \\\n--readFilesIn /home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234*in progress**_S1_L002_R2_001.fastq.gz \\\n/home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234_S1_L002_R1_001.fastq.gz \\\n--readFilesCommand zcat \\\n--soloFeatures GeneFull \\\n--soloMultiMappers EM \\\n--clipAdapterType CellRanger4 --outFilterScoreMin 30 \\\n--soloCBwhitelist 3M-february-2018.txt \\\n--soloType CB_UMI_Simple \\\n--soloCBlen 16 \\\n--soloUMIstart 17 \\\n--soloUMIlen 12 \\\n--soloBarcodeReadLength 0 \\\n--soloCellFilter EmptyDrops_CR \\\n--limitOutSJcollapsed 5000000 \\\n--runThreadN 8\n\ncd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107/Solo.out/GeneFull\nmkdir raw_EM\ncd raw_EM\n# move multimapped-containing matrix to /raw_EM\nmv ../raw/UniqueAndMult-EM.mtx .\ncp ../raw/features.tsv .\ncp ../raw/barcodes.tsv .\n# rename multimapped-containing matrix to 'matrix.mtx' for --soloCellFiltering\nmv UniqueAndMult-EM.mtx matrix.mtx\n\n# Change working directory to the one containing Aligned.out.sam\ncd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107\n# Call cells\nSTAR --runMode soloCellFiltering ./Solo.out/GeneFull/raw_EM ./Solo.out/GeneFull/filtered_EM/filtered_EM --soloCellFilter EmptyDrops_CR"
  },
  {
    "objectID": "Aim1_part1.html#identification-of-epiphysis-cells",
    "href": "Aim1_part1.html#identification-of-epiphysis-cells",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "",
    "text": "Using single cell RNA-seq (scRNA-seq), can pineal and parapineal cells be identified from a mixed population regardless of sox1a genotype?\n\n\n\nApproximately 230 heads from ~30-32 hpf larvae were collected. Larvae were of mixed sox1a genotype (hets, homs and wild types) obtained by incrossing sox1a hets.\nHeads were dissociated into single cell suspension for FACS-based enrichment of GFP++/mCherry- cells. GFP labels the epiphysis and other ‘contaminant’ cell types, while mCherry labels ‘contaminant’ cell types only. The mCherry transgene was pre-determined in prior imaging experiments to not label the parapineal organ.\nApproximately 10k sorted events were recorded and collected for scRNA-seq using 10X Genomics 3’ v3.1 GEX chemistry. The library was sequenced to at least 500 million reads, thus yielding a depth of ~100k reads per cell.\n\n\n\nSchematic of experiment design.\n\n\n\n\n\nSession\n\n\n\nTo empirically determine the robustness of called clusters downstream, reads were pre-processed using two different mapper/gene annotation combinations:\n\n10X Genomics CellRanger v7.1.0 + Lawson Lab annotation (Lawson et al., 2020)\n\nThis pipeline maps unique reads only:\n# Preprocessing - Cell Ranger 7.1.0 (unique reads only)\ncellranger count --id=foxd3flhGFP \\\n--transcriptome=/home/ucbtvmr/Scratch/cellranger/mkref/GRCz11_lawson/GRCz11_v4.3.2_GFP_mCherry \\\n--fastqs=/home/ucbtvmr/Scratch/4_scRNAseq/fastq \\\n--sample=VCM2-AK30645-AK6234 \\\n--no-bam\n\nSTARsolo v2.7.10b + Ensembl release 107 annotation\n\nThis pipeline includes multi-mapping reads assigned using EM algorithm:\n# Preprocessing - STARsolo v2.7.10b (with EM multi-mapped reads)\nSTAR --genomeDir /home/ucbtvmr/ensembl_releases/ensembl107/Danio_rerio.genome.GFP.mCherry/star_2.7.9a \\\n--readFilesIn /home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234*in progress**_S1_L002_R2_001.fastq.gz \\\n/home/ucbtvmr/Scratch/4_scRNAseq/fastq/VCM2-AK30645-AK6234_S1_L002_R1_001.fastq.gz \\\n--readFilesCommand zcat \\\n--soloFeatures GeneFull \\\n--soloMultiMappers EM \\\n--clipAdapterType CellRanger4 --outFilterScoreMin 30 \\\n--soloCBwhitelist 3M-february-2018.txt \\\n--soloType CB_UMI_Simple \\\n--soloCBlen 16 \\\n--soloUMIstart 17 \\\n--soloUMIlen 12 \\\n--soloBarcodeReadLength 0 \\\n--soloCellFilter EmptyDrops_CR \\\n--limitOutSJcollapsed 5000000 \\\n--runThreadN 8\n\ncd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107/Solo.out/GeneFull\nmkdir raw_EM\ncd raw_EM\n# move multimapped-containing matrix to /raw_EM\nmv ../raw/UniqueAndMult-EM.mtx .\ncp ../raw/features.tsv .\ncp ../raw/barcodes.tsv .\n# rename multimapped-containing matrix to 'matrix.mtx' for --soloCellFiltering\nmv UniqueAndMult-EM.mtx matrix.mtx\n\n# Change working directory to the one containing Aligned.out.sam\ncd /home/ucbtvmr/Scratch/4_scRNAseq/preprocessing/star_2.7.10b/ensembl107\n# Call cells\nSTAR --runMode soloCellFiltering ./Solo.out/GeneFull/raw_EM ./Solo.out/GeneFull/filtered_EM/filtered_EM --soloCellFilter EmptyDrops_CR"
  },
  {
    "objectID": "Aim1_part1.html#scrna-seq-analysis-in-seurat",
    "href": "Aim1_part1.html#scrna-seq-analysis-in-seurat",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "2 scRNA-seq analysis in Seurat",
    "text": "2 scRNA-seq analysis in Seurat\n\n2.1 Load cell x gene matrices\n\npath1 &lt;- \"/home/chongmorrison/Dropbox/VCM-StarBook/ResearchProjects/parapineal/preprocessing/foxd3flhGFP/cellranger7.1.0_Lawson/filtered_feature_bc_matrix\"\npath2 &lt;- \"/home/chongmorrison/Dropbox/VCM-StarBook/ResearchProjects/parapineal/preprocessing/foxd3flhGFP/starsolo2.7.10b_ens107/filtered_EM\"\n\nCreate Seurat objects and check number of cells and genes :\n\ncr_law &lt;- CreateSeuratObject(Read10X(path1), project=\"CellRanger-Lawson\")\nss_e107 &lt;- CreateSeuratObject(ReadSTARsolo(path2), project=\"STARsolo-ens107\")\n\n\n# 4770 cells x 36353 genes\nncol(cr_law)\n\n[1] 4770\n\nnrow(cr_law)\n\n[1] 36353\n\n# 4536 cells x 32522 genes\nncol(ss_e107)\n\n[1] 4536\n\nnrow(ss_e107)\n\n[1] 32522\n\n\n\n\n2.2 Filter genes\n\n# Extract counts\ncounts &lt;- LayerData(cr_law, layer = \"counts\")\n# Output a logical matrix specifying for each gene on whether or not there are more than zero counts per cell\nnonzero &lt;- counts &gt; 0\n# Sums all TRUE values and returns TRUE if more than 5 TRUE values per gene\nkeep_genes &lt;- Matrix::rowSums(nonzero) &gt;= 5\n# Only keeping those genes expressed in more than 5 cells\nfiltered_counts &lt;- counts[keep_genes, ]\n# Assign to Seurat object (make new SeuratObject)\ncr_law &lt;- CreateSeuratObject(filtered_counts, meta.data = cr_law@meta.data)\n# 4770 cells x 24969 genes\nncol(cr_law)\n\n[1] 4770\n\nnrow(cr_law)\n\n[1] 24969\n\ncounts &lt;- LayerData(ss_e107, layer = \"counts\")\nnonzero &lt;- counts &gt; 0\nkeep_genes &lt;- Matrix::rowSums(nonzero) &gt;= 5\nfiltered_counts &lt;- counts[keep_genes, ]\nss_e107 &lt;- CreateSeuratObject(filtered_counts, meta.data = ss_e107@meta.data)\n# 4536 cells x 23946 genes\nncol(ss_e107) \n\n[1] 4536\n\nnrow(ss_e107)\n\n[1] 23946\n\n\n\n\n2.3 Compute additional metrics - percent.mito, ribo, complexity\n\ncr_law$percent.mt &lt;- PercentageFeatureSet(cr_law, pattern = \"^mt-\")\ncr_law$log10GenesPerUMI &lt;- log10(cr_law$nFeature_RNA) / log10(cr_law$nCount_RNA)\ncr_law$percent.ribo &lt;- PercentageFeatureSet(cr_law, pattern =\"^rps\") + \n  PercentageFeatureSet(cr_law, pattern =\"^rpl\")\n\nss_e107$percent.mt &lt;- PercentageFeatureSet(ss_e107, pattern = \"^mt-\")\nss_e107$log10GenesPerUMI &lt;- log10(ss_e107$nFeature_RNA) / log10(ss_e107$nCount_RNA)\nss_e107$percent.ribo &lt;- PercentageFeatureSet(ss_e107, pattern =\"^rps\") + \n  PercentageFeatureSet(ss_e107, pattern =\"^rpl\")\n\n\n\n2.4 Compute cell cycle scores\n\n2.4.1 Obtain cell cycle genes\n\ncell_cycle_genes &lt;- read.csv(text = RCurl::getURL(\"https://raw.githubusercontent.com/hbc/tinyatlas/master/cell_cycle/Danio_rerio.csv\"))\n# call in Ensembl annotations\nannotations &lt;- read.csv('./annotations/ensembl_annotations.csv', header=TRUE, row.names=1)\n# make a dataframe of cell cycle markers\ncell_cycle_markers &lt;- dplyr::left_join(cell_cycle_genes, annotations, by = c(\"geneID\" = \"gene_id\"))\n\ns_genes &lt;- cell_cycle_markers %&gt;%\n  dplyr::filter(phase == \"S\") %&gt;%\n  pull(\"gene_name\")\n\ng2m_genes &lt;- cell_cycle_markers %&gt;%\n  dplyr::filter(phase == \"G2/M\") %&gt;%\n  pull(\"gene_name\")\n\n# Remove non-zebrafish \"CENPF\" and \"CKS2\" from g2m_genes\ng2m_genes &lt;- g2m_genes[!g2m_genes == c(\"CENPF\",\"CKS2\")]\n\n\n\n2.4.2 Cell cycle scoring\n\n# Normalise counts for cell cycle scoring\ncr_law &lt;- NormalizeData(cr_law)\nss_e107 &lt;- NormalizeData(ss_e107)\n\n# Cell cycle scoring\ncr_law &lt;- CellCycleScoring(cr_law, g2m.features = g2m_genes, s.features = s_genes)\nss_e107 &lt;- CellCycleScoring(ss_e107, g2m.features = g2m_genes, s.features = s_genes)\n\n# Add difference between G2M and S phase scores\ncr_law$CC.Difference &lt;- cr_law$S.Score - cr_law$G2M.Score\nss_e107$CC.Difference &lt;- ss_e107$S.Score - ss_e107$G2M.Score\n\n\n\n\n2.5 Cell filtering?\nIn a lot of cases, studies, example workflows etc. ‘poor’ quality cells are filtered out based on arbitrary metrics e.g. number of transcripts/genes suggestive of multiplets, high percentage mitochondrial transcripts suggestive of dying cells.\nI judge these to be sound reasoning points…if you truly know the cellular composition of the dataset. Unlike gene-level filtering where you only make an a priori definition of an ‘expressed’ gene i.e. in at least X number of cells, cell filtering based on biological conditions dictated by the metrics mentioned above is more nuanced and (I believe) could introduce unnecessary bias and/or risk losing ‘good’ cells.\nTherefore, for this novel dataset, I take a quasi-unbiased approach :\n\nCheck that *most* cells are largely healthy i.e. percent.mt &lt; 5\n\ndittoPlot(cr_law, \"percent.mt\", group.by = \"Phase\",\n          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n          main = \"PercentageFeatureSet(^mt-), cr_law\")\n\n\n\n\n\ndittoPlot(ss_e107, \"percent.mt\", group.by = \"Phase\",\n          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n          main = \"PercentageFeatureSet(^mt-), ss_e107\")\n\n\n\n\nPerform dimensional reduction i.e. clustering on all cells, then\n\nCheck that potential multiplets are not forming spurious clusters, and are distributed across all called clusters\nAlso check that other ‘uninteresting’ metrics are not forming spurious clusters"
  },
  {
    "objectID": "Aim1_part1.html#dimensional-reductionclustering",
    "href": "Aim1_part1.html#dimensional-reductionclustering",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "3 Dimensional reduction/clustering",
    "text": "3 Dimensional reduction/clustering\n\n3.1 SCTransform (‘normalise, find variable genes, regress unwanted variation’)\nI previously explored the data to check if there was significant variation between the cell types driven by ribosomal/mitochondrial content. Supplementary Section 1 (in progress).\nThere was clear variation being driven by cell cycle phase. This was expected given a neuronal-enriched population at this developmental stage.\nAltogether these inform the SCTransform parameters, where CC.Difference is used instead of Phase to maintain the separation between progenitors and non-cycling cells :\n\nDefaultAssay(cr_law) &lt;- \"RNA\"\ncr_law &lt;- SCTransform(cr_law,\n                     vars.to.regress = c(\"percent.ribo\", \"percent.mt\", \"CC.Difference\"),\n                     vst.flavor=\"v2\")\n\nDefaultAssay(ss_e107) &lt;- \"RNA\"\nss_e107 &lt;- SCTransform(ss_e107,\n                       vars.to.regress = c(\"percent.ribo\", \"percent.mt\", \"CC.Difference\"),\n                       vst.flavor=\"v2\")\n\n\n\n3.2 ‘Unsupervised’ Clustering\nAs clustering is more an art than exact science, I empirically determined the main parameters - algorithm, npcs, k.param, and resolution - and compared the result between the two pre-processing workflows/Seurat objects.\n‘Picking’ the number of Principal Component dimensions npcs :\n\nDefaultAssay(cr_law) &lt;- \"SCT\"\ncr_law &lt;- RunPCA(cr_law, npcs = 60)\nElbowPlot(cr_law, ndims=60, reduction=\"pca\")\n\n\n\nDefaultAssay(ss_e107) &lt;- \"SCT\"\nss_e107 &lt;- RunPCA(ss_e107, npcs = 60)\nElbowPlot(ss_e107, ndims=60, reduction=\"pca\")\n\n\n\n\nBased on the elbow plots above I went with npcs = 40. k.param is kept at the default 20, and the Leiden algorithm = 4 is selected.\n\ncr_law &lt;- RunPCA(cr_law, npcs = 40) %&gt;%\n  FindNeighbors(dims = 1:40) %&gt;%\n  FindClusters(algorithm = 4, resolution = c(1.0), method=\"igraph\") %&gt;%\n  RunUMAP(dims = 1:40, n.neighbors = 20) # to match default k.param=20\n\nss_e107 &lt;- RunPCA(ss_e107, npcs = 40) %&gt;%\n  FindNeighbors(dims = 1:40) %&gt;%\n  FindClusters(algorithm = 4, resolution = c(1.0), method=\"igraph\") %&gt;%\n  RunUMAP(dims = 1:40, n.neighbors = 20) # to match default k.param=20\n\nSave Seurat objects to load later without re-running all the above :\n\n# Set DefaultAssay and save objects for visualisation\nDefaultAssay(cr_law) &lt;- \"RNA\"\ncr_law &lt;- NormalizeData(cr_law)\nDefaultAssay(ss_e107) &lt;- \"RNA\"\nss_e107 &lt;- NormalizeData(ss_e107)\n\nsave(cr_law, file=\"../foxd3flh-5k_cr-law.RData\")\nsave(ss_e107, file=\"../foxd3flh-5k_ss-e107.RData\")"
  },
  {
    "objectID": "Aim1_part1.html#visualise-and-explore-clustering-results-with-dittoseq",
    "href": "Aim1_part1.html#visualise-and-explore-clustering-results-with-dittoseq",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "4 Visualise and explore clustering results with dittoSeq",
    "text": "4 Visualise and explore clustering results with dittoSeq\n\n4.1 UMAP reduction\n\n# Reset DefaultAssay and Normalise counts for visualisation\nDefaultAssay(cr_law) &lt;- \"RNA\"\ncr_law &lt;- NormalizeData(cr_law)\nDefaultAssay(ss_e107) &lt;- \"RNA\"\nss_e107 &lt;- NormalizeData(ss_e107)\n\n\ndittoDimPlot(cr_law, \"SCT_snn_res.1\", reduction.use=\"umap\",\n             main=\"CellRanger7.1.0\",\n             sub=\"Lawson2020\",\n             legend.title=\"clusters\",\n             do.label=TRUE)\n\n\n\n\n\ndittoDimPlot(ss_e107, \"SCT_snn_res.1\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b\",\n             sub=\"ensembl107\",\n             legend.title=\"clusters\",\n             do.label=TRUE)"
  },
  {
    "objectID": "Aim1_part1.html#identify-epiphysis-clusters",
    "href": "Aim1_part1.html#identify-epiphysis-clusters",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "5 Identify epiphysis clusters",
    "text": "5 Identify epiphysis clusters\nThe epiphysis shares several of its known i.e. well-characterised markers with other neuronal/cranial cell types. For example, bsx is also expressed in the hypothalamus, noto is also expressed in the telencephalon, otx5 is also expressed in the retina. Inferring the epiphysis clusters from any of these genes alone is futile:\n\n# Genes that are well known to be expressed in the epiphysis\nmarkers &lt;- c(\"bsx\", \"noto\", \"otx5\")\n\n\ndittoPlotVarsAcrossGroups(cr_law, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"cr_law (bsx/noto/otx5)\", summary.fxn = max, adjustment = NULL)\n\n\n\n\n\ndittoPlotVarsAcrossGroups(ss_e107, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"ss_e107 (bsx/noto/otx5)\", summary.fxn = max, adjustment = NULL)\n\n\n\n\nI reasoned that, by using instead the mean expression values of these three genes combined, one could eliminate clusters that are least likely to be epiphysis cells.\nFor example, an epiphysis cell is likely to co-express bsx (1) + noto (1) + otx5 (1) = 3. Mean expression value = 3 / 3 = 1.\nOn the other hand, a retina cell would not express bsx ( &lt; 1) + noto (&lt; 1), but express + otx5 (1) = &lt; 3. Mean expression value = &lt;3 / 3 = &lt; 1.\n\ndittoPlotVarsAcrossGroups(cr_law, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"cr_law (mean of bsx + noto + otx5)\")\n\n\n\n\n\ndittoPlotVarsAcrossGroups(ss_e107, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"ss_e107 (mean of bsx + noto + otx5)\")\n\n\n\n\nThis worked quite well, and one can appreciate two clusters-of-interest likely to be epiphysis cells. Furthermore, this observation is robust and reproducible from cell x gene matrices generated using the two dissimilar pre-processing pipelines.\n\ncr_law clusters-of-interest = 2 and 18\nss_e107 clusters-of-interest = 2 and 19\n\nLet’s now look at sox1a that is expressed in the parapineal as it emerges from the anterior pineal region (Lekk et al. 2019). The following plots show that sox1a expression can be detected in the clusters-of-interest.\n\nmulti_dittoDimPlot(cr_law, c(markers,\"sox1a\"), order=\"increasing\", reduction.use=\"umap\")\n\n\n\n\n\nmulti_dittoDimPlot(ss_e107, c(markers,\"sox1a\"), order=\"increasing\", reduction.use=\"umap\")\n\n\n\n\nAs both matrices consistently produced similar results so far, I am proceeding further with ss_e107 only.\nHow many cells (roughly) are present in the clusters-of-interest? ~250 cells in total.\n\ndittoBarPlot(ss_e107, \"SCT_snn_res.1\", group.by = \"SCT_snn_res.1\",\n             scale = \"count\",\n             cells.use = meta(\"SCT_snn_res.1\", ss_e107) == c(\"2\", \"19\"),\n             main=\"No. of cells\")"
  },
  {
    "objectID": "Aim1_part1.html#sanity-checks-on-clustering",
    "href": "Aim1_part1.html#sanity-checks-on-clustering",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "6 Sanity checks on clustering",
    "text": "6 Sanity checks on clustering\nRemember that I did not perform Cell filtering? To evaluate if the clustering afterwards was largely driven by ‘true’ biological heterogeneity, in a qualitative sense:\n\n6.1 Check distribution of multiplets\nI run scDblFinder to identify multiplets:\n\nsce &lt;- SingleCellExperiment(\n  assays = list(counts = as.matrix(LayerData(ss_e107, assay = \"RNA\", layer=\"counts\"))))\n\nlibrary(scDblFinder)\nsce &lt;- scDblFinder(sce, clusters=c(Idents(ss_e107)),\n                   BPPARAM=MulticoreParam(2, RNGseed=1234))\n\ntable(sce$scDblFinder.class)\n\n\nsinglet doublet \n   4167     369 \n\n\nNow port the results back to the original ss_e107 object for visualisation. Called doublets are distributed randomly across entire dataset, which is ideal.\n\nss_e107$scDblFinder.class &lt;- sce$scDblFinder.class\n\n\ndittoDimPlot(ss_e107, \"scDblFinder.class\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"class\")\n\n\n\n\n\n\n6.2 What about other metrics?\n\ndittoDimPlot(ss_e107, \"nCount_RNA\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"nUMI\")\n\n\n\n\n\ndittoDimPlot(ss_e107, \"nFeature_RNA\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"nGenes\")\n\n\n\n\n\ndittoDimPlot(ss_e107, \"percent.ribo\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"% ribosomal transcripts\")\n\n\n\n\n\ndittoDimPlot(ss_e107, \"percent.mt\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"% mitochondrial transcripts\")\n\n\n\n\n\ndittoDimPlot(ss_e107, \"Phase\", reduction.use=\"umap\",\n             main=\"STARsolo2.7.10b_ensembl107\",\n             sub=\"SCT_snn_res.1\",\n             legend.title=\"cell cycle\")\n\n\n\n\nThe plots above suggests that the clusters-of-interest 2 and 19 vary from each other by cell cycle phase, and perhaps by subtle differences in the other metrics. This is something to bear in mind when interpreting results based on this clustering."
  },
  {
    "objectID": "Aim1_part1.html#summary-notes-for-aim-1---part-1",
    "href": "Aim1_part1.html#summary-notes-for-aim-1---part-1",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "7 Summary notes for Aim 1 - Part 1",
    "text": "7 Summary notes for Aim 1 - Part 1\n\nPutative epiphysis cell clusters can be identified by scRNA-seq regardless of sox1a genotype.\nSox1a-positive putative parapineal cells can be detected within these clusters.\nNext step: In vivo validation of these putative clusters using imaging-based spatial transcriptomics (Vizgen MERSCOPE)"
  },
  {
    "objectID": "Aim1_part1.html#references",
    "href": "Aim1_part1.html#references",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "8 References",
    "text": "8 References\n\n8.1 Packages\n\npkgs &lt;- cite_packages(output = \"table\", out.dir = \".\")\nknitr::kable(pkgs)\n\n\n\n\nPackage\nVersion\nCitation\n\n\n\n\nbase\n4.4.2\nR Core Team (2024)\n\n\nBiocParallel\n1.38.0\n(BiocPar?)….\n\n\ndittoSeq\n1.16.0\nBunis et al. (2020)\n\n\nfuture\n1.34.0\nBengtsson (2021)\n\n\nknitr\n1.49\n(knitr20?)….\n\n\nMatrix\n1.7.0\nBates, Maechler, and Jagan (2024)\n\n\nRCurl\n1.98.1.16\nTemple Lang (2024)\n\n\nreticulate\n1.40.0\nUshey, Allaire, and Tang (2024)\n\n\nrmarkdown\n2.29\n(rmarkdo?)….\n\n\nscDblFinder\n1.18.0\nGermain et al. (2022)\n\n\nSeurat\n5.1.0\n(Seurat2?)….\n\n\nSingleCellExperiment\n1.26.0\n(SingleC?)….\n\n\ntidyverse\n2.0.0\nWickham et al. (2019)\n\n\nUpSetR\n1.4.0\nGehlenborg (2019)\n\n\n\n\n\n\n\n8.2 Previous work\n\nMary Piper, Meeta Mistry, Jihe Liu, William Gammerdinger, & Radhika Khetani. (2022, January 6). hbctraining/scRNA-seq_online: scRNA-seq Lessons from HCBC (first release). Zenodo. https://doi.org/10.5281/zenodo.5826256.\nI. Lekk, V. Duboc, A. Faro, S. Nicolaou, P. Blader and S.W. Wilson. Sox1a mediates the ability of the parapineal to impart habenular left-right asymmetry. eLife (2019), e47376, 8, https://doi.org/10.7554/eLife.47376\nLawson Lab zebrafish transcriptome annotation"
  },
  {
    "objectID": "Aim1_part1.html#session-info",
    "href": "Aim1_part1.html#session-info",
    "title": "The parapineal ‘cell type’ - Part 1",
    "section": "9 Session Info",
    "text": "9 Session Info\n\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] scDblFinder_1.18.0          grateful_0.2.10            \n [3] SingleCellExperiment_1.26.0 SummarizedExperiment_1.34.0\n [5] Biobase_2.64.0              GenomicRanges_1.56.2       \n [7] GenomeInfoDb_1.40.1         IRanges_2.38.1             \n [9] S4Vectors_0.42.1            BiocGenerics_0.50.0        \n[11] MatrixGenerics_1.16.0       matrixStats_1.4.1          \n[13] dittoSeq_1.16.0             lubridate_1.9.3            \n[15] forcats_1.0.0               stringr_1.5.1              \n[17] dplyr_1.1.4                 purrr_1.0.2                \n[19] readr_2.1.5                 tidyr_1.3.1                \n[21] tibble_3.2.1                ggplot2_3.5.1              \n[23] tidyverse_2.0.0             Seurat_5.1.0               \n[25] SeuratObject_5.0.2          sp_2.1-4                   \n[27] reticulate_1.40.0           BiocParallel_1.38.0        \n[29] future_1.34.0              \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.22          splines_4.4.2            \n  [3] later_1.3.2               BiocIO_1.14.0            \n  [5] bitops_1.0-9              polyclip_1.10-7          \n  [7] XML_3.99-0.17             fastDummies_1.7.4        \n  [9] lifecycle_1.0.4           edgeR_4.2.2              \n [11] globals_0.16.3            lattice_0.22-6           \n [13] MASS_7.3-61               magrittr_2.0.3           \n [15] limma_3.60.6              plotly_4.10.4            \n [17] rmarkdown_2.29            yaml_2.3.10              \n [19] metapod_1.12.0            httpuv_1.6.15            \n [21] glmGamPoi_1.16.0          sctransform_0.4.1        \n [23] spam_2.11-0               spatstat.sparse_3.1-0    \n [25] cowplot_1.1.3             pbapply_1.7-2            \n [27] RColorBrewer_1.1-3        abind_1.4-8              \n [29] zlibbioc_1.50.0           Rtsne_0.17               \n [31] RCurl_1.98-1.16           rappdirs_0.3.3           \n [33] GenomeInfoDbData_1.2.12   ggrepel_0.9.6            \n [35] irlba_2.3.5.1             listenv_0.9.1            \n [37] spatstat.utils_3.1-1      pheatmap_1.0.12          \n [39] goftest_1.2-3             RSpectra_0.16-2          \n [41] dqrng_0.4.1               spatstat.random_3.3-2    \n [43] fitdistrplus_1.2-1        parallelly_1.39.0        \n [45] DelayedMatrixStats_1.26.0 leiden_0.4.3.1           \n [47] codetools_0.2-20          DelayedArray_0.30.1      \n [49] scuttle_1.14.0            tidyselect_1.2.1         \n [51] UCSC.utils_1.0.0          farver_2.1.2             \n [53] viridis_0.6.5             ScaledMatrix_1.12.0      \n [55] spatstat.explore_3.3-3    GenomicAlignments_1.40.0 \n [57] jsonlite_1.8.9            BiocNeighbors_1.22.0     \n [59] progressr_0.15.0          scater_1.32.1            \n [61] ggridges_0.5.6            survival_3.7-0           \n [63] tools_4.4.2               ica_1.0-3                \n [65] Rcpp_1.0.13-1             glue_1.8.0               \n [67] gridExtra_2.3             SparseArray_1.4.8        \n [69] xfun_0.49                 withr_3.0.2              \n [71] fastmap_1.2.0             bluster_1.14.0           \n [73] fansi_1.0.6               rsvd_1.0.5               \n [75] digest_0.6.37             timechange_0.3.0         \n [77] R6_2.5.1                  mime_0.12                \n [79] colorspace_2.1-1          scattermore_1.2          \n [81] tensor_1.5                spatstat.data_3.1-2      \n [83] utf8_1.2.4                generics_0.1.3           \n [85] renv_1.0.11               data.table_1.16.2        \n [87] rtracklayer_1.64.0        httr_1.4.7               \n [89] htmlwidgets_1.6.4         S4Arrays_1.4.1           \n [91] uwot_0.2.2                pkgconfig_2.0.3          \n [93] gtable_0.3.6              lmtest_0.9-40            \n [95] XVector_0.44.0            htmltools_0.5.8.1        \n [97] dotCall64_1.2             scales_1.3.0             \n [99] png_0.1-8                 spatstat.univar_3.1-1    \n[101] scran_1.32.0              knitr_1.49               \n[103] rstudioapi_0.17.1         rjson_0.2.23             \n[105] tzdb_0.4.0                reshape2_1.4.4           \n[107] curl_6.0.1                nlme_3.1-165             \n[109] zoo_1.8-12                KernSmooth_2.23-24       \n[111] vipor_0.4.7               parallel_4.4.2           \n[113] miniUI_0.1.1.1            restfulr_0.0.15          \n[115] pillar_1.9.0              grid_4.4.2               \n[117] vctrs_0.6.5               RANN_2.6.2               \n[119] promises_1.3.0            BiocSingular_1.20.0      \n[121] beachmat_2.20.0           xtable_1.8-4             \n[123] cluster_2.1.6             beeswarm_0.4.0           \n[125] evaluate_1.0.1            locfit_1.5-9.10          \n[127] Rsamtools_2.20.0          cli_3.6.3                \n[129] compiler_4.4.2            rlang_1.1.4              \n[131] crayon_1.5.3              future.apply_1.11.3      \n[133] labeling_0.4.3            ggbeeswarm_0.7.2         \n[135] plyr_1.8.9                stringi_1.8.4            \n[137] viridisLite_0.4.2         deldir_2.0-4             \n[139] Biostrings_2.72.1         munsell_0.5.1            \n[141] lazyeval_0.2.2            spatstat.geom_3.3-3      \n[143] Matrix_1.7-0              RcppHNSW_0.6.0           \n[145] hms_1.1.3                 patchwork_1.3.0          \n[147] sparseMatrixStats_1.16.0  statmod_1.5.0            \n[149] shiny_1.9.1               ROCR_1.0-11              \n[151] igraph_2.1.1              xgboost_1.7.8.1"
  },
  {
    "objectID": "Aim1_part2.html",
    "href": "Aim1_part2.html",
    "title": "The parapineal ‘cell type’ - Part 2",
    "section": "",
    "text": "In the previous section, two putative epiphysis cell clusters were identified in a ~30-32 hpf scRNA-seq dataset. Can this result be replicated in the embryo? In other words, how likely are the inferred clusters to be from the epiphysis?\n\n\n\nMERFISH (Multiplexed Error-Robust Fluorescence in situ Hybridisation) is an imaging-based approach capable of measuring RNA transcripts at single cell resolution. Unlike the destructive nature of scRNA-seq, in vivo spatial information (where each measured transcript is located in the sample) is preserved. Vizgen MERSCOPE offers a commercial platform to perform MERFISH and was employed for this study.\n\n\n\nSchematic of experiment design. A detailed sample preparation protocol can be found on https://vchongmorrison.github.io/protocols/\n\n\nAs illustrated above, only x2 10 micron tissue sections were collected for MERFISH. This was restricted by the maximum imaging area on the MERSCOPE slide. Therefore &gt;1 embryos were simultaneously mounted in a tissue block, with the caveat that there will be unavoidable inter-embryo variation of the resulting tissue slices. Depending on how the embryo was mounted, the first (and second) section could be from the parapineal/pineal region (sox1a / bsx ++), or 1 or 2 planes later towards the pineal region only (bsx +).\nThe final dataset consists of x2 sections each of x2 biological replicates/embryos (wild type). For sake of brevity, each section is hereafter named ‘anterior’ or ‘posterior’ depending on their relative location within the embryo they originated from.\n\n\n\nSession"
  },
  {
    "objectID": "Aim1_part2.html#identification-of-epiphysis-cells",
    "href": "Aim1_part2.html#identification-of-epiphysis-cells",
    "title": "The parapineal ‘cell type’ - Part 2",
    "section": "",
    "text": "In the previous section, two putative epiphysis cell clusters were identified in a ~30-32 hpf scRNA-seq dataset. Can this result be replicated in the embryo? In other words, how likely are the inferred clusters to be from the epiphysis?\n\n\n\nMERFISH (Multiplexed Error-Robust Fluorescence in situ Hybridisation) is an imaging-based approach capable of measuring RNA transcripts at single cell resolution. Unlike the destructive nature of scRNA-seq, in vivo spatial information (where each measured transcript is located in the sample) is preserved. Vizgen MERSCOPE offers a commercial platform to perform MERFISH and was employed for this study.\n\n\n\nSchematic of experiment design. A detailed sample preparation protocol can be found on https://vchongmorrison.github.io/protocols/\n\n\nAs illustrated above, only x2 10 micron tissue sections were collected for MERFISH. This was restricted by the maximum imaging area on the MERSCOPE slide. Therefore &gt;1 embryos were simultaneously mounted in a tissue block, with the caveat that there will be unavoidable inter-embryo variation of the resulting tissue slices. Depending on how the embryo was mounted, the first (and second) section could be from the parapineal/pineal region (sox1a / bsx ++), or 1 or 2 planes later towards the pineal region only (bsx +).\nThe final dataset consists of x2 sections each of x2 biological replicates/embryos (wild type). For sake of brevity, each section is hereafter named ‘anterior’ or ‘posterior’ depending on their relative location within the embryo they originated from.\n\n\n\nSession"
  },
  {
    "objectID": "Aim1_part2.html#merscope-panel-design",
    "href": "Aim1_part2.html#merscope-panel-design",
    "title": "The parapineal ‘cell type’ - Part 2",
    "section": "2 MERSCOPE panel design",
    "text": "2 MERSCOPE panel design\nVizgen offers the option to build custom gene panels of up to 140, 300, 500 or 1000 genes at increasingly extortionate prices. Since the aim of the MERFISH experiment was to query the two putative scRNA-seq epiphysis clusters 2 and 19 from the previously analysed ss_e107 SeuratObject, a 140 gene panel was designed based on this result.\n\nload(\"../foxd3flh-5k_ss-e107.RData\")\n\n\n# Genes that are well known to be expressed in the epiphysis\nmarkers &lt;- c(\"bsx\", \"noto\", \"otx5\")\ndittoPlotVarsAcrossGroups(ss_e107, markers, group.by = \"SCT_snn_res.1\",\n                          vlnplot.lineweight = 0.2, jitter.size = 0.3,\n                          main = \"ss_e107 (mean of bsx + noto + otx5)\")\n\n\n\n\n\n2.1 Call markers\nThere is an overwhelming number of methods in the scientific literature for scRNA-seq marker identification. Depending on your goal(s) for performing marker identification, some approaches might be better suited than others.\nIn this case, the main goal is to shortlist genes that could be MERFISH-measured in the embryo, including (hopefully) the epiphysis region. As a first pass, we run FindMarkers (implemented in Seurat) on clusters 2 and 19.\n\ncl2.de.markers &lt;- FindMarkers(ss_e107, ident.1 = \"2\", ident.2 = NULL, only.pos = TRUE, assay = \"RNA\")\nnrow(cl2.de.markers)\n\n[1] 6936\n\n# Add new column of gene IDs called 'markers'\ncl2.de.markers$markers &lt;- rownames(cl2.de.markers)\nhead(cl2.de.markers, 10)\n\n                 p_val avg_log2FC pct.1 pct.2 p_val_adj          markers\notx1                 0   2.755492 0.938 0.100         0             otx1\notx2b                0   3.250256 0.810 0.044         0            otx2b\nbarhl2               0   3.424283 0.812 0.074         0           barhl2\nsi:ch211-69b22.5     0   2.500534 0.808 0.070         0 si:ch211-69b22.5\notx2a                0   2.263520 0.821 0.097         0            otx2a\nwnt4                 0   2.333122 0.783 0.076         0             wnt4\nfabp11a              0   4.230501 0.968 0.270         0          fabp11a\nzic4                 0   2.272131 0.778 0.096         0             zic4\nsall3b               0   2.044002 0.670 0.055         0           sall3b\ntpbga                0   3.059875 0.655 0.045         0            tpbga\n\n\n\ncl19.de.markers &lt;- FindMarkers(ss_e107, ident.1 = \"19\", ident.2 = NULL, only.pos = TRUE, assay = \"RNA\")\nnrow(cl19.de.markers)\n\n[1] 11487\n\n# Add new column of gene IDs called 'markers'\ncl19.de.markers$markers &lt;- rownames(cl19.de.markers)\nhead(cl19.de.markers, 10)\n\n                          p_val avg_log2FC pct.1 pct.2     p_val_adj\nbsx                0.000000e+00   5.801700 0.910 0.030  0.000000e+00\nisl1               0.000000e+00   5.476998 0.888 0.031  0.000000e+00\nsix3a              0.000000e+00   6.449455 0.708 0.014  0.000000e+00\nlayna              0.000000e+00   6.930195 0.663 0.011  0.000000e+00\nsi:ch211-67e16.11  0.000000e+00   5.451577 0.663 0.014  0.000000e+00\nzgc:165481        8.312723e-294   6.072816 0.629 0.013 1.990565e-289\nLHX3              2.098162e-279   8.568871 0.326 0.001 5.024258e-275\nbtbd3b            6.471199e-274   4.982485 0.573 0.011 1.549593e-269\nnxph1             3.397695e-248   6.210768 0.742 0.027 8.136121e-244\nskor1b            1.170595e-245   6.371964 0.618 0.017 2.803108e-241\n                            markers\nbsx                             bsx\nisl1                           isl1\nsix3a                         six3a\nlayna                         layna\nsi:ch211-67e16.11 si:ch211-67e16.11\nzgc:165481               zgc:165481\nLHX3                           LHX3\nbtbd3b                       btbd3b\nnxph1                         nxph1\nskor1b                       skor1b\n\n\nUsing the default cut-offs resulted in ~7 and 11k of markers. Clearly these need to be significantly narrowed down to build a 140 gene panel.\n\n\n2.2 Cross-reference with ZFIN\nThis was achieved by mining ZFIN gene expression data for called markers whose expression were detected in the epiphysis. Of course, this is not fool-proof and heavily depends on the accuracy and completion of ZFIN’s annotation. There may be many genes whose expression in the epiphysis were not annotated as such and therefore will be missed (more likely), and vice versa (exception rather than rule).\nFollow the link above for the code to pull ZFIN data-of-interest into a dataframe gex_ISH used below :\n\n# Match every marker with every known WISH-detected Structure\ncl2.de.markers.epiphysis &lt;- left_join(cl2.de.markers, gex_ISH, by = c(\"markers\" = \"GeneSymbol\"))\nhead(cl2.de.markers.epiphysis, 5)\n\n  p_val avg_log2FC pct.1 pct.2 p_val_adj markers                   Structure\n1     0   2.755492 0.938   0.1         0    otx1  alar plate midbrain region\n2     0   2.755492 0.938   0.1         0    otx1    anterior axial hypoblast\n3     0   2.755492 0.938   0.1         0    otx1                        axis\n4     0   2.755492 0.938   0.1         0    otx1 basal plate midbrain region\n5     0   2.755492 0.938   0.1         0    otx1                diencephalon\n\n# Filter for \"epiphysis\" only\ncl2.de.markers.epiphysis &lt;- distinct(filter(cl2.de.markers.epiphysis, Structure==\"epiphysis\"))\nhead(cl2.de.markers.epiphysis, 5)\n\n          p_val avg_log2FC pct.1 pct.2     p_val_adj markers Structure\n1  0.000000e+00   2.755492 0.938 0.100  0.000000e+00    otx1 epiphysis\n2  0.000000e+00   3.250256 0.810 0.044  0.000000e+00   otx2b epiphysis\n3  0.000000e+00   2.263520 0.821 0.097  0.000000e+00   otx2a epiphysis\n4  0.000000e+00   2.333122 0.783 0.076  0.000000e+00    wnt4 epiphysis\n5 4.197046e-284   2.721522 0.959 0.210 1.005025e-279  cldn5a epiphysis\n\nnrow(cl2.de.markers.epiphysis)\n\n[1] 135\n\n\n\n# Match every marker with every known WISH-detected Structure\ncl19.de.markers.epiphysis &lt;- left_join(cl19.de.markers, gex_ISH, by = c(\"markers\" = \"GeneSymbol\"))\nhead(cl19.de.markers.epiphysis, 5)\n\n  p_val avg_log2FC pct.1 pct.2 p_val_adj markers         Structure\n1     0     5.8017  0.91  0.03         0     bsx             brain\n2     0     5.8017  0.91  0.03         0     bsx             brain\n3     0     5.8017  0.91  0.03         0     bsx             brain\n4     0     5.8017  0.91  0.03         0     bsx caudal tuberculum\n5     0     5.8017  0.91  0.03         0     bsx caudal tuberculum\n\n# Filter for \"epiphysis\" only\ncl19.de.markers.epiphysis &lt;- distinct(filter(cl19.de.markers.epiphysis, Structure==\"epiphysis\"))\nhead(cl19.de.markers.epiphysis, 5)\n\n          p_val avg_log2FC pct.1 pct.2     p_val_adj markers Structure\n1  0.000000e+00   5.801700 0.910 0.030  0.000000e+00     bsx epiphysis\n2 3.397695e-248   6.210768 0.742 0.027 8.136121e-244   nxph1 epiphysis\n3 2.688572e-217   6.833524 0.337 0.003 6.438054e-213  rcvrn2 epiphysis\n4 9.997499e-179   3.981461 0.865 0.062 2.394001e-174  esrrga epiphysis\n5 4.366307e-176   5.705932 0.404 0.007 1.045556e-171  sall3a epiphysis\n\nnrow(cl19.de.markers.epiphysis)\n\n[1] 302\n\n\nThis step identifies a significantly more manageable ~100 and 300 candidate genes per cluster for a MERFISH experiment.\n\nLink to Cluster 2 candidate genes\nLink to Cluster 19 candidate genes\n\nAt this point the gene lists were manually shortlisted for inclusion into the final MERSCOPE 140 Gene Panel.\n\nKnown genes in literature/previous work\nGABA\n‘Novel’ pickings from cluster 2 and 19 gene lists\n\n\n# Save gene lists to file\nwrite.table(data.frame(cl2.de.markers.epiphysis$markers), file=\"./annotations/cl2_de_markers_epiphysis.txt\", row.names=FALSE, quote=FALSE)\nwrite.table(data.frame(cl19.de.markers.epiphysis$markers), file=\"./annotations/cl19_de_markers_epiphysis.txt\", row.names=FALSE, quote=FALSE)\n\n\n\n2.3 140 Gene Panel for MERSCOPE (final)\n\nmerscope &lt;- read.csv('./annotations/codebook_0_AM0765_zebrafishChongMorrisonAsymmetry.csv', header=TRUE, row.names=1)\nhead(merscope, 10) # print first 10 rows only\n\n                        id barcodeType V0001T8B1 V0002T8B1 V0003T8B1 V0004T8B1\naanat2  ENSDART00000018205     merfish         0         0         1         0\nalcama  ENSDART00000129400     merfish         0         0         0         0\naldocb  ENSDART00000026766     merfish         0         1         0         1\narr3a   ENSDART00000078996     merfish         0         0         0         1\narr3b   ENSDART00000158077     merfish         0         0         0         0\nascl1a  ENSDART00000056005     merfish         0         0         0         0\nasip2b  ENSDART00000185699     merfish         0         0         0         0\natp1a3a ENSDART00000104950     merfish         0         0         0         1\natp1b1b ENSDART00000139387     merfish         0         0         0         0\natp1b2a ENSDART00000160044     merfish         0         1         0         0\n        V0005T8B1 V0006T8B1 V0007T8B1 V0008T8B1 V0009T8B1 V0010T8B1 V0011T8B1\naanat2          0         0         0         0         0         0         1\nalcama          0         0         0         0         0         0         0\naldocb          0         0         0         0         1         0         0\narr3a           0         0         0         1         0         0         0\narr3b           1         1         1         0         1         0         0\nascl1a          0         0         1         0         1         0         0\nasip2b          1         0         1         0         0         0         0\natp1a3a         0         0         0         0         0         1         1\natp1b1b         0         0         0         1         0         1         0\natp1b2a         0         0         0         0         0         0         0\n        V0012T8B1 V0013T8B1 V0014T8B1 V0015T8B1 V0016T8B1 V0017T8B1 V0018T8B1\naanat2          0         0         0         1         1         0         0\nalcama          0         1         1         1         0         1         0\naldocb          0         0         0         1         0         0         0\narr3a           0         0         1         0         0         1         0\narr3b           0         0         0         0         0         0         0\nascl1a          0         0         0         1         0         1         0\nasip2b          0         1         0         1         0         0         0\natp1a3a         0         0         0         0         1         0         0\natp1b1b         0         1         0         0         0         1         0\natp1b2a         0         1         0         1         0         0         1\n\n\n\nLink to panel codebook\n\n\n2.3.1 Composition of the final panel :\n\n##### Explore intersection of markers between clusters #####\nlibrary(UpSetR)\n\ncl2 &lt;- read.table(\"./annotations/cl2_de_markers_epiphysis.txt\", header=TRUE)\ncl2$cluster &lt;- \"Cluster2\"\ncolnames(cl2) &lt;- c(\"markers\",\"cluster\")\n\ncl19 &lt;- read.table(\"./annotations/cl19_de_markers_epiphysis.txt\", header=TRUE)\ncl19$cluster &lt;- \"Cluster19\"\ncolnames(cl19) &lt;- c(\"markers\",\"cluster\")\n\nmerscope$markers &lt;- rownames(merscope)\nmerscope$cluster &lt;- \"merscope\"\nmerscope &lt;- data.frame(merscope$markers, merscope$cluster)\ncolnames(merscope) &lt;- c(\"markers\",\"cluster\")\n\nall.markers &lt;- rbind(cl2, cl19, merscope)\n\n# Format data to serve as input for UpSetR.\ninput &lt;- all.markers %&gt;% mutate(truval=TRUE) %&gt;% spread(cluster, truval, fill=FALSE)\ninput &lt;- input %&gt;%\n  mutate(across(2:4, ~ as.integer(as.character(factor(., levels = c(\"TRUE\", \"FALSE\"), labels = c(1, 0))))))\n\n# UpSetR plot - Conway et al. 2017\nupset(input, empty.intersections = \"on\", order.by = \"freq\", mainbar.y.label = \"Epiphysis marker intersections\", sets.x.label = \"Epiphysis markers per set\")"
  },
  {
    "objectID": "Aim1_part2.html#pre-processing-of-merscope-data",
    "href": "Aim1_part2.html#pre-processing-of-merscope-data",
    "title": "The parapineal ‘cell type’ - Part 2",
    "section": "3 Pre-processing of MERSCOPE data",
    "text": "3 Pre-processing of MERSCOPE data\nMERSCOPE Visualizer is a free software provided by Vizgen as an out-of-box solution to explore results.\n\n3.1 Cell segmentation\nin progress"
  },
  {
    "objectID": "Aim1_part2.html#clustering-of-merscope-data",
    "href": "Aim1_part2.html#clustering-of-merscope-data",
    "title": "The parapineal ‘cell type’ - Part 2",
    "section": "4 Clustering of MERSCOPE data",
    "text": "4 Clustering of MERSCOPE data\nin progress"
  },
  {
    "objectID": "Aim1_part2.html#summary-notes-for-aim-1---part-2",
    "href": "Aim1_part2.html#summary-notes-for-aim-1---part-2",
    "title": "The parapineal ‘cell type’ - Part 2",
    "section": "5 Summary notes for Aim 1 - Part 2",
    "text": "5 Summary notes for Aim 1 - Part 2\n\nin progress\nin progress"
  },
  {
    "objectID": "Aim1_part2.html#references",
    "href": "Aim1_part2.html#references",
    "title": "The parapineal ‘cell type’ - Part 2",
    "section": "6 References",
    "text": "6 References\n\n6.1 Packages\n\npkgs &lt;- cite_packages(output = \"table\", out.dir = \".\")\nknitr::kable(pkgs)\n\n\n\n\nPackage\nVersion\nCitation\n\n\n\n\nbase\n4.4.2\nR Core Team (2024)\n\n\nBiocParallel\n1.38.0\n(BiocPar?)….\n\n\ndittoSeq\n1.16.0\nBunis et al. (2020)\n\n\nfuture\n1.34.0\nBengtsson (2021)\n\n\nknitr\n1.49\n(knitr20?)….\n\n\nMatrix\n1.7.0\nBates, Maechler, and Jagan (2024)\n\n\nRCurl\n1.98.1.16\nTemple Lang (2024)\n\n\nreticulate\n1.40.0\nUshey, Allaire, and Tang (2024)\n\n\nrmarkdown\n2.29\n(rmarkdo?)….\n\n\nscDblFinder\n1.18.0\nGermain et al. (2022)\n\n\nSeurat\n5.1.0\n(Seurat2?)….\n\n\nSingleCellExperiment\n1.26.0\n(SingleC?)….\n\n\ntidyverse\n2.0.0\nWickham et al. (2019)\n\n\nUpSetR\n1.4.0\nGehlenborg (2019)\n\n\n\n\n\n\n\n6.2 Previous work\n\nI. Lekk, V. Duboc, A. Faro, S. Nicolaou, P. Blader and S.W. Wilson. Sox1a mediates the ability of the parapineal to impart habenular left-right asymmetry. eLife (2019), e47376, 8, https://doi.org/10.7554/eLife.47376"
  },
  {
    "objectID": "Aim1_part2.html#session-info",
    "href": "Aim1_part2.html#session-info",
    "title": "The parapineal ‘cell type’ - Part 2",
    "section": "7 Session Info",
    "text": "7 Session Info\n\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] UpSetR_1.4.0                grateful_0.2.10            \n [3] SingleCellExperiment_1.26.0 SummarizedExperiment_1.34.0\n [5] Biobase_2.64.0              GenomicRanges_1.56.2       \n [7] GenomeInfoDb_1.40.1         IRanges_2.38.1             \n [9] S4Vectors_0.42.1            BiocGenerics_0.50.0        \n[11] MatrixGenerics_1.16.0       matrixStats_1.4.1          \n[13] dittoSeq_1.16.0             lubridate_1.9.3            \n[15] forcats_1.0.0               stringr_1.5.1              \n[17] dplyr_1.1.4                 purrr_1.0.2                \n[19] readr_2.1.5                 tidyr_1.3.1                \n[21] tibble_3.2.1                ggplot2_3.5.1              \n[23] tidyverse_2.0.0             Seurat_5.1.0               \n[25] SeuratObject_5.0.2          sp_2.1-4                   \n[27] reticulate_1.40.0           BiocParallel_1.38.0        \n[29] future_1.34.0              \n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3      rstudioapi_0.17.1       jsonlite_1.8.9         \n  [4] magrittr_2.0.3          spatstat.utils_3.1-1    farver_2.1.2           \n  [7] rmarkdown_2.29          zlibbioc_1.50.0         vctrs_0.6.5            \n [10] ROCR_1.0-11             spatstat.explore_3.3-3  S4Arrays_1.4.1         \n [13] htmltools_0.5.8.1       SparseArray_1.4.8       sctransform_0.4.1      \n [16] parallelly_1.39.0       KernSmooth_2.23-24      htmlwidgets_1.6.4      \n [19] ica_1.0-3               plyr_1.8.9              plotly_4.10.4          \n [22] zoo_1.8-12              igraph_2.1.1            mime_0.12              \n [25] lifecycle_1.0.4         pkgconfig_2.0.3         Matrix_1.7-0           \n [28] R6_2.5.1                fastmap_1.2.0           GenomeInfoDbData_1.2.12\n [31] fitdistrplus_1.2-1      shiny_1.9.1             digest_0.6.37          \n [34] colorspace_2.1-1        patchwork_1.3.0         tensor_1.5             \n [37] RSpectra_0.16-2         irlba_2.3.5.1           labeling_0.4.3         \n [40] progressr_0.15.0        fansi_1.0.6             spatstat.sparse_3.1-0  \n [43] timechange_0.3.0        httr_1.4.7              polyclip_1.10-7        \n [46] abind_1.4-8             compiler_4.4.2          withr_3.0.2            \n [49] fastDummies_1.7.4       MASS_7.3-61             DelayedArray_0.30.1    \n [52] rappdirs_0.3.3          tools_4.4.2             lmtest_0.9-40          \n [55] httpuv_1.6.15           future.apply_1.11.3     goftest_1.2-3          \n [58] glue_1.8.0              nlme_3.1-165            promises_1.3.0         \n [61] grid_4.4.2              Rtsne_0.17              cluster_2.1.6          \n [64] reshape2_1.4.4          generics_0.1.3          gtable_0.3.6           \n [67] spatstat.data_3.1-2     tzdb_0.4.0              data.table_1.16.2      \n [70] hms_1.1.3               XVector_0.44.0          utf8_1.2.4             \n [73] spatstat.geom_3.3-3     RcppAnnoy_0.0.22        ggrepel_0.9.6          \n [76] RANN_2.6.2              pillar_1.9.0            limma_3.60.6           \n [79] spam_2.11-0             RcppHNSW_0.6.0          later_1.3.2            \n [82] splines_4.4.2           lattice_0.22-6          renv_1.0.11            \n [85] survival_3.7-0          deldir_2.0-4            tidyselect_1.2.1       \n [88] miniUI_0.1.1.1          pbapply_1.7-2           knitr_1.49             \n [91] gridExtra_2.3           scattermore_1.2         xfun_0.49              \n [94] statmod_1.5.0           pheatmap_1.0.12         UCSC.utils_1.0.0       \n [97] stringi_1.8.4           lazyeval_0.2.2          yaml_2.3.10            \n[100] evaluate_1.0.1          codetools_0.2-20        cli_3.6.3              \n[103] uwot_0.2.2              xtable_1.8-4            munsell_0.5.1          \n[106] Rcpp_1.0.13-1           globals_0.16.3          spatstat.random_3.3-2  \n[109] png_0.1-8               spatstat.univar_3.1-1   parallel_4.4.2         \n[112] presto_1.0.0            dotCall64_1.2           listenv_0.9.1          \n[115] viridisLite_0.4.2       scales_1.3.0            ggridges_0.5.6         \n[118] crayon_1.5.3            leiden_0.4.3.1          rlang_1.1.4            \n[121] cowplot_1.1.3"
  },
  {
    "objectID": "Aim2.html",
    "href": "Aim2.html",
    "title": "The sox1a ‘phenotype’",
    "section": "",
    "text": "[in progress]\n\n.libPaths()\n\n[1] \"/home/chongmorrison/R/x86_64-pc-linux-gnu-library/4.4\"\n[2] \"/usr/local/lib/R/site-library\"                        \n[3] \"/usr/lib/R/site-library\"                              \n[4] \"/usr/lib/R/library\""
  },
  {
    "objectID": "Aim2.html#extract-pineal-cells-from-mutants",
    "href": "Aim2.html#extract-pineal-cells-from-mutants",
    "title": "The sox1a ‘phenotype’",
    "section": "",
    "text": "[in progress]\n\n.libPaths()\n\n[1] \"/home/chongmorrison/R/x86_64-pc-linux-gnu-library/4.4\"\n[2] \"/usr/local/lib/R/site-library\"                        \n[3] \"/usr/lib/R/site-library\"                              \n[4] \"/usr/lib/R/library\""
  },
  {
    "objectID": "Aim2.html#session-info",
    "href": "Aim2.html#session-info",
    "title": "The sox1a ‘phenotype’",
    "section": "2 Session Info",
    "text": "2 Session Info\n\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.5 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] compiler_4.4.2    fastmap_1.2.0     cli_3.6.3         tools_4.4.2      \n [5] htmltools_0.5.8.1 yaml_2.3.10       rmarkdown_2.29    knitr_1.49       \n [9] jsonlite_1.8.9    xfun_0.49         digest_0.6.37     rlang_1.1.4      \n[13] evaluate_1.0.1"
  }
]